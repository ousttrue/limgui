-- this is generated
local ffi = require("ffi")
ffi.cdef[[
enum { GL_2D = 0x0600 };
enum { GL_2_BYTES = 0x1407 };
enum { GL_3D = 0x0601 };
enum { GL_3D_COLOR = 0x0602 };
enum { GL_3D_COLOR_TEXTURE = 0x0603 };
enum { GL_3_BYTES = 0x1408 };
enum { GL_4D_COLOR_TEXTURE = 0x0604 };
enum { GL_4_BYTES = 0x1409 };
enum { GL_ACCUM = 0x0100 };
enum { GL_ACCUM_ALPHA_BITS = 0x0D5B };
enum { GL_ACCUM_BLUE_BITS = 0x0D5A };
enum { GL_ACCUM_BUFFER_BIT = 0x00000200 };
enum { GL_ACCUM_CLEAR_VALUE = 0x0B80 };
enum { GL_ACCUM_GREEN_BITS = 0x0D59 };
enum { GL_ACCUM_RED_BITS = 0x0D58 };
enum { GL_ACTIVE_ATTRIBUTES = 0x8B89 };
enum { GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A };
enum { GL_ACTIVE_TEXTURE = 0x84E0 };
enum { GL_ACTIVE_UNIFORMS = 0x8B86 };
enum { GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36 };
enum { GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35 };
enum { GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87 };
enum { GL_ADD = 0x0104 };
enum { GL_ADD_SIGNED = 0x8574 };
enum { GL_ALIASED_LINE_WIDTH_RANGE = 0x846E };
enum { GL_ALIASED_POINT_SIZE_RANGE = 0x846D };
enum { GL_ALL_ATTRIB_BITS = 0xFFFFFFFF };
enum { GL_ALPHA = 0x1906 };
enum { GL_ALPHA12 = 0x803D };
enum { GL_ALPHA16 = 0x803E };
enum { GL_ALPHA4 = 0x803B };
enum { GL_ALPHA8 = 0x803C };
enum { GL_ALPHA_BIAS = 0x0D1D };
enum { GL_ALPHA_BITS = 0x0D55 };
enum { GL_ALPHA_INTEGER = 0x8D97 };
enum { GL_ALPHA_SCALE = 0x0D1C };
enum { GL_ALPHA_TEST = 0x0BC0 };
enum { GL_ALPHA_TEST_FUNC = 0x0BC1 };
enum { GL_ALPHA_TEST_REF = 0x0BC2 };
enum { GL_ALREADY_SIGNALED = 0x911A };
enum { GL_ALWAYS = 0x0207 };
enum { GL_AMBIENT = 0x1200 };
enum { GL_AMBIENT_AND_DIFFUSE = 0x1602 };
enum { GL_AND = 0x1501 };
enum { GL_AND_INVERTED = 0x1504 };
enum { GL_AND_REVERSE = 0x1502 };
enum { GL_ANY_SAMPLES_PASSED = 0x8C2F };
enum { GL_ARRAY_BUFFER = 0x8892 };
enum { GL_ARRAY_BUFFER_BINDING = 0x8894 };
enum { GL_ATTACHED_SHADERS = 0x8B85 };
enum { GL_ATTRIB_STACK_DEPTH = 0x0BB0 };
enum { GL_AUTO_NORMAL = 0x0D80 };
enum { GL_AUX0 = 0x0409 };
enum { GL_AUX1 = 0x040A };
enum { GL_AUX2 = 0x040B };
enum { GL_AUX3 = 0x040C };
enum { GL_AUX_BUFFERS = 0x0C00 };
enum { GL_BACK = 0x0405 };
enum { GL_BACK_LEFT = 0x0402 };
enum { GL_BACK_RIGHT = 0x0403 };
enum { GL_BGR = 0x80E0 };
enum { GL_BGRA = 0x80E1 };
enum { GL_BGRA_INTEGER = 0x8D9B };
enum { GL_BGR_INTEGER = 0x8D9A };
enum { GL_BITMAP = 0x1A00 };
enum { GL_BITMAP_TOKEN = 0x0704 };
enum { GL_BLEND = 0x0BE2 };
enum { GL_BLEND_COLOR = 0x8005 };
enum { GL_BLEND_DST = 0x0BE0 };
enum { GL_BLEND_DST_ALPHA = 0x80CA };
enum { GL_BLEND_DST_RGB = 0x80C8 };
enum { GL_BLEND_EQUATION = 0x8009 };
enum { GL_BLEND_EQUATION_ALPHA = 0x883D };
enum { GL_BLEND_EQUATION_RGB = 0x8009 };
enum { GL_BLEND_SRC = 0x0BE1 };
enum { GL_BLEND_SRC_ALPHA = 0x80CB };
enum { GL_BLEND_SRC_RGB = 0x80C9 };
enum { GL_BLUE = 0x1905 };
enum { GL_BLUE_BIAS = 0x0D1B };
enum { GL_BLUE_BITS = 0x0D54 };
enum { GL_BLUE_INTEGER = 0x8D96 };
enum { GL_BLUE_SCALE = 0x0D1A };
enum { GL_BOOL = 0x8B56 };
enum { GL_BOOL_VEC2 = 0x8B57 };
enum { GL_BOOL_VEC3 = 0x8B58 };
enum { GL_BOOL_VEC4 = 0x8B59 };
enum { GL_BUFFER = 0x82E0 };
enum { GL_BUFFER_ACCESS = 0x88BB };
enum { GL_BUFFER_ACCESS_FLAGS = 0x911F };
enum { GL_BUFFER_MAPPED = 0x88BC };
enum { GL_BUFFER_MAP_LENGTH = 0x9120 };
enum { GL_BUFFER_MAP_OFFSET = 0x9121 };
enum { GL_BUFFER_MAP_POINTER = 0x88BD };
enum { GL_BUFFER_SIZE = 0x8764 };
enum { GL_BUFFER_USAGE = 0x8765 };
enum { GL_BYTE = 0x1400 };
enum { GL_C3F_V3F = 0x2A24 };
enum { GL_C4F_N3F_V3F = 0x2A26 };
enum { GL_C4UB_V2F = 0x2A22 };
enum { GL_C4UB_V3F = 0x2A23 };
enum { GL_CCW = 0x0901 };
enum { GL_CLAMP = 0x2900 };
enum { GL_CLAMP_FRAGMENT_COLOR = 0x891B };
enum { GL_CLAMP_READ_COLOR = 0x891C };
enum { GL_CLAMP_TO_BORDER = 0x812D };
enum { GL_CLAMP_TO_EDGE = 0x812F };
enum { GL_CLAMP_VERTEX_COLOR = 0x891A };
enum { GL_CLEAR = 0x1500 };
enum { GL_CLIENT_ACTIVE_TEXTURE = 0x84E1 };
enum { GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF };
enum { GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1 };
enum { GL_CLIENT_PIXEL_STORE_BIT = 0x00000001 };
enum { GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002 };
enum { GL_CLIP_DISTANCE0 = 0x3000 };
enum { GL_CLIP_DISTANCE1 = 0x3001 };
enum { GL_CLIP_DISTANCE2 = 0x3002 };
enum { GL_CLIP_DISTANCE3 = 0x3003 };
enum { GL_CLIP_DISTANCE4 = 0x3004 };
enum { GL_CLIP_DISTANCE5 = 0x3005 };
enum { GL_CLIP_DISTANCE6 = 0x3006 };
enum { GL_CLIP_DISTANCE7 = 0x3007 };
enum { GL_CLIP_PLANE0 = 0x3000 };
enum { GL_CLIP_PLANE1 = 0x3001 };
enum { GL_CLIP_PLANE2 = 0x3002 };
enum { GL_CLIP_PLANE3 = 0x3003 };
enum { GL_CLIP_PLANE4 = 0x3004 };
enum { GL_CLIP_PLANE5 = 0x3005 };
enum { GL_COEFF = 0x0A00 };
enum { GL_COLOR = 0x1800 };
enum { GL_COLOR_ARRAY = 0x8076 };
enum { GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898 };
enum { GL_COLOR_ARRAY_POINTER = 0x8090 };
enum { GL_COLOR_ARRAY_SIZE = 0x8081 };
enum { GL_COLOR_ARRAY_STRIDE = 0x8083 };
enum { GL_COLOR_ARRAY_TYPE = 0x8082 };
enum { GL_COLOR_ATTACHMENT0 = 0x8CE0 };
enum { GL_COLOR_ATTACHMENT1 = 0x8CE1 };
enum { GL_COLOR_ATTACHMENT10 = 0x8CEA };
enum { GL_COLOR_ATTACHMENT11 = 0x8CEB };
enum { GL_COLOR_ATTACHMENT12 = 0x8CEC };
enum { GL_COLOR_ATTACHMENT13 = 0x8CED };
enum { GL_COLOR_ATTACHMENT14 = 0x8CEE };
enum { GL_COLOR_ATTACHMENT15 = 0x8CEF };
enum { GL_COLOR_ATTACHMENT16 = 0x8CF0 };
enum { GL_COLOR_ATTACHMENT17 = 0x8CF1 };
enum { GL_COLOR_ATTACHMENT18 = 0x8CF2 };
enum { GL_COLOR_ATTACHMENT19 = 0x8CF3 };
enum { GL_COLOR_ATTACHMENT2 = 0x8CE2 };
enum { GL_COLOR_ATTACHMENT20 = 0x8CF4 };
enum { GL_COLOR_ATTACHMENT21 = 0x8CF5 };
enum { GL_COLOR_ATTACHMENT22 = 0x8CF6 };
enum { GL_COLOR_ATTACHMENT23 = 0x8CF7 };
enum { GL_COLOR_ATTACHMENT24 = 0x8CF8 };
enum { GL_COLOR_ATTACHMENT25 = 0x8CF9 };
enum { GL_COLOR_ATTACHMENT26 = 0x8CFA };
enum { GL_COLOR_ATTACHMENT27 = 0x8CFB };
enum { GL_COLOR_ATTACHMENT28 = 0x8CFC };
enum { GL_COLOR_ATTACHMENT29 = 0x8CFD };
enum { GL_COLOR_ATTACHMENT3 = 0x8CE3 };
enum { GL_COLOR_ATTACHMENT30 = 0x8CFE };
enum { GL_COLOR_ATTACHMENT31 = 0x8CFF };
enum { GL_COLOR_ATTACHMENT4 = 0x8CE4 };
enum { GL_COLOR_ATTACHMENT5 = 0x8CE5 };
enum { GL_COLOR_ATTACHMENT6 = 0x8CE6 };
enum { GL_COLOR_ATTACHMENT7 = 0x8CE7 };
enum { GL_COLOR_ATTACHMENT8 = 0x8CE8 };
enum { GL_COLOR_ATTACHMENT9 = 0x8CE9 };
enum { GL_COLOR_BUFFER_BIT = 0x00004000 };
enum { GL_COLOR_CLEAR_VALUE = 0x0C22 };
enum { GL_COLOR_INDEX = 0x1900 };
enum { GL_COLOR_INDEXES = 0x1603 };
enum { GL_COLOR_LOGIC_OP = 0x0BF2 };
enum { GL_COLOR_MATERIAL = 0x0B57 };
enum { GL_COLOR_MATERIAL_FACE = 0x0B55 };
enum { GL_COLOR_MATERIAL_PARAMETER = 0x0B56 };
enum { GL_COLOR_SUM = 0x8458 };
enum { GL_COLOR_WRITEMASK = 0x0C23 };
enum { GL_COMBINE = 0x8570 };
enum { GL_COMBINE_ALPHA = 0x8572 };
enum { GL_COMBINE_RGB = 0x8571 };
enum { GL_COMPARE_REF_TO_TEXTURE = 0x884E };
enum { GL_COMPARE_R_TO_TEXTURE = 0x884E };
enum { GL_COMPILE = 0x1300 };
enum { GL_COMPILE_AND_EXECUTE = 0x1301 };
enum { GL_COMPILE_STATUS = 0x8B81 };
enum { GL_COMPRESSED_ALPHA = 0x84E9 };
enum { GL_COMPRESSED_INTENSITY = 0x84EC };
enum { GL_COMPRESSED_LUMINANCE = 0x84EA };
enum { GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB };
enum { GL_COMPRESSED_RED = 0x8225 };
enum { GL_COMPRESSED_RED_RGTC1 = 0x8DBB };
enum { GL_COMPRESSED_RG = 0x8226 };
enum { GL_COMPRESSED_RGB = 0x84ED };
enum { GL_COMPRESSED_RGBA = 0x84EE };
enum { GL_COMPRESSED_RG_RGTC2 = 0x8DBD };
enum { GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC };
enum { GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE };
enum { GL_COMPRESSED_SLUMINANCE = 0x8C4A };
enum { GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B };
enum { GL_COMPRESSED_SRGB = 0x8C48 };
enum { GL_COMPRESSED_SRGB_ALPHA = 0x8C49 };
enum { GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3 };
enum { GL_CONDITION_SATISFIED = 0x911C };
enum { GL_CONSTANT = 0x8576 };
enum { GL_CONSTANT_ALPHA = 0x8003 };
enum { GL_CONSTANT_ATTENUATION = 0x1207 };
enum { GL_CONSTANT_COLOR = 0x8001 };
enum { GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002 };
enum { GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001 };
enum { GL_CONTEXT_FLAGS = 0x821E };
enum { GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002 };
enum { GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001 };
enum { GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004 };
enum { GL_CONTEXT_PROFILE_MASK = 0x9126 };
enum { GL_COORD_REPLACE = 0x8862 };
enum { GL_COPY = 0x1503 };
enum { GL_COPY_INVERTED = 0x150C };
enum { GL_COPY_PIXEL_TOKEN = 0x0706 };
enum { GL_COPY_READ_BUFFER = 0x8F36 };
enum { GL_COPY_WRITE_BUFFER = 0x8F37 };
enum { GL_CULL_FACE = 0x0B44 };
enum { GL_CULL_FACE_MODE = 0x0B45 };
enum { GL_CURRENT_BIT = 0x00000001 };
enum { GL_CURRENT_COLOR = 0x0B00 };
enum { GL_CURRENT_FOG_COORD = 0x8453 };
enum { GL_CURRENT_FOG_COORDINATE = 0x8453 };
enum { GL_CURRENT_INDEX = 0x0B01 };
enum { GL_CURRENT_NORMAL = 0x0B02 };
enum { GL_CURRENT_PROGRAM = 0x8B8D };
enum { GL_CURRENT_QUERY = 0x8865 };
enum { GL_CURRENT_RASTER_COLOR = 0x0B04 };
enum { GL_CURRENT_RASTER_DISTANCE = 0x0B09 };
enum { GL_CURRENT_RASTER_INDEX = 0x0B05 };
enum { GL_CURRENT_RASTER_POSITION = 0x0B07 };
enum { GL_CURRENT_RASTER_POSITION_VALID = 0x0B08 };
enum { GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F };
enum { GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06 };
enum { GL_CURRENT_SECONDARY_COLOR = 0x8459 };
enum { GL_CURRENT_TEXTURE_COORDS = 0x0B03 };
enum { GL_CURRENT_VERTEX_ATTRIB = 0x8626 };
enum { GL_CW = 0x0900 };
enum { GL_DEBUG_CALLBACK_FUNCTION = 0x8244 };
enum { GL_DEBUG_CALLBACK_USER_PARAM = 0x8245 };
enum { GL_DEBUG_GROUP_STACK_DEPTH = 0x826D };
enum { GL_DEBUG_LOGGED_MESSAGES = 0x9145 };
enum { GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243 };
enum { GL_DEBUG_OUTPUT = 0x92E0 };
enum { GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242 };
enum { GL_DEBUG_SEVERITY_HIGH = 0x9146 };
enum { GL_DEBUG_SEVERITY_LOW = 0x9148 };
enum { GL_DEBUG_SEVERITY_MEDIUM = 0x9147 };
enum { GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B };
enum { GL_DEBUG_SOURCE_API = 0x8246 };
enum { GL_DEBUG_SOURCE_APPLICATION = 0x824A };
enum { GL_DEBUG_SOURCE_OTHER = 0x824B };
enum { GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248 };
enum { GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249 };
enum { GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247 };
enum { GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D };
enum { GL_DEBUG_TYPE_ERROR = 0x824C };
enum { GL_DEBUG_TYPE_MARKER = 0x8268 };
enum { GL_DEBUG_TYPE_OTHER = 0x8251 };
enum { GL_DEBUG_TYPE_PERFORMANCE = 0x8250 };
enum { GL_DEBUG_TYPE_POP_GROUP = 0x826A };
enum { GL_DEBUG_TYPE_PORTABILITY = 0x824F };
enum { GL_DEBUG_TYPE_PUSH_GROUP = 0x8269 };
enum { GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E };
enum { GL_DECAL = 0x2101 };
enum { GL_DECR = 0x1E03 };
enum { GL_DECR_WRAP = 0x8508 };
enum { GL_DELETE_STATUS = 0x8B80 };
enum { GL_DEPTH = 0x1801 };
enum { GL_DEPTH24_STENCIL8 = 0x88F0 };
enum { GL_DEPTH32F_STENCIL8 = 0x8CAD };
enum { GL_DEPTH_ATTACHMENT = 0x8D00 };
enum { GL_DEPTH_BIAS = 0x0D1F };
enum { GL_DEPTH_BITS = 0x0D56 };
enum { GL_DEPTH_BUFFER_BIT = 0x00000100 };
enum { GL_DEPTH_CLAMP = 0x864F };
enum { GL_DEPTH_CLEAR_VALUE = 0x0B73 };
enum { GL_DEPTH_COMPONENT = 0x1902 };
enum { GL_DEPTH_COMPONENT16 = 0x81A5 };
enum { GL_DEPTH_COMPONENT24 = 0x81A6 };
enum { GL_DEPTH_COMPONENT32 = 0x81A7 };
enum { GL_DEPTH_COMPONENT32F = 0x8CAC };
enum { GL_DEPTH_FUNC = 0x0B74 };
enum { GL_DEPTH_RANGE = 0x0B70 };
enum { GL_DEPTH_SCALE = 0x0D1E };
enum { GL_DEPTH_STENCIL = 0x84F9 };
enum { GL_DEPTH_STENCIL_ATTACHMENT = 0x821A };
enum { GL_DEPTH_TEST = 0x0B71 };
enum { GL_DEPTH_TEXTURE_MODE = 0x884B };
enum { GL_DEPTH_WRITEMASK = 0x0B72 };
enum { GL_DIFFUSE = 0x1201 };
enum { GL_DISPLAY_LIST = 0x82E7 };
enum { GL_DITHER = 0x0BD0 };
enum { GL_DOMAIN = 0x0A02 };
enum { GL_DONT_CARE = 0x1100 };
enum { GL_DOT3_RGB = 0x86AE };
enum { GL_DOT3_RGBA = 0x86AF };
enum { GL_DOUBLE = 0x140A };
enum { GL_DOUBLEBUFFER = 0x0C32 };
enum { GL_DRAW_BUFFER = 0x0C01 };
enum { GL_DRAW_BUFFER0 = 0x8825 };
enum { GL_DRAW_BUFFER1 = 0x8826 };
enum { GL_DRAW_BUFFER10 = 0x882F };
enum { GL_DRAW_BUFFER11 = 0x8830 };
enum { GL_DRAW_BUFFER12 = 0x8831 };
enum { GL_DRAW_BUFFER13 = 0x8832 };
enum { GL_DRAW_BUFFER14 = 0x8833 };
enum { GL_DRAW_BUFFER15 = 0x8834 };
enum { GL_DRAW_BUFFER2 = 0x8827 };
enum { GL_DRAW_BUFFER3 = 0x8828 };
enum { GL_DRAW_BUFFER4 = 0x8829 };
enum { GL_DRAW_BUFFER5 = 0x882A };
enum { GL_DRAW_BUFFER6 = 0x882B };
enum { GL_DRAW_BUFFER7 = 0x882C };
enum { GL_DRAW_BUFFER8 = 0x882D };
enum { GL_DRAW_BUFFER9 = 0x882E };
enum { GL_DRAW_FRAMEBUFFER = 0x8CA9 };
enum { GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6 };
enum { GL_DRAW_PIXEL_TOKEN = 0x0705 };
enum { GL_DST_ALPHA = 0x0304 };
enum { GL_DST_COLOR = 0x0306 };
enum { GL_DYNAMIC_COPY = 0x88EA };
enum { GL_DYNAMIC_DRAW = 0x88E8 };
enum { GL_DYNAMIC_READ = 0x88E9 };
enum { GL_EDGE_FLAG = 0x0B43 };
enum { GL_EDGE_FLAG_ARRAY = 0x8079 };
enum { GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B };
enum { GL_EDGE_FLAG_ARRAY_POINTER = 0x8093 };
enum { GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C };
enum { GL_ELEMENT_ARRAY_BUFFER = 0x8893 };
enum { GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895 };
enum { GL_EMISSION = 0x1600 };
enum { GL_ENABLE_BIT = 0x00002000 };
enum { GL_EQUAL = 0x0202 };
enum { GL_EQUIV = 0x1509 };
enum { GL_EVAL_BIT = 0x00010000 };
enum { GL_EXP = 0x0800 };
enum { GL_EXP2 = 0x0801 };
enum { GL_EXTENSIONS = 0x1F03 };
enum { GL_EYE_LINEAR = 0x2400 };
enum { GL_EYE_PLANE = 0x2502 };
enum { GL_FALSE = 0 };
enum { GL_FASTEST = 0x1101 };
enum { GL_FEEDBACK = 0x1C01 };
enum { GL_FEEDBACK_BUFFER_POINTER = 0x0DF0 };
enum { GL_FEEDBACK_BUFFER_SIZE = 0x0DF1 };
enum { GL_FEEDBACK_BUFFER_TYPE = 0x0DF2 };
enum { GL_FILL = 0x1B02 };
enum { GL_FIRST_VERTEX_CONVENTION = 0x8E4D };
enum { GL_FIXED_ONLY = 0x891D };
enum { GL_FLAT = 0x1D00 };
enum { GL_FLOAT = 0x1406 };
enum { GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD };
enum { GL_FLOAT_MAT2 = 0x8B5A };
enum { GL_FLOAT_MAT2x3 = 0x8B65 };
enum { GL_FLOAT_MAT2x4 = 0x8B66 };
enum { GL_FLOAT_MAT3 = 0x8B5B };
enum { GL_FLOAT_MAT3x2 = 0x8B67 };
enum { GL_FLOAT_MAT3x4 = 0x8B68 };
enum { GL_FLOAT_MAT4 = 0x8B5C };
enum { GL_FLOAT_MAT4x2 = 0x8B69 };
enum { GL_FLOAT_MAT4x3 = 0x8B6A };
enum { GL_FLOAT_VEC2 = 0x8B50 };
enum { GL_FLOAT_VEC3 = 0x8B51 };
enum { GL_FLOAT_VEC4 = 0x8B52 };
enum { GL_FOG = 0x0B60 };
enum { GL_FOG_BIT = 0x00000080 };
enum { GL_FOG_COLOR = 0x0B66 };
enum { GL_FOG_COORD = 0x8451 };
enum { GL_FOG_COORDINATE = 0x8451 };
enum { GL_FOG_COORDINATE_ARRAY = 0x8457 };
enum { GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D };
enum { GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456 };
enum { GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455 };
enum { GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454 };
enum { GL_FOG_COORDINATE_SOURCE = 0x8450 };
enum { GL_FOG_COORD_ARRAY = 0x8457 };
enum { GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D };
enum { GL_FOG_COORD_ARRAY_POINTER = 0x8456 };
enum { GL_FOG_COORD_ARRAY_STRIDE = 0x8455 };
enum { GL_FOG_COORD_ARRAY_TYPE = 0x8454 };
enum { GL_FOG_COORD_SRC = 0x8450 };
enum { GL_FOG_DENSITY = 0x0B62 };
enum { GL_FOG_END = 0x0B64 };
enum { GL_FOG_HINT = 0x0C54 };
enum { GL_FOG_INDEX = 0x0B61 };
enum { GL_FOG_MODE = 0x0B65 };
enum { GL_FOG_START = 0x0B63 };
enum { GL_FRAGMENT_DEPTH = 0x8452 };
enum { GL_FRAGMENT_SHADER = 0x8B30 };
enum { GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B };
enum { GL_FRAMEBUFFER = 0x8D40 };
enum { GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215 };
enum { GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214 };
enum { GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210 };
enum { GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211 };
enum { GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216 };
enum { GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213 };
enum { GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7 };
enum { GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1 };
enum { GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0 };
enum { GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212 };
enum { GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217 };
enum { GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3 };
enum { GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4 };
enum { GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2 };
enum { GL_FRAMEBUFFER_BINDING = 0x8CA6 };
enum { GL_FRAMEBUFFER_COMPLETE = 0x8CD5 };
enum { GL_FRAMEBUFFER_DEFAULT = 0x8218 };
enum { GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6 };
enum { GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB };
enum { GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8 };
enum { GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7 };
enum { GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56 };
enum { GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC };
enum { GL_FRAMEBUFFER_SRGB = 0x8DB9 };
enum { GL_FRAMEBUFFER_UNDEFINED = 0x8219 };
enum { GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD };
enum { GL_FRONT = 0x0404 };
enum { GL_FRONT_AND_BACK = 0x0408 };
enum { GL_FRONT_FACE = 0x0B46 };
enum { GL_FRONT_LEFT = 0x0400 };
enum { GL_FRONT_RIGHT = 0x0401 };
enum { GL_FUNC_ADD = 0x8006 };
enum { GL_FUNC_REVERSE_SUBTRACT = 0x800B };
enum { GL_FUNC_SUBTRACT = 0x800A };
enum { GL_GENERATE_MIPMAP = 0x8191 };
enum { GL_GENERATE_MIPMAP_HINT = 0x8192 };
enum { GL_GEOMETRY_INPUT_TYPE = 0x8917 };
enum { GL_GEOMETRY_OUTPUT_TYPE = 0x8918 };
enum { GL_GEOMETRY_SHADER = 0x8DD9 };
enum { GL_GEOMETRY_VERTICES_OUT = 0x8916 };
enum { GL_GEQUAL = 0x0206 };
enum { GL_GREATER = 0x0204 };
enum { GL_GREEN = 0x1904 };
enum { GL_GREEN_BIAS = 0x0D19 };
enum { GL_GREEN_BITS = 0x0D53 };
enum { GL_GREEN_INTEGER = 0x8D95 };
enum { GL_GREEN_SCALE = 0x0D18 };
enum { GL_GUILTY_CONTEXT_RESET_ARB = 0x8253 };
enum { GL_HALF_FLOAT = 0x140B };
enum { GL_HINT_BIT = 0x00008000 };
enum { GL_INCR = 0x1E02 };
enum { GL_INCR_WRAP = 0x8507 };
enum { GL_INDEX = 0x8222 };
enum { GL_INDEX_ARRAY = 0x8077 };
enum { GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899 };
enum { GL_INDEX_ARRAY_POINTER = 0x8091 };
enum { GL_INDEX_ARRAY_STRIDE = 0x8086 };
enum { GL_INDEX_ARRAY_TYPE = 0x8085 };
enum { GL_INDEX_BITS = 0x0D51 };
enum { GL_INDEX_CLEAR_VALUE = 0x0C20 };
enum { GL_INDEX_LOGIC_OP = 0x0BF1 };
enum { GL_INDEX_MODE = 0x0C30 };
enum { GL_INDEX_OFFSET = 0x0D13 };
enum { GL_INDEX_SHIFT = 0x0D12 };
enum { GL_INDEX_WRITEMASK = 0x0C21 };
enum { GL_INFO_LOG_LENGTH = 0x8B84 };
enum { GL_INNOCENT_CONTEXT_RESET_ARB = 0x8254 };
enum { GL_INT = 0x1404 };
enum { GL_INTENSITY = 0x8049 };
enum { GL_INTENSITY12 = 0x804C };
enum { GL_INTENSITY16 = 0x804D };
enum { GL_INTENSITY4 = 0x804A };
enum { GL_INTENSITY8 = 0x804B };
enum { GL_INTERLEAVED_ATTRIBS = 0x8C8C };
enum { GL_INTERPOLATE = 0x8575 };
enum { GL_INT_2_10_10_10_REV = 0x8D9F };
enum { GL_INT_SAMPLER_1D = 0x8DC9 };
enum { GL_INT_SAMPLER_1D_ARRAY = 0x8DCE };
enum { GL_INT_SAMPLER_2D = 0x8DCA };
enum { GL_INT_SAMPLER_2D_ARRAY = 0x8DCF };
enum { GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109 };
enum { GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C };
enum { GL_INT_SAMPLER_2D_RECT = 0x8DCD };
enum { GL_INT_SAMPLER_3D = 0x8DCB };
enum { GL_INT_SAMPLER_BUFFER = 0x8DD0 };
enum { GL_INT_SAMPLER_CUBE = 0x8DCC };
enum { GL_INT_VEC2 = 0x8B53 };
enum { GL_INT_VEC3 = 0x8B54 };
enum { GL_INT_VEC4 = 0x8B55 };
enum { GL_INVALID_ENUM = 0x0500 };
enum { GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506 };
enum { GL_INVALID_INDEX = 0xFFFFFFFF };
enum { GL_INVALID_OPERATION = 0x0502 };
enum { GL_INVALID_VALUE = 0x0501 };
enum { GL_INVERT = 0x150A };
enum { GL_KEEP = 0x1E00 };
enum { GL_LAST_VERTEX_CONVENTION = 0x8E4E };
enum { GL_LEFT = 0x0406 };
enum { GL_LEQUAL = 0x0203 };
enum { GL_LESS = 0x0201 };
enum { GL_LIGHT0 = 0x4000 };
enum { GL_LIGHT1 = 0x4001 };
enum { GL_LIGHT2 = 0x4002 };
enum { GL_LIGHT3 = 0x4003 };
enum { GL_LIGHT4 = 0x4004 };
enum { GL_LIGHT5 = 0x4005 };
enum { GL_LIGHT6 = 0x4006 };
enum { GL_LIGHT7 = 0x4007 };
enum { GL_LIGHTING = 0x0B50 };
enum { GL_LIGHTING_BIT = 0x00000040 };
enum { GL_LIGHT_MODEL_AMBIENT = 0x0B53 };
enum { GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8 };
enum { GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51 };
enum { GL_LIGHT_MODEL_TWO_SIDE = 0x0B52 };
enum { GL_LINE = 0x1B01 };
enum { GL_LINEAR = 0x2601 };
enum { GL_LINEAR_ATTENUATION = 0x1208 };
enum { GL_LINEAR_MIPMAP_LINEAR = 0x2703 };
enum { GL_LINEAR_MIPMAP_NEAREST = 0x2701 };
enum { GL_LINES = 0x0001 };
enum { GL_LINES_ADJACENCY = 0x000A };
enum { GL_LINE_BIT = 0x00000004 };
enum { GL_LINE_LOOP = 0x0002 };
enum { GL_LINE_RESET_TOKEN = 0x0707 };
enum { GL_LINE_SMOOTH = 0x0B20 };
enum { GL_LINE_SMOOTH_HINT = 0x0C52 };
enum { GL_LINE_STIPPLE = 0x0B24 };
enum { GL_LINE_STIPPLE_PATTERN = 0x0B25 };
enum { GL_LINE_STIPPLE_REPEAT = 0x0B26 };
enum { GL_LINE_STRIP = 0x0003 };
enum { GL_LINE_STRIP_ADJACENCY = 0x000B };
enum { GL_LINE_TOKEN = 0x0702 };
enum { GL_LINE_WIDTH = 0x0B21 };
enum { GL_LINE_WIDTH_GRANULARITY = 0x0B23 };
enum { GL_LINE_WIDTH_RANGE = 0x0B22 };
enum { GL_LINK_STATUS = 0x8B82 };
enum { GL_LIST_BASE = 0x0B32 };
enum { GL_LIST_BIT = 0x00020000 };
enum { GL_LIST_INDEX = 0x0B33 };
enum { GL_LIST_MODE = 0x0B30 };
enum { GL_LOAD = 0x0101 };
enum { GL_LOGIC_OP = 0x0BF1 };
enum { GL_LOGIC_OP_MODE = 0x0BF0 };
enum { GL_LOSE_CONTEXT_ON_RESET_ARB = 0x8252 };
enum { GL_LOWER_LEFT = 0x8CA1 };
enum { GL_LUMINANCE = 0x1909 };
enum { GL_LUMINANCE12 = 0x8041 };
enum { GL_LUMINANCE12_ALPHA12 = 0x8047 };
enum { GL_LUMINANCE12_ALPHA4 = 0x8046 };
enum { GL_LUMINANCE16 = 0x8042 };
enum { GL_LUMINANCE16_ALPHA16 = 0x8048 };
enum { GL_LUMINANCE4 = 0x803F };
enum { GL_LUMINANCE4_ALPHA4 = 0x8043 };
enum { GL_LUMINANCE6_ALPHA2 = 0x8044 };
enum { GL_LUMINANCE8 = 0x8040 };
enum { GL_LUMINANCE8_ALPHA8 = 0x8045 };
enum { GL_LUMINANCE_ALPHA = 0x190A };
enum { GL_MAJOR_VERSION = 0x821B };
enum { GL_MAP1_COLOR_4 = 0x0D90 };
enum { GL_MAP1_GRID_DOMAIN = 0x0DD0 };
enum { GL_MAP1_GRID_SEGMENTS = 0x0DD1 };
enum { GL_MAP1_INDEX = 0x0D91 };
enum { GL_MAP1_NORMAL = 0x0D92 };
enum { GL_MAP1_TEXTURE_COORD_1 = 0x0D93 };
enum { GL_MAP1_TEXTURE_COORD_2 = 0x0D94 };
enum { GL_MAP1_TEXTURE_COORD_3 = 0x0D95 };
enum { GL_MAP1_TEXTURE_COORD_4 = 0x0D96 };
enum { GL_MAP1_VERTEX_3 = 0x0D97 };
enum { GL_MAP1_VERTEX_4 = 0x0D98 };
enum { GL_MAP2_COLOR_4 = 0x0DB0 };
enum { GL_MAP2_GRID_DOMAIN = 0x0DD2 };
enum { GL_MAP2_GRID_SEGMENTS = 0x0DD3 };
enum { GL_MAP2_INDEX = 0x0DB1 };
enum { GL_MAP2_NORMAL = 0x0DB2 };
enum { GL_MAP2_TEXTURE_COORD_1 = 0x0DB3 };
enum { GL_MAP2_TEXTURE_COORD_2 = 0x0DB4 };
enum { GL_MAP2_TEXTURE_COORD_3 = 0x0DB5 };
enum { GL_MAP2_TEXTURE_COORD_4 = 0x0DB6 };
enum { GL_MAP2_VERTEX_3 = 0x0DB7 };
enum { GL_MAP2_VERTEX_4 = 0x0DB8 };
enum { GL_MAP_COLOR = 0x0D10 };
enum { GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010 };
enum { GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008 };
enum { GL_MAP_INVALIDATE_RANGE_BIT = 0x0004 };
enum { GL_MAP_READ_BIT = 0x0001 };
enum { GL_MAP_STENCIL = 0x0D11 };
enum { GL_MAP_UNSYNCHRONIZED_BIT = 0x0020 };
enum { GL_MAP_WRITE_BIT = 0x0002 };
enum { GL_MATRIX_MODE = 0x0BA0 };
enum { GL_MAX = 0x8008 };
enum { GL_MAX_3D_TEXTURE_SIZE = 0x8073 };
enum { GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF };
enum { GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35 };
enum { GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B };
enum { GL_MAX_CLIP_DISTANCES = 0x0D32 };
enum { GL_MAX_CLIP_PLANES = 0x0D32 };
enum { GL_MAX_COLOR_ATTACHMENTS = 0x8CDF };
enum { GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E };
enum { GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33 };
enum { GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32 };
enum { GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D };
enum { GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E };
enum { GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31 };
enum { GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C };
enum { GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C };
enum { GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144 };
enum { GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143 };
enum { GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F };
enum { GL_MAX_DRAW_BUFFERS = 0x8824 };
enum { GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC };
enum { GL_MAX_ELEMENTS_INDICES = 0x80E9 };
enum { GL_MAX_ELEMENTS_VERTICES = 0x80E8 };
enum { GL_MAX_EVAL_ORDER = 0x0D30 };
enum { GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125 };
enum { GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D };
enum { GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49 };
enum { GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123 };
enum { GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124 };
enum { GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0 };
enum { GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29 };
enum { GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1 };
enum { GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C };
enum { GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF };
enum { GL_MAX_INTEGER_SAMPLES = 0x9110 };
enum { GL_MAX_LABEL_LENGTH = 0x82E8 };
enum { GL_MAX_LIGHTS = 0x0D31 };
enum { GL_MAX_LIST_NESTING = 0x0B31 };
enum { GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36 };
enum { GL_MAX_NAME_STACK_DEPTH = 0x0D37 };
enum { GL_MAX_PIXEL_MAP_TABLE = 0x0D34 };
enum { GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905 };
enum { GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38 };
enum { GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8 };
enum { GL_MAX_RENDERBUFFER_SIZE = 0x84E8 };
enum { GL_MAX_SAMPLES = 0x8D57 };
enum { GL_MAX_SAMPLE_MASK_WORDS = 0x8E59 };
enum { GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111 };
enum { GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B };
enum { GL_MAX_TEXTURE_COORDS = 0x8871 };
enum { GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872 };
enum { GL_MAX_TEXTURE_LOD_BIAS = 0x84FD };
enum { GL_MAX_TEXTURE_SIZE = 0x0D33 };
enum { GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39 };
enum { GL_MAX_TEXTURE_UNITS = 0x84E2 };
enum { GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A };
enum { GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B };
enum { GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80 };
enum { GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30 };
enum { GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F };
enum { GL_MAX_VARYING_COMPONENTS = 0x8B4B };
enum { GL_MAX_VARYING_FLOATS = 0x8B4B };
enum { GL_MAX_VERTEX_ATTRIBS = 0x8869 };
enum { GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122 };
enum { GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C };
enum { GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B };
enum { GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A };
enum { GL_MAX_VIEWPORT_DIMS = 0x0D3A };
enum { GL_MIN = 0x8007 };
enum { GL_MINOR_VERSION = 0x821C };
enum { GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904 };
enum { GL_MIRRORED_REPEAT = 0x8370 };
enum { GL_MODELVIEW = 0x1700 };
enum { GL_MODELVIEW_MATRIX = 0x0BA6 };
enum { GL_MODELVIEW_STACK_DEPTH = 0x0BA3 };
enum { GL_MODULATE = 0x2100 };
enum { GL_MULT = 0x0103 };
enum { GL_MULTISAMPLE = 0x809D };
enum { GL_MULTISAMPLE_ARB = 0x809D };
enum { GL_MULTISAMPLE_BIT = 0x20000000 };
enum { GL_MULTISAMPLE_BIT_ARB = 0x20000000 };
enum { GL_N3F_V3F = 0x2A25 };
enum { GL_NAME_STACK_DEPTH = 0x0D70 };
enum { GL_NAND = 0x150E };
enum { GL_NEAREST = 0x2600 };
enum { GL_NEAREST_MIPMAP_LINEAR = 0x2702 };
enum { GL_NEAREST_MIPMAP_NEAREST = 0x2700 };
enum { GL_NEVER = 0x0200 };
enum { GL_NICEST = 0x1102 };
enum { GL_NONE = 0 };
enum { GL_NOOP = 0x1505 };
enum { GL_NOR = 0x1508 };
enum { GL_NORMALIZE = 0x0BA1 };
enum { GL_NORMAL_ARRAY = 0x8075 };
enum { GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897 };
enum { GL_NORMAL_ARRAY_POINTER = 0x808F };
enum { GL_NORMAL_ARRAY_STRIDE = 0x807F };
enum { GL_NORMAL_ARRAY_TYPE = 0x807E };
enum { GL_NORMAL_MAP = 0x8511 };
enum { GL_NOTEQUAL = 0x0205 };
enum { GL_NO_ERROR = 0 };
enum { GL_NO_RESET_NOTIFICATION_ARB = 0x8261 };
enum { GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2 };
enum { GL_NUM_EXTENSIONS = 0x821D };
enum { GL_OBJECT_LINEAR = 0x2401 };
enum { GL_OBJECT_PLANE = 0x2501 };
enum { GL_OBJECT_TYPE = 0x9112 };
enum { GL_ONE = 1 };
enum { GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004 };
enum { GL_ONE_MINUS_CONSTANT_COLOR = 0x8002 };
enum { GL_ONE_MINUS_DST_ALPHA = 0x0305 };
enum { GL_ONE_MINUS_DST_COLOR = 0x0307 };
enum { GL_ONE_MINUS_SRC1_ALPHA = 0x88FB };
enum { GL_ONE_MINUS_SRC1_COLOR = 0x88FA };
enum { GL_ONE_MINUS_SRC_ALPHA = 0x0303 };
enum { GL_ONE_MINUS_SRC_COLOR = 0x0301 };
enum { GL_OPERAND0_ALPHA = 0x8598 };
enum { GL_OPERAND0_RGB = 0x8590 };
enum { GL_OPERAND1_ALPHA = 0x8599 };
enum { GL_OPERAND1_RGB = 0x8591 };
enum { GL_OPERAND2_ALPHA = 0x859A };
enum { GL_OPERAND2_RGB = 0x8592 };
enum { GL_OR = 0x1507 };
enum { GL_ORDER = 0x0A01 };
enum { GL_OR_INVERTED = 0x150D };
enum { GL_OR_REVERSE = 0x150B };
enum { GL_OUT_OF_MEMORY = 0x0505 };
enum { GL_PACK_ALIGNMENT = 0x0D05 };
enum { GL_PACK_IMAGE_HEIGHT = 0x806C };
enum { GL_PACK_LSB_FIRST = 0x0D01 };
enum { GL_PACK_ROW_LENGTH = 0x0D02 };
enum { GL_PACK_SKIP_IMAGES = 0x806B };
enum { GL_PACK_SKIP_PIXELS = 0x0D04 };
enum { GL_PACK_SKIP_ROWS = 0x0D03 };
enum { GL_PACK_SWAP_BYTES = 0x0D00 };
enum { GL_PASS_THROUGH_TOKEN = 0x0700 };
enum { GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50 };
enum { GL_PIXEL_MAP_A_TO_A = 0x0C79 };
enum { GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9 };
enum { GL_PIXEL_MAP_B_TO_B = 0x0C78 };
enum { GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8 };
enum { GL_PIXEL_MAP_G_TO_G = 0x0C77 };
enum { GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7 };
enum { GL_PIXEL_MAP_I_TO_A = 0x0C75 };
enum { GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5 };
enum { GL_PIXEL_MAP_I_TO_B = 0x0C74 };
enum { GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4 };
enum { GL_PIXEL_MAP_I_TO_G = 0x0C73 };
enum { GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3 };
enum { GL_PIXEL_MAP_I_TO_I = 0x0C70 };
enum { GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0 };
enum { GL_PIXEL_MAP_I_TO_R = 0x0C72 };
enum { GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2 };
enum { GL_PIXEL_MAP_R_TO_R = 0x0C76 };
enum { GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6 };
enum { GL_PIXEL_MAP_S_TO_S = 0x0C71 };
enum { GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1 };
enum { GL_PIXEL_MODE_BIT = 0x00000020 };
enum { GL_PIXEL_PACK_BUFFER = 0x88EB };
enum { GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED };
enum { GL_PIXEL_UNPACK_BUFFER = 0x88EC };
enum { GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF };
enum { GL_POINT = 0x1B00 };
enum { GL_POINTS = 0x0000 };
enum { GL_POINT_BIT = 0x00000002 };
enum { GL_POINT_DISTANCE_ATTENUATION = 0x8129 };
enum { GL_POINT_FADE_THRESHOLD_SIZE = 0x8128 };
enum { GL_POINT_SIZE = 0x0B11 };
enum { GL_POINT_SIZE_GRANULARITY = 0x0B13 };
enum { GL_POINT_SIZE_MAX = 0x8127 };
enum { GL_POINT_SIZE_MIN = 0x8126 };
enum { GL_POINT_SIZE_RANGE = 0x0B12 };
enum { GL_POINT_SMOOTH = 0x0B10 };
enum { GL_POINT_SMOOTH_HINT = 0x0C51 };
enum { GL_POINT_SPRITE = 0x8861 };
enum { GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0 };
enum { GL_POINT_TOKEN = 0x0701 };
enum { GL_POLYGON = 0x0009 };
enum { GL_POLYGON_BIT = 0x00000008 };
enum { GL_POLYGON_MODE = 0x0B40 };
enum { GL_POLYGON_OFFSET_FACTOR = 0x8038 };
enum { GL_POLYGON_OFFSET_FILL = 0x8037 };
enum { GL_POLYGON_OFFSET_LINE = 0x2A02 };
enum { GL_POLYGON_OFFSET_POINT = 0x2A01 };
enum { GL_POLYGON_OFFSET_UNITS = 0x2A00 };
enum { GL_POLYGON_SMOOTH = 0x0B41 };
enum { GL_POLYGON_SMOOTH_HINT = 0x0C53 };
enum { GL_POLYGON_STIPPLE = 0x0B42 };
enum { GL_POLYGON_STIPPLE_BIT = 0x00000010 };
enum { GL_POLYGON_TOKEN = 0x0703 };
enum { GL_POSITION = 0x1203 };
enum { GL_PREVIOUS = 0x8578 };
enum { GL_PRIMARY_COLOR = 0x8577 };
enum { GL_PRIMITIVES_GENERATED = 0x8C87 };
enum { GL_PRIMITIVE_RESTART = 0x8F9D };
enum { GL_PRIMITIVE_RESTART_INDEX = 0x8F9E };
enum { GL_PROGRAM = 0x82E2 };
enum { GL_PROGRAM_PIPELINE = 0x82E4 };
enum { GL_PROGRAM_POINT_SIZE = 0x8642 };
enum { GL_PROJECTION = 0x1701 };
enum { GL_PROJECTION_MATRIX = 0x0BA7 };
enum { GL_PROJECTION_STACK_DEPTH = 0x0BA4 };
enum { GL_PROVOKING_VERTEX = 0x8E4F };
enum { GL_PROXY_TEXTURE_1D = 0x8063 };
enum { GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19 };
enum { GL_PROXY_TEXTURE_2D = 0x8064 };
enum { GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B };
enum { GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101 };
enum { GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103 };
enum { GL_PROXY_TEXTURE_3D = 0x8070 };
enum { GL_PROXY_TEXTURE_CUBE_MAP = 0x851B };
enum { GL_PROXY_TEXTURE_RECTANGLE = 0x84F7 };
enum { GL_Q = 0x2003 };
enum { GL_QUADRATIC_ATTENUATION = 0x1209 };
enum { GL_QUADS = 0x0007 };
enum { GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C };
enum { GL_QUAD_STRIP = 0x0008 };
enum { GL_QUERY = 0x82E3 };
enum { GL_QUERY_BY_REGION_NO_WAIT = 0x8E16 };
enum { GL_QUERY_BY_REGION_WAIT = 0x8E15 };
enum { GL_QUERY_COUNTER_BITS = 0x8864 };
enum { GL_QUERY_NO_WAIT = 0x8E14 };
enum { GL_QUERY_RESULT = 0x8866 };
enum { GL_QUERY_RESULT_AVAILABLE = 0x8867 };
enum { GL_QUERY_WAIT = 0x8E13 };
enum { GL_R = 0x2002 };
enum { GL_R11F_G11F_B10F = 0x8C3A };
enum { GL_R16 = 0x822A };
enum { GL_R16F = 0x822D };
enum { GL_R16I = 0x8233 };
enum { GL_R16UI = 0x8234 };
enum { GL_R16_SNORM = 0x8F98 };
enum { GL_R32F = 0x822E };
enum { GL_R32I = 0x8235 };
enum { GL_R32UI = 0x8236 };
enum { GL_R3_G3_B2 = 0x2A10 };
enum { GL_R8 = 0x8229 };
enum { GL_R8I = 0x8231 };
enum { GL_R8UI = 0x8232 };
enum { GL_R8_SNORM = 0x8F94 };
enum { GL_RASTERIZER_DISCARD = 0x8C89 };
enum { GL_READ_BUFFER = 0x0C02 };
enum { GL_READ_FRAMEBUFFER = 0x8CA8 };
enum { GL_READ_FRAMEBUFFER_BINDING = 0x8CAA };
enum { GL_READ_ONLY = 0x88B8 };
enum { GL_READ_WRITE = 0x88BA };
enum { GL_RED = 0x1903 };
enum { GL_RED_BIAS = 0x0D15 };
enum { GL_RED_BITS = 0x0D52 };
enum { GL_RED_INTEGER = 0x8D94 };
enum { GL_RED_SCALE = 0x0D14 };
enum { GL_REFLECTION_MAP = 0x8512 };
enum { GL_RENDER = 0x1C00 };
enum { GL_RENDERBUFFER = 0x8D41 };
enum { GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53 };
enum { GL_RENDERBUFFER_BINDING = 0x8CA7 };
enum { GL_RENDERBUFFER_BLUE_SIZE = 0x8D52 };
enum { GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54 };
enum { GL_RENDERBUFFER_GREEN_SIZE = 0x8D51 };
enum { GL_RENDERBUFFER_HEIGHT = 0x8D43 };
enum { GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44 };
enum { GL_RENDERBUFFER_RED_SIZE = 0x8D50 };
enum { GL_RENDERBUFFER_SAMPLES = 0x8CAB };
enum { GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55 };
enum { GL_RENDERBUFFER_WIDTH = 0x8D42 };
enum { GL_RENDERER = 0x1F01 };
enum { GL_RENDER_MODE = 0x0C40 };
enum { GL_REPEAT = 0x2901 };
enum { GL_REPLACE = 0x1E01 };
enum { GL_RESCALE_NORMAL = 0x803A };
enum { GL_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256 };
enum { GL_RETURN = 0x0102 };
enum { GL_RG = 0x8227 };
enum { GL_RG16 = 0x822C };
enum { GL_RG16F = 0x822F };
enum { GL_RG16I = 0x8239 };
enum { GL_RG16UI = 0x823A };
enum { GL_RG16_SNORM = 0x8F99 };
enum { GL_RG32F = 0x8230 };
enum { GL_RG32I = 0x823B };
enum { GL_RG32UI = 0x823C };
enum { GL_RG8 = 0x822B };
enum { GL_RG8I = 0x8237 };
enum { GL_RG8UI = 0x8238 };
enum { GL_RG8_SNORM = 0x8F95 };
enum { GL_RGB = 0x1907 };
enum { GL_RGB10 = 0x8052 };
enum { GL_RGB10_A2 = 0x8059 };
enum { GL_RGB10_A2UI = 0x906F };
enum { GL_RGB12 = 0x8053 };
enum { GL_RGB16 = 0x8054 };
enum { GL_RGB16F = 0x881B };
enum { GL_RGB16I = 0x8D89 };
enum { GL_RGB16UI = 0x8D77 };
enum { GL_RGB16_SNORM = 0x8F9A };
enum { GL_RGB32F = 0x8815 };
enum { GL_RGB32I = 0x8D83 };
enum { GL_RGB32UI = 0x8D71 };
enum { GL_RGB4 = 0x804F };
enum { GL_RGB5 = 0x8050 };
enum { GL_RGB5_A1 = 0x8057 };
enum { GL_RGB8 = 0x8051 };
enum { GL_RGB8I = 0x8D8F };
enum { GL_RGB8UI = 0x8D7D };
enum { GL_RGB8_SNORM = 0x8F96 };
enum { GL_RGB9_E5 = 0x8C3D };
enum { GL_RGBA = 0x1908 };
enum { GL_RGBA12 = 0x805A };
enum { GL_RGBA16 = 0x805B };
enum { GL_RGBA16F = 0x881A };
enum { GL_RGBA16I = 0x8D88 };
enum { GL_RGBA16UI = 0x8D76 };
enum { GL_RGBA16_SNORM = 0x8F9B };
enum { GL_RGBA2 = 0x8055 };
enum { GL_RGBA32F = 0x8814 };
enum { GL_RGBA32I = 0x8D82 };
enum { GL_RGBA32UI = 0x8D70 };
enum { GL_RGBA4 = 0x8056 };
enum { GL_RGBA8 = 0x8058 };
enum { GL_RGBA8I = 0x8D8E };
enum { GL_RGBA8UI = 0x8D7C };
enum { GL_RGBA8_SNORM = 0x8F97 };
enum { GL_RGBA_INTEGER = 0x8D99 };
enum { GL_RGBA_MODE = 0x0C31 };
enum { GL_RGB_INTEGER = 0x8D98 };
enum { GL_RGB_SCALE = 0x8573 };
enum { GL_RG_INTEGER = 0x8228 };
enum { GL_RIGHT = 0x0407 };
enum { GL_S = 0x2000 };
enum { GL_SAMPLER = 0x82E6 };
enum { GL_SAMPLER_1D = 0x8B5D };
enum { GL_SAMPLER_1D_ARRAY = 0x8DC0 };
enum { GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3 };
enum { GL_SAMPLER_1D_SHADOW = 0x8B61 };
enum { GL_SAMPLER_2D = 0x8B5E };
enum { GL_SAMPLER_2D_ARRAY = 0x8DC1 };
enum { GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4 };
enum { GL_SAMPLER_2D_MULTISAMPLE = 0x9108 };
enum { GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B };
enum { GL_SAMPLER_2D_RECT = 0x8B63 };
enum { GL_SAMPLER_2D_RECT_SHADOW = 0x8B64 };
enum { GL_SAMPLER_2D_SHADOW = 0x8B62 };
enum { GL_SAMPLER_3D = 0x8B5F };
enum { GL_SAMPLER_BINDING = 0x8919 };
enum { GL_SAMPLER_BUFFER = 0x8DC2 };
enum { GL_SAMPLER_CUBE = 0x8B60 };
enum { GL_SAMPLER_CUBE_SHADOW = 0x8DC5 };
enum { GL_SAMPLES = 0x80A9 };
enum { GL_SAMPLES_ARB = 0x80A9 };
enum { GL_SAMPLES_PASSED = 0x8914 };
enum { GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E };
enum { GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E };
enum { GL_SAMPLE_ALPHA_TO_ONE = 0x809F };
enum { GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x809F };
enum { GL_SAMPLE_BUFFERS = 0x80A8 };
enum { GL_SAMPLE_BUFFERS_ARB = 0x80A8 };
enum { GL_SAMPLE_COVERAGE = 0x80A0 };
enum { GL_SAMPLE_COVERAGE_ARB = 0x80A0 };
enum { GL_SAMPLE_COVERAGE_INVERT = 0x80AB };
enum { GL_SAMPLE_COVERAGE_INVERT_ARB = 0x80AB };
enum { GL_SAMPLE_COVERAGE_VALUE = 0x80AA };
enum { GL_SAMPLE_COVERAGE_VALUE_ARB = 0x80AA };
enum { GL_SAMPLE_MASK = 0x8E51 };
enum { GL_SAMPLE_MASK_VALUE = 0x8E52 };
enum { GL_SAMPLE_POSITION = 0x8E50 };
enum { GL_SCISSOR_BIT = 0x00080000 };
enum { GL_SCISSOR_BOX = 0x0C10 };
enum { GL_SCISSOR_TEST = 0x0C11 };
enum { GL_SECONDARY_COLOR_ARRAY = 0x845E };
enum { GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C };
enum { GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D };
enum { GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A };
enum { GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C };
enum { GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B };
enum { GL_SELECT = 0x1C02 };
enum { GL_SELECTION_BUFFER_POINTER = 0x0DF3 };
enum { GL_SELECTION_BUFFER_SIZE = 0x0DF4 };
enum { GL_SEPARATE_ATTRIBS = 0x8C8D };
enum { GL_SEPARATE_SPECULAR_COLOR = 0x81FA };
enum { GL_SET = 0x150F };
enum { GL_SHADER = 0x82E1 };
enum { GL_SHADER_SOURCE_LENGTH = 0x8B88 };
enum { GL_SHADER_TYPE = 0x8B4F };
enum { GL_SHADE_MODEL = 0x0B54 };
enum { GL_SHADING_LANGUAGE_VERSION = 0x8B8C };
enum { GL_SHININESS = 0x1601 };
enum { GL_SHORT = 0x1402 };
enum { GL_SIGNALED = 0x9119 };
enum { GL_SIGNED_NORMALIZED = 0x8F9C };
enum { GL_SINGLE_COLOR = 0x81F9 };
enum { GL_SLUMINANCE = 0x8C46 };
enum { GL_SLUMINANCE8 = 0x8C47 };
enum { GL_SLUMINANCE8_ALPHA8 = 0x8C45 };
enum { GL_SLUMINANCE_ALPHA = 0x8C44 };
enum { GL_SMOOTH = 0x1D01 };
enum { GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23 };
enum { GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22 };
enum { GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13 };
enum { GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12 };
enum { GL_SOURCE0_ALPHA = 0x8588 };
enum { GL_SOURCE0_RGB = 0x8580 };
enum { GL_SOURCE1_ALPHA = 0x8589 };
enum { GL_SOURCE1_RGB = 0x8581 };
enum { GL_SOURCE2_ALPHA = 0x858A };
enum { GL_SOURCE2_RGB = 0x8582 };
enum { GL_SPECULAR = 0x1202 };
enum { GL_SPHERE_MAP = 0x2402 };
enum { GL_SPOT_CUTOFF = 0x1206 };
enum { GL_SPOT_DIRECTION = 0x1204 };
enum { GL_SPOT_EXPONENT = 0x1205 };
enum { GL_SRC0_ALPHA = 0x8588 };
enum { GL_SRC0_RGB = 0x8580 };
enum { GL_SRC1_ALPHA = 0x8589 };
enum { GL_SRC1_COLOR = 0x88F9 };
enum { GL_SRC1_RGB = 0x8581 };
enum { GL_SRC2_ALPHA = 0x858A };
enum { GL_SRC2_RGB = 0x8582 };
enum { GL_SRC_ALPHA = 0x0302 };
enum { GL_SRC_ALPHA_SATURATE = 0x0308 };
enum { GL_SRC_COLOR = 0x0300 };
enum { GL_SRGB = 0x8C40 };
enum { GL_SRGB8 = 0x8C41 };
enum { GL_SRGB8_ALPHA8 = 0x8C43 };
enum { GL_SRGB_ALPHA = 0x8C42 };
enum { GL_STACK_OVERFLOW = 0x0503 };
enum { GL_STACK_UNDERFLOW = 0x0504 };
enum { GL_STATIC_COPY = 0x88E6 };
enum { GL_STATIC_DRAW = 0x88E4 };
enum { GL_STATIC_READ = 0x88E5 };
enum { GL_STENCIL = 0x1802 };
enum { GL_STENCIL_ATTACHMENT = 0x8D20 };
enum { GL_STENCIL_BACK_FAIL = 0x8801 };
enum { GL_STENCIL_BACK_FUNC = 0x8800 };
enum { GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802 };
enum { GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803 };
enum { GL_STENCIL_BACK_REF = 0x8CA3 };
enum { GL_STENCIL_BACK_VALUE_MASK = 0x8CA4 };
enum { GL_STENCIL_BACK_WRITEMASK = 0x8CA5 };
enum { GL_STENCIL_BITS = 0x0D57 };
enum { GL_STENCIL_BUFFER_BIT = 0x00000400 };
enum { GL_STENCIL_CLEAR_VALUE = 0x0B91 };
enum { GL_STENCIL_FAIL = 0x0B94 };
enum { GL_STENCIL_FUNC = 0x0B92 };
enum { GL_STENCIL_INDEX = 0x1901 };
enum { GL_STENCIL_INDEX1 = 0x8D46 };
enum { GL_STENCIL_INDEX16 = 0x8D49 };
enum { GL_STENCIL_INDEX4 = 0x8D47 };
enum { GL_STENCIL_INDEX8 = 0x8D48 };
enum { GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95 };
enum { GL_STENCIL_PASS_DEPTH_PASS = 0x0B96 };
enum { GL_STENCIL_REF = 0x0B97 };
enum { GL_STENCIL_TEST = 0x0B90 };
enum { GL_STENCIL_VALUE_MASK = 0x0B93 };
enum { GL_STENCIL_WRITEMASK = 0x0B98 };
enum { GL_STEREO = 0x0C33 };
enum { GL_STREAM_COPY = 0x88E2 };
enum { GL_STREAM_DRAW = 0x88E0 };
enum { GL_STREAM_READ = 0x88E1 };
enum { GL_SUBPIXEL_BITS = 0x0D50 };
enum { GL_SUBTRACT = 0x84E7 };
enum { GL_SYNC_CONDITION = 0x9113 };
enum { GL_SYNC_FENCE = 0x9116 };
enum { GL_SYNC_FLAGS = 0x9115 };
enum { GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001 };
enum { GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117 };
enum { GL_SYNC_STATUS = 0x9114 };
enum { GL_T = 0x2001 };
enum { GL_T2F_C3F_V3F = 0x2A2A };
enum { GL_T2F_C4F_N3F_V3F = 0x2A2C };
enum { GL_T2F_C4UB_V3F = 0x2A29 };
enum { GL_T2F_N3F_V3F = 0x2A2B };
enum { GL_T2F_V3F = 0x2A27 };
enum { GL_T4F_C4F_N3F_V4F = 0x2A2D };
enum { GL_T4F_V4F = 0x2A28 };
enum { GL_TEXTURE = 0x1702 };
enum { GL_TEXTURE0 = 0x84C0 };
enum { GL_TEXTURE1 = 0x84C1 };
enum { GL_TEXTURE10 = 0x84CA };
enum { GL_TEXTURE11 = 0x84CB };
enum { GL_TEXTURE12 = 0x84CC };
enum { GL_TEXTURE13 = 0x84CD };
enum { GL_TEXTURE14 = 0x84CE };
enum { GL_TEXTURE15 = 0x84CF };
enum { GL_TEXTURE16 = 0x84D0 };
enum { GL_TEXTURE17 = 0x84D1 };
enum { GL_TEXTURE18 = 0x84D2 };
enum { GL_TEXTURE19 = 0x84D3 };
enum { GL_TEXTURE2 = 0x84C2 };
enum { GL_TEXTURE20 = 0x84D4 };
enum { GL_TEXTURE21 = 0x84D5 };
enum { GL_TEXTURE22 = 0x84D6 };
enum { GL_TEXTURE23 = 0x84D7 };
enum { GL_TEXTURE24 = 0x84D8 };
enum { GL_TEXTURE25 = 0x84D9 };
enum { GL_TEXTURE26 = 0x84DA };
enum { GL_TEXTURE27 = 0x84DB };
enum { GL_TEXTURE28 = 0x84DC };
enum { GL_TEXTURE29 = 0x84DD };
enum { GL_TEXTURE3 = 0x84C3 };
enum { GL_TEXTURE30 = 0x84DE };
enum { GL_TEXTURE31 = 0x84DF };
enum { GL_TEXTURE4 = 0x84C4 };
enum { GL_TEXTURE5 = 0x84C5 };
enum { GL_TEXTURE6 = 0x84C6 };
enum { GL_TEXTURE7 = 0x84C7 };
enum { GL_TEXTURE8 = 0x84C8 };
enum { GL_TEXTURE9 = 0x84C9 };
enum { GL_TEXTURE_1D = 0x0DE0 };
enum { GL_TEXTURE_1D_ARRAY = 0x8C18 };
enum { GL_TEXTURE_2D = 0x0DE1 };
enum { GL_TEXTURE_2D_ARRAY = 0x8C1A };
enum { GL_TEXTURE_2D_MULTISAMPLE = 0x9100 };
enum { GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102 };
enum { GL_TEXTURE_3D = 0x806F };
enum { GL_TEXTURE_ALPHA_SIZE = 0x805F };
enum { GL_TEXTURE_ALPHA_TYPE = 0x8C13 };
enum { GL_TEXTURE_BASE_LEVEL = 0x813C };
enum { GL_TEXTURE_BINDING_1D = 0x8068 };
enum { GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C };
enum { GL_TEXTURE_BINDING_2D = 0x8069 };
enum { GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D };
enum { GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104 };
enum { GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105 };
enum { GL_TEXTURE_BINDING_3D = 0x806A };
enum { GL_TEXTURE_BINDING_BUFFER = 0x8C2C };
enum { GL_TEXTURE_BINDING_CUBE_MAP = 0x8514 };
enum { GL_TEXTURE_BINDING_RECTANGLE = 0x84F6 };
enum { GL_TEXTURE_BIT = 0x00040000 };
enum { GL_TEXTURE_BLUE_SIZE = 0x805E };
enum { GL_TEXTURE_BLUE_TYPE = 0x8C12 };
enum { GL_TEXTURE_BORDER = 0x1005 };
enum { GL_TEXTURE_BORDER_COLOR = 0x1004 };
enum { GL_TEXTURE_BUFFER = 0x8C2A };
enum { GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D };
enum { GL_TEXTURE_COMPARE_FUNC = 0x884D };
enum { GL_TEXTURE_COMPARE_MODE = 0x884C };
enum { GL_TEXTURE_COMPONENTS = 0x1003 };
enum { GL_TEXTURE_COMPRESSED = 0x86A1 };
enum { GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0 };
enum { GL_TEXTURE_COMPRESSION_HINT = 0x84EF };
enum { GL_TEXTURE_COORD_ARRAY = 0x8078 };
enum { GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A };
enum { GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092 };
enum { GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088 };
enum { GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A };
enum { GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089 };
enum { GL_TEXTURE_CUBE_MAP = 0x8513 };
enum { GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516 };
enum { GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518 };
enum { GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A };
enum { GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515 };
enum { GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517 };
enum { GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519 };
enum { GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F };
enum { GL_TEXTURE_DEPTH = 0x8071 };
enum { GL_TEXTURE_DEPTH_SIZE = 0x884A };
enum { GL_TEXTURE_DEPTH_TYPE = 0x8C16 };
enum { GL_TEXTURE_ENV = 0x2300 };
enum { GL_TEXTURE_ENV_COLOR = 0x2201 };
enum { GL_TEXTURE_ENV_MODE = 0x2200 };
enum { GL_TEXTURE_FILTER_CONTROL = 0x8500 };
enum { GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107 };
enum { GL_TEXTURE_GEN_MODE = 0x2500 };
enum { GL_TEXTURE_GEN_Q = 0x0C63 };
enum { GL_TEXTURE_GEN_R = 0x0C62 };
enum { GL_TEXTURE_GEN_S = 0x0C60 };
enum { GL_TEXTURE_GEN_T = 0x0C61 };
enum { GL_TEXTURE_GREEN_SIZE = 0x805D };
enum { GL_TEXTURE_GREEN_TYPE = 0x8C11 };
enum { GL_TEXTURE_HEIGHT = 0x1001 };
enum { GL_TEXTURE_INTENSITY_SIZE = 0x8061 };
enum { GL_TEXTURE_INTENSITY_TYPE = 0x8C15 };
enum { GL_TEXTURE_INTERNAL_FORMAT = 0x1003 };
enum { GL_TEXTURE_LOD_BIAS = 0x8501 };
enum { GL_TEXTURE_LUMINANCE_SIZE = 0x8060 };
enum { GL_TEXTURE_LUMINANCE_TYPE = 0x8C14 };
enum { GL_TEXTURE_MAG_FILTER = 0x2800 };
enum { GL_TEXTURE_MATRIX = 0x0BA8 };
enum { GL_TEXTURE_MAX_LEVEL = 0x813D };
enum { GL_TEXTURE_MAX_LOD = 0x813B };
enum { GL_TEXTURE_MIN_FILTER = 0x2801 };
enum { GL_TEXTURE_MIN_LOD = 0x813A };
enum { GL_TEXTURE_PRIORITY = 0x8066 };
enum { GL_TEXTURE_RECTANGLE = 0x84F5 };
enum { GL_TEXTURE_RED_SIZE = 0x805C };
enum { GL_TEXTURE_RED_TYPE = 0x8C10 };
enum { GL_TEXTURE_RESIDENT = 0x8067 };
enum { GL_TEXTURE_SAMPLES = 0x9106 };
enum { GL_TEXTURE_SHARED_SIZE = 0x8C3F };
enum { GL_TEXTURE_STACK_DEPTH = 0x0BA5 };
enum { GL_TEXTURE_STENCIL_SIZE = 0x88F1 };
enum { GL_TEXTURE_SWIZZLE_A = 0x8E45 };
enum { GL_TEXTURE_SWIZZLE_B = 0x8E44 };
enum { GL_TEXTURE_SWIZZLE_G = 0x8E43 };
enum { GL_TEXTURE_SWIZZLE_R = 0x8E42 };
enum { GL_TEXTURE_SWIZZLE_RGBA = 0x8E46 };
enum { GL_TEXTURE_WIDTH = 0x1000 };
enum { GL_TEXTURE_WRAP_R = 0x8072 };
enum { GL_TEXTURE_WRAP_S = 0x2802 };
enum { GL_TEXTURE_WRAP_T = 0x2803 };
enum { GL_TIMEOUT_EXPIRED = 0x911B };
// enum { GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF };
enum { GL_TIMESTAMP = 0x8E28 };
enum { GL_TIME_ELAPSED = 0x88BF };
enum { GL_TRANSFORM_BIT = 0x00001000 };
enum { GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E };
enum { GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F };
enum { GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F };
enum { GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85 };
enum { GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84 };
enum { GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88 };
enum { GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83 };
enum { GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76 };
enum { GL_TRANSPOSE_COLOR_MATRIX = 0x84E6 };
enum { GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3 };
enum { GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4 };
enum { GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5 };
enum { GL_TRIANGLES = 0x0004 };
enum { GL_TRIANGLES_ADJACENCY = 0x000C };
enum { GL_TRIANGLE_FAN = 0x0006 };
enum { GL_TRIANGLE_STRIP = 0x0005 };
enum { GL_TRIANGLE_STRIP_ADJACENCY = 0x000D };
enum { GL_TRUE = 1 };
enum { GL_UNIFORM_ARRAY_STRIDE = 0x8A3C };
enum { GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42 };
enum { GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43 };
enum { GL_UNIFORM_BLOCK_BINDING = 0x8A3F };
enum { GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40 };
enum { GL_UNIFORM_BLOCK_INDEX = 0x8A3A };
enum { GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41 };
enum { GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46 };
enum { GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45 };
enum { GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44 };
enum { GL_UNIFORM_BUFFER = 0x8A11 };
enum { GL_UNIFORM_BUFFER_BINDING = 0x8A28 };
enum { GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34 };
enum { GL_UNIFORM_BUFFER_SIZE = 0x8A2A };
enum { GL_UNIFORM_BUFFER_START = 0x8A29 };
enum { GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E };
enum { GL_UNIFORM_MATRIX_STRIDE = 0x8A3D };
enum { GL_UNIFORM_NAME_LENGTH = 0x8A39 };
enum { GL_UNIFORM_OFFSET = 0x8A3B };
enum { GL_UNIFORM_SIZE = 0x8A38 };
enum { GL_UNIFORM_TYPE = 0x8A37 };
enum { GL_UNKNOWN_CONTEXT_RESET_ARB = 0x8255 };
enum { GL_UNPACK_ALIGNMENT = 0x0CF5 };
enum { GL_UNPACK_IMAGE_HEIGHT = 0x806E };
enum { GL_UNPACK_LSB_FIRST = 0x0CF1 };
enum { GL_UNPACK_ROW_LENGTH = 0x0CF2 };
enum { GL_UNPACK_SKIP_IMAGES = 0x806D };
enum { GL_UNPACK_SKIP_PIXELS = 0x0CF4 };
enum { GL_UNPACK_SKIP_ROWS = 0x0CF3 };
enum { GL_UNPACK_SWAP_BYTES = 0x0CF0 };
enum { GL_UNSIGNALED = 0x9118 };
enum { GL_UNSIGNED_BYTE = 0x1401 };
enum { GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362 };
enum { GL_UNSIGNED_BYTE_3_3_2 = 0x8032 };
enum { GL_UNSIGNED_INT = 0x1405 };
enum { GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B };
enum { GL_UNSIGNED_INT_10_10_10_2 = 0x8036 };
enum { GL_UNSIGNED_INT_24_8 = 0x84FA };
enum { GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368 };
enum { GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E };
enum { GL_UNSIGNED_INT_8_8_8_8 = 0x8035 };
enum { GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367 };
enum { GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1 };
enum { GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6 };
enum { GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2 };
enum { GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7 };
enum { GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A };
enum { GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D };
enum { GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5 };
enum { GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3 };
enum { GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8 };
enum { GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4 };
enum { GL_UNSIGNED_INT_VEC2 = 0x8DC6 };
enum { GL_UNSIGNED_INT_VEC3 = 0x8DC7 };
enum { GL_UNSIGNED_INT_VEC4 = 0x8DC8 };
enum { GL_UNSIGNED_NORMALIZED = 0x8C17 };
enum { GL_UNSIGNED_SHORT = 0x1403 };
enum { GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366 };
enum { GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033 };
enum { GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365 };
enum { GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034 };
enum { GL_UNSIGNED_SHORT_5_6_5 = 0x8363 };
enum { GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364 };
enum { GL_UPPER_LEFT = 0x8CA2 };
enum { GL_V2F = 0x2A20 };
enum { GL_V3F = 0x2A21 };
enum { GL_VALIDATE_STATUS = 0x8B83 };
enum { GL_VENDOR = 0x1F00 };
enum { GL_VERSION = 0x1F02 };
enum { GL_VERTEX_ARRAY = 0x8074 };
enum { GL_VERTEX_ARRAY_BINDING = 0x85B5 };
enum { GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896 };
enum { GL_VERTEX_ARRAY_POINTER = 0x808E };
enum { GL_VERTEX_ARRAY_SIZE = 0x807A };
enum { GL_VERTEX_ARRAY_STRIDE = 0x807C };
enum { GL_VERTEX_ARRAY_TYPE = 0x807B };
enum { GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F };
enum { GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE };
enum { GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622 };
enum { GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD };
enum { GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A };
enum { GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645 };
enum { GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623 };
enum { GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624 };
enum { GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625 };
enum { GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642 };
enum { GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643 };
enum { GL_VERTEX_SHADER = 0x8B31 };
enum { GL_VIEWPORT = 0x0BA2 };
enum { GL_VIEWPORT_BIT = 0x00000800 };
enum { GL_WAIT_FAILED = 0x911D };
enum { GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E };
enum { GL_WRITE_ONLY = 0x88B9 };
enum { GL_XOR = 0x1506 };
enum { GL_ZERO = 0 };
enum { GL_ZOOM_X = 0x0D16 };
enum { GL_ZOOM_Y = 0x0D17 };
enum { GL_VERSION_1_0 = 1 };
enum { GL_VERSION_1_1 = 1 };
enum { GL_VERSION_1_2 = 1 };
enum { GL_VERSION_1_3 = 1 };
enum { GL_VERSION_1_4 = 1 };
enum { GL_VERSION_1_5 = 1 };
enum { GL_VERSION_2_0 = 1 };
enum { GL_VERSION_2_1 = 1 };
enum { GL_VERSION_3_0 = 1 };
enum { GL_VERSION_3_1 = 1 };
enum { GL_VERSION_3_2 = 1 };
enum { GL_VERSION_3_3 = 1 };
enum { GL_ARB_multisample = 1 };
enum { GL_ARB_robustness = 1 };
enum { GL_KHR_debug = 1 };
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef int GLbyte;
typedef int GLubyte;
typedef int GLshort;
typedef int GLushort;
typedef int GLint;
typedef unsigned int GLuint;
typedef int GLsizei;
typedef float GLfloat;
typedef double GLdouble;
typedef char GLchar;
typedef int GLintptr;
typedef int GLsizeiptr;
typedef int GLint64;
typedef int GLuint64;
typedef struct __GLsync* GLsync;
struct __GLsync;
typedef void(*GLDEBUGPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, GLchar* message, const void* userParam);
typedef void(*PFNGLACCUMPROC)(GLenum op, GLfloat value);
typedef void(*PFNGLACTIVETEXTUREPROC)(GLenum texture);
typedef void(*PFNGLALPHAFUNCPROC)(GLenum func, GLfloat ref);
typedef GLboolean(*PFNGLARETEXTURESRESIDENTPROC)(GLsizei n, GLuint* textures, GLboolean* residences);
typedef void(*PFNGLARRAYELEMENTPROC)(GLint i);
typedef void(*PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
typedef void(*PFNGLBEGINPROC)(GLenum mode);
typedef void(*PFNGLBEGINCONDITIONALRENDERPROC)(GLuint id, GLenum mode);
typedef void(*PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);
typedef void(*PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);
typedef void(*PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar* name);
typedef void(*PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
typedef void(*PFNGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);
typedef void(*PFNGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void(*PFNGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLchar* name);
typedef void(*PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint program, GLuint colorNumber, GLuint index, const GLchar* name);
typedef void(*PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);
typedef void(*PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);
typedef void(*PFNGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);
typedef void(*PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
typedef void(*PFNGLBINDVERTEXARRAYPROC)(GLuint array);
typedef void(*PFNGLBITMAPPROC)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, GLubyte* bitmap);
typedef void(*PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void(*PFNGLBLENDEQUATIONPROC)(GLenum mode);
typedef void(*PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
typedef void(*PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
typedef void(*PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void(*PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef void(*PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void* data, GLenum usage);
typedef void(*PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void* data);
typedef void(*PFNGLCALLLISTPROC)(GLuint list);
typedef void(*PFNGLCALLLISTSPROC)(GLsizei n, GLenum type, const void* lists);
typedef GLenum(*PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);
typedef void(*PFNGLCLAMPCOLORPROC)(GLenum target, GLenum clamp);
typedef void(*PFNGLCLEARPROC)(GLbitfield mask);
typedef void(*PFNGLCLEARACCUMPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void(*PFNGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void(*PFNGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, GLfloat* value);
typedef void(*PFNGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, GLint* value);
typedef void(*PFNGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, GLuint* value);
typedef void(*PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void(*PFNGLCLEARDEPTHPROC)(GLdouble depth);
typedef void(*PFNGLCLEARINDEXPROC)(GLfloat c);
typedef void(*PFNGLCLEARSTENCILPROC)(GLint s);
typedef void(*PFNGLCLIENTACTIVETEXTUREPROC)(GLenum texture);
typedef GLenum(*PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void(*PFNGLCLIPPLANEPROC)(GLenum plane, GLdouble* equation);
typedef void(*PFNGLCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
typedef void(*PFNGLCOLOR3BVPROC)(GLbyte* v);
typedef void(*PFNGLCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
typedef void(*PFNGLCOLOR3DVPROC)(GLdouble* v);
typedef void(*PFNGLCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
typedef void(*PFNGLCOLOR3FVPROC)(GLfloat* v);
typedef void(*PFNGLCOLOR3IPROC)(GLint red, GLint green, GLint blue);
typedef void(*PFNGLCOLOR3IVPROC)(GLint* v);
typedef void(*PFNGLCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
typedef void(*PFNGLCOLOR3SVPROC)(GLshort* v);
typedef void(*PFNGLCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
typedef void(*PFNGLCOLOR3UBVPROC)(GLubyte* v);
typedef void(*PFNGLCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
typedef void(*PFNGLCOLOR3UIVPROC)(GLuint* v);
typedef void(*PFNGLCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
typedef void(*PFNGLCOLOR3USVPROC)(GLushort* v);
typedef void(*PFNGLCOLOR4BPROC)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
typedef void(*PFNGLCOLOR4BVPROC)(GLbyte* v);
typedef void(*PFNGLCOLOR4DPROC)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
typedef void(*PFNGLCOLOR4DVPROC)(GLdouble* v);
typedef void(*PFNGLCOLOR4FPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void(*PFNGLCOLOR4FVPROC)(GLfloat* v);
typedef void(*PFNGLCOLOR4IPROC)(GLint red, GLint green, GLint blue, GLint alpha);
typedef void(*PFNGLCOLOR4IVPROC)(GLint* v);
typedef void(*PFNGLCOLOR4SPROC)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
typedef void(*PFNGLCOLOR4SVPROC)(GLshort* v);
typedef void(*PFNGLCOLOR4UBPROC)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
typedef void(*PFNGLCOLOR4UBVPROC)(GLubyte* v);
typedef void(*PFNGLCOLOR4UIPROC)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
typedef void(*PFNGLCOLOR4UIVPROC)(GLuint* v);
typedef void(*PFNGLCOLOR4USPROC)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
typedef void(*PFNGLCOLOR4USVPROC)(GLushort* v);
typedef void(*PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void(*PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void(*PFNGLCOLORMATERIALPROC)(GLenum face, GLenum mode);
typedef void(*PFNGLCOLORP3UIPROC)(GLenum type, GLuint color);
typedef void(*PFNGLCOLORP3UIVPROC)(GLenum type, GLuint* color);
typedef void(*PFNGLCOLORP4UIPROC)(GLenum type, GLuint color);
typedef void(*PFNGLCOLORP4UIVPROC)(GLenum type, GLuint* color);
typedef void(*PFNGLCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
typedef void(*PFNGLCOMPILESHADERPROC)(GLuint shader);
typedef void(*PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* data);
typedef void(*PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data);
typedef void(*PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* data);
typedef void(*PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);
typedef void(*PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
typedef void(*PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);
typedef void(*PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void(*PFNGLCOPYPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
typedef void(*PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void(*PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void(*PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void(*PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void(*PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef GLuint(*PFNGLCREATEPROGRAMPROC)();
typedef GLuint(*PFNGLCREATESHADERPROC)(GLenum type);
typedef void(*PFNGLCULLFACEPROC)(GLenum mode);
typedef void(*PFNGLDEBUGMESSAGECALLBACKPROC)(GLDEBUGPROC callback, const void* userParam);
typedef void(*PFNGLDEBUGMESSAGECONTROLPROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, GLuint* ids, GLboolean enabled);
typedef void(*PFNGLDEBUGMESSAGEINSERTPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, GLchar* buf);
typedef void(*PFNGLDELETEBUFFERSPROC)(GLsizei n, GLuint* buffers);
typedef void(*PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, GLuint* framebuffers);
typedef void(*PFNGLDELETELISTSPROC)(GLuint list, GLsizei range);
typedef void(*PFNGLDELETEPROGRAMPROC)(GLuint program);
typedef void(*PFNGLDELETEQUERIESPROC)(GLsizei n, GLuint* ids);
typedef void(*PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, GLuint* renderbuffers);
typedef void(*PFNGLDELETESAMPLERSPROC)(GLsizei count, GLuint* samplers);
typedef void(*PFNGLDELETESHADERPROC)(GLuint shader);
typedef void(*PFNGLDELETESYNCPROC)(GLsync sync);
typedef void(*PFNGLDELETETEXTURESPROC)(GLsizei n, GLuint* textures);
typedef void(*PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, GLuint* arrays);
typedef void(*PFNGLDEPTHFUNCPROC)(GLenum func);
typedef void(*PFNGLDEPTHMASKPROC)(GLboolean flag);
typedef void(*PFNGLDEPTHRANGEPROC)(GLdouble n, GLdouble f);
typedef void(*PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
typedef void(*PFNGLDISABLEPROC)(GLenum cap);
typedef void(*PFNGLDISABLECLIENTSTATEPROC)(GLenum array);
typedef void(*PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void(*PFNGLDISABLEIPROC)(GLenum target, GLuint index);
typedef void(*PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
typedef void(*PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
typedef void(*PFNGLDRAWBUFFERPROC)(GLenum buf);
typedef void(*PFNGLDRAWBUFFERSPROC)(GLsizei n, GLenum* bufs);
typedef void(*PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices);
typedef void(*PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLint basevertex);
typedef void(*PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount);
typedef void(*PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLint basevertex);
typedef void(*PFNGLDRAWPIXELSPROC)(GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
typedef void(*PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices);
typedef void(*PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices, GLint basevertex);
typedef void(*PFNGLEDGEFLAGPROC)(GLboolean flag);
typedef void(*PFNGLEDGEFLAGPOINTERPROC)(GLsizei stride, const void* pointer);
typedef void(*PFNGLEDGEFLAGVPROC)(GLboolean* flag);
typedef void(*PFNGLENABLEPROC)(GLenum cap);
typedef void(*PFNGLENABLECLIENTSTATEPROC)(GLenum array);
typedef void(*PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
typedef void(*PFNGLENABLEIPROC)(GLenum target, GLuint index);
typedef void(*PFNGLENDPROC)();
typedef void(*PFNGLENDCONDITIONALRENDERPROC)();
typedef void(*PFNGLENDLISTPROC)();
typedef void(*PFNGLENDQUERYPROC)(GLenum target);
typedef void(*PFNGLENDTRANSFORMFEEDBACKPROC)();
typedef void(*PFNGLEVALCOORD1DPROC)(GLdouble u);
typedef void(*PFNGLEVALCOORD1DVPROC)(GLdouble* u);
typedef void(*PFNGLEVALCOORD1FPROC)(GLfloat u);
typedef void(*PFNGLEVALCOORD1FVPROC)(GLfloat* u);
typedef void(*PFNGLEVALCOORD2DPROC)(GLdouble u, GLdouble v);
typedef void(*PFNGLEVALCOORD2DVPROC)(GLdouble* u);
typedef void(*PFNGLEVALCOORD2FPROC)(GLfloat u, GLfloat v);
typedef void(*PFNGLEVALCOORD2FVPROC)(GLfloat* u);
typedef void(*PFNGLEVALMESH1PROC)(GLenum mode, GLint i1, GLint i2);
typedef void(*PFNGLEVALMESH2PROC)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
typedef void(*PFNGLEVALPOINT1PROC)(GLint i);
typedef void(*PFNGLEVALPOINT2PROC)(GLint i, GLint j);
typedef void(*PFNGLFEEDBACKBUFFERPROC)(GLsizei size, GLenum type, GLfloat* buffer);
typedef GLsync(*PFNGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);
typedef void(*PFNGLFINISHPROC)();
typedef void(*PFNGLFLUSHPROC)();
typedef void(*PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length);
typedef void(*PFNGLFOGCOORDPOINTERPROC)(GLenum type, GLsizei stride, const void* pointer);
typedef void(*PFNGLFOGCOORDDPROC)(GLdouble coord);
typedef void(*PFNGLFOGCOORDDVPROC)(GLdouble* coord);
typedef void(*PFNGLFOGCOORDFPROC)(GLfloat coord);
typedef void(*PFNGLFOGCOORDFVPROC)(GLfloat* coord);
typedef void(*PFNGLFOGFPROC)(GLenum pname, GLfloat param);
typedef void(*PFNGLFOGFVPROC)(GLenum pname, GLfloat* params);
typedef void(*PFNGLFOGIPROC)(GLenum pname, GLint param);
typedef void(*PFNGLFOGIVPROC)(GLenum pname, GLint* params);
typedef void(*PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void(*PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void(*PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void(*PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void(*PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void(*PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void(*PFNGLFRONTFACEPROC)(GLenum mode);
typedef void(*PFNGLFRUSTUMPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void(*PFNGLGENBUFFERSPROC)(GLsizei n, GLuint* buffers);
typedef void(*PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint* framebuffers);
typedef GLuint(*PFNGLGENLISTSPROC)(GLsizei range);
typedef void(*PFNGLGENQUERIESPROC)(GLsizei n, GLuint* ids);
typedef void(*PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint* renderbuffers);
typedef void(*PFNGLGENSAMPLERSPROC)(GLsizei count, GLuint* samplers);
typedef void(*PFNGLGENTEXTURESPROC)(GLsizei n, GLuint* textures);
typedef void(*PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint* arrays);
typedef void(*PFNGLGENERATEMIPMAPPROC)(GLenum target);
typedef void(*PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, const GLchar* name);
typedef void(*PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, const GLchar* name);
typedef void(*PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName);
typedef void(*PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params);
typedef void(*PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName);
typedef void(*PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, GLuint* uniformIndices, GLenum pname, GLint* params);
typedef void(*PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders);
typedef GLint(*PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar* name);
typedef void(*PFNGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean* data);
typedef void(*PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean* data);
typedef void(*PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64* params);
typedef void(*PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
typedef void(*PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void** params);
typedef void(*PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, void* data);
typedef void(*PFNGLGETCLIPPLANEPROC)(GLenum plane, GLdouble* equation);
typedef void(*PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void* img);
typedef GLuint(*PFNGLGETDEBUGMESSAGELOGPROC)(GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog);
typedef void(*PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble* data);
typedef GLenum(*PFNGLGETERRORPROC)();
typedef void(*PFNGLGETFLOATVPROC)(GLenum pname, GLfloat* data);
typedef GLint(*PFNGLGETFRAGDATAINDEXPROC)(GLuint program, const GLchar* name);
typedef GLint(*PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar* name);
typedef void(*PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint* params);
typedef GLenum(*PFNGLGETGRAPHICSRESETSTATUSARBPROC)();
typedef void(*PFNGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64* data);
typedef void(*PFNGLGETINTEGER64VPROC)(GLenum pname, GLint64* data);
typedef void(*PFNGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint* data);
typedef void(*PFNGLGETINTEGERVPROC)(GLenum pname, GLint* data);
typedef void(*PFNGLGETLIGHTFVPROC)(GLenum light, GLenum pname, GLfloat* params);
typedef void(*PFNGLGETLIGHTIVPROC)(GLenum light, GLenum pname, GLint* params);
typedef void(*PFNGLGETMAPDVPROC)(GLenum target, GLenum query, GLdouble* v);
typedef void(*PFNGLGETMAPFVPROC)(GLenum target, GLenum query, GLfloat* v);
typedef void(*PFNGLGETMAPIVPROC)(GLenum target, GLenum query, GLint* v);
typedef void(*PFNGLGETMATERIALFVPROC)(GLenum face, GLenum pname, GLfloat* params);
typedef void(*PFNGLGETMATERIALIVPROC)(GLenum face, GLenum pname, GLint* params);
typedef void(*PFNGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat* val);
typedef void(*PFNGLGETOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar* label);
typedef void(*PFNGLGETOBJECTPTRLABELPROC)(const void* ptr, GLsizei bufSize, GLsizei* length, GLchar* label);
typedef void(*PFNGLGETPIXELMAPFVPROC)(GLenum map, GLfloat* values);
typedef void(*PFNGLGETPIXELMAPUIVPROC)(GLenum map, GLuint* values);
typedef void(*PFNGLGETPIXELMAPUSVPROC)(GLenum map, GLushort* values);
typedef void(*PFNGLGETPOINTERVPROC)(GLenum pname, void** params);
typedef void(*PFNGLGETPOLYGONSTIPPLEPROC)(GLubyte* mask);
typedef void(*PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
typedef void(*PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint* params);
typedef void(*PFNGLGETQUERYOBJECTI64VPROC)(GLuint id, GLenum pname, GLint64* params);
typedef void(*PFNGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint* params);
typedef void(*PFNGLGETQUERYOBJECTUI64VPROC)(GLuint id, GLenum pname, GLuint64* params);
typedef void(*PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint* params);
typedef void(*PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint* params);
typedef void(*PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
typedef void(*PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint* params);
typedef void(*PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint* params);
typedef void(*PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat* params);
typedef void(*PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint* params);
typedef void(*PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
typedef void(*PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source);
typedef void(*PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint* params);
typedef GLubyte*(*PFNGLGETSTRINGPROC)(GLenum name);
typedef GLubyte*(*PFNGLGETSTRINGIPROC)(GLenum name, GLuint index);
typedef void(*PFNGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values);
typedef void(*PFNGLGETTEXENVFVPROC)(GLenum target, GLenum pname, GLfloat* params);
typedef void(*PFNGLGETTEXENVIVPROC)(GLenum target, GLenum pname, GLint* params);
typedef void(*PFNGLGETTEXGENDVPROC)(GLenum coord, GLenum pname, GLdouble* params);
typedef void(*PFNGLGETTEXGENFVPROC)(GLenum coord, GLenum pname, GLfloat* params);
typedef void(*PFNGLGETTEXGENIVPROC)(GLenum coord, GLenum pname, GLint* params);
typedef void(*PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void* pixels);
typedef void(*PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat* params);
typedef void(*PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint* params);
typedef void(*PFNGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint* params);
typedef void(*PFNGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint* params);
typedef void(*PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat* params);
typedef void(*PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
typedef void(*PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, const GLchar* name);
typedef GLuint(*PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, GLchar* uniformBlockName);
typedef void(*PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar** uniformNames, GLuint* uniformIndices);
typedef GLint(*PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar* name);
typedef void(*PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat* params);
typedef void(*PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint* params);
typedef void(*PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint* params);
typedef void(*PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint* params);
typedef void(*PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint* params);
typedef void(*PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void** pointer);
typedef void(*PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble* params);
typedef void(*PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat* params);
typedef void(*PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint* params);
typedef void(*PFNGLGETNCOLORTABLEARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* table);
typedef void(*PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC)(GLenum target, GLint lod, GLsizei bufSize, void* img);
typedef void(*PFNGLGETNCONVOLUTIONFILTERARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void* image);
typedef void(*PFNGLGETNHISTOGRAMARBPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
typedef void(*PFNGLGETNMAPDVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLdouble* v);
typedef void(*PFNGLGETNMAPFVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLfloat* v);
typedef void(*PFNGLGETNMAPIVARBPROC)(GLenum target, GLenum query, GLsizei bufSize, GLint* v);
typedef void(*PFNGLGETNMINMAXARBPROC)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void* values);
typedef void(*PFNGLGETNPIXELMAPFVARBPROC)(GLenum map, GLsizei bufSize, GLfloat* values);
typedef void(*PFNGLGETNPIXELMAPUIVARBPROC)(GLenum map, GLsizei bufSize, GLuint* values);
typedef void(*PFNGLGETNPIXELMAPUSVARBPROC)(GLenum map, GLsizei bufSize, GLushort* values);
typedef void(*PFNGLGETNPOLYGONSTIPPLEARBPROC)(GLsizei bufSize, GLubyte* pattern);
typedef void(*PFNGLGETNSEPARABLEFILTERARBPROC)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void* row, GLsizei columnBufSize, void* column, void* span);
typedef void(*PFNGLGETNTEXIMAGEARBPROC)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* img);
typedef void(*PFNGLGETNUNIFORMDVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLdouble* params);
typedef void(*PFNGLGETNUNIFORMFVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat* params);
typedef void(*PFNGLGETNUNIFORMIVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLint* params);
typedef void(*PFNGLGETNUNIFORMUIVARBPROC)(GLuint program, GLint location, GLsizei bufSize, GLuint* params);
typedef void(*PFNGLHINTPROC)(GLenum target, GLenum mode);
typedef void(*PFNGLINDEXMASKPROC)(GLuint mask);
typedef void(*PFNGLINDEXPOINTERPROC)(GLenum type, GLsizei stride, const void* pointer);
typedef void(*PFNGLINDEXDPROC)(GLdouble c);
typedef void(*PFNGLINDEXDVPROC)(GLdouble* c);
typedef void(*PFNGLINDEXFPROC)(GLfloat c);
typedef void(*PFNGLINDEXFVPROC)(GLfloat* c);
typedef void(*PFNGLINDEXIPROC)(GLint c);
typedef void(*PFNGLINDEXIVPROC)(GLint* c);
typedef void(*PFNGLINDEXSPROC)(GLshort c);
typedef void(*PFNGLINDEXSVPROC)(GLshort* c);
typedef void(*PFNGLINDEXUBPROC)(GLubyte c);
typedef void(*PFNGLINDEXUBVPROC)(GLubyte* c);
typedef void(*PFNGLINITNAMESPROC)();
typedef void(*PFNGLINTERLEAVEDARRAYSPROC)(GLenum format, GLsizei stride, const void* pointer);
typedef GLboolean(*PFNGLISBUFFERPROC)(GLuint buffer);
typedef GLboolean(*PFNGLISENABLEDPROC)(GLenum cap);
typedef GLboolean(*PFNGLISENABLEDIPROC)(GLenum target, GLuint index);
typedef GLboolean(*PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);
typedef GLboolean(*PFNGLISLISTPROC)(GLuint list);
typedef GLboolean(*PFNGLISPROGRAMPROC)(GLuint program);
typedef GLboolean(*PFNGLISQUERYPROC)(GLuint id);
typedef GLboolean(*PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);
typedef GLboolean(*PFNGLISSAMPLERPROC)(GLuint sampler);
typedef GLboolean(*PFNGLISSHADERPROC)(GLuint shader);
typedef GLboolean(*PFNGLISSYNCPROC)(GLsync sync);
typedef GLboolean(*PFNGLISTEXTUREPROC)(GLuint texture);
typedef GLboolean(*PFNGLISVERTEXARRAYPROC)(GLuint array);
typedef void(*PFNGLLIGHTMODELFPROC)(GLenum pname, GLfloat param);
typedef void(*PFNGLLIGHTMODELFVPROC)(GLenum pname, GLfloat* params);
typedef void(*PFNGLLIGHTMODELIPROC)(GLenum pname, GLint param);
typedef void(*PFNGLLIGHTMODELIVPROC)(GLenum pname, GLint* params);
typedef void(*PFNGLLIGHTFPROC)(GLenum light, GLenum pname, GLfloat param);
typedef void(*PFNGLLIGHTFVPROC)(GLenum light, GLenum pname, GLfloat* params);
typedef void(*PFNGLLIGHTIPROC)(GLenum light, GLenum pname, GLint param);
typedef void(*PFNGLLIGHTIVPROC)(GLenum light, GLenum pname, GLint* params);
typedef void(*PFNGLLINESTIPPLEPROC)(GLint factor, GLushort pattern);
typedef void(*PFNGLLINEWIDTHPROC)(GLfloat width);
typedef void(*PFNGLLINKPROGRAMPROC)(GLuint program);
typedef void(*PFNGLLISTBASEPROC)(GLuint base);
typedef void(*PFNGLLOADIDENTITYPROC)();
typedef void(*PFNGLLOADMATRIXDPROC)(GLdouble* m);
typedef void(*PFNGLLOADMATRIXFPROC)(GLfloat* m);
typedef void(*PFNGLLOADNAMEPROC)(GLuint name);
typedef void(*PFNGLLOADTRANSPOSEMATRIXDPROC)(GLdouble* m);
typedef void(*PFNGLLOADTRANSPOSEMATRIXFPROC)(GLfloat* m);
typedef void(*PFNGLLOGICOPPROC)(GLenum opcode);
typedef void(*PFNGLMAP1DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, GLdouble* points);
typedef void(*PFNGLMAP1FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, GLfloat* points);
typedef void(*PFNGLMAP2DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble* points);
typedef void(*PFNGLMAP2FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat* points);
typedef void*(*PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);
typedef void*(*PFNGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void(*PFNGLMAPGRID1DPROC)(GLint un, GLdouble u1, GLdouble u2);
typedef void(*PFNGLMAPGRID1FPROC)(GLint un, GLfloat u1, GLfloat u2);
typedef void(*PFNGLMAPGRID2DPROC)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
typedef void(*PFNGLMAPGRID2FPROC)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
typedef void(*PFNGLMATERIALFPROC)(GLenum face, GLenum pname, GLfloat param);
typedef void(*PFNGLMATERIALFVPROC)(GLenum face, GLenum pname, GLfloat* params);
typedef void(*PFNGLMATERIALIPROC)(GLenum face, GLenum pname, GLint param);
typedef void(*PFNGLMATERIALIVPROC)(GLenum face, GLenum pname, GLint* params);
typedef void(*PFNGLMATRIXMODEPROC)(GLenum mode);
typedef void(*PFNGLMULTMATRIXDPROC)(GLdouble* m);
typedef void(*PFNGLMULTMATRIXFPROC)(GLfloat* m);
typedef void(*PFNGLMULTTRANSPOSEMATRIXDPROC)(GLdouble* m);
typedef void(*PFNGLMULTTRANSPOSEMATRIXFPROC)(GLfloat* m);
typedef void(*PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, GLint* first, GLsizei* count, GLsizei drawcount);
typedef void(*PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode, GLsizei* count, GLenum type, const void* const* indices, GLsizei drawcount);
typedef void(*PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei* count, GLenum type, const void* const* indices, GLsizei drawcount, GLint* basevertex);
typedef void(*PFNGLMULTITEXCOORD1DPROC)(GLenum target, GLdouble s);
typedef void(*PFNGLMULTITEXCOORD1DVPROC)(GLenum target, GLdouble* v);
typedef void(*PFNGLMULTITEXCOORD1FPROC)(GLenum target, GLfloat s);
typedef void(*PFNGLMULTITEXCOORD1FVPROC)(GLenum target, GLfloat* v);
typedef void(*PFNGLMULTITEXCOORD1IPROC)(GLenum target, GLint s);
typedef void(*PFNGLMULTITEXCOORD1IVPROC)(GLenum target, GLint* v);
typedef void(*PFNGLMULTITEXCOORD1SPROC)(GLenum target, GLshort s);
typedef void(*PFNGLMULTITEXCOORD1SVPROC)(GLenum target, GLshort* v);
typedef void(*PFNGLMULTITEXCOORD2DPROC)(GLenum target, GLdouble s, GLdouble t);
typedef void(*PFNGLMULTITEXCOORD2DVPROC)(GLenum target, GLdouble* v);
typedef void(*PFNGLMULTITEXCOORD2FPROC)(GLenum target, GLfloat s, GLfloat t);
typedef void(*PFNGLMULTITEXCOORD2FVPROC)(GLenum target, GLfloat* v);
typedef void(*PFNGLMULTITEXCOORD2IPROC)(GLenum target, GLint s, GLint t);
typedef void(*PFNGLMULTITEXCOORD2IVPROC)(GLenum target, GLint* v);
typedef void(*PFNGLMULTITEXCOORD2SPROC)(GLenum target, GLshort s, GLshort t);
typedef void(*PFNGLMULTITEXCOORD2SVPROC)(GLenum target, GLshort* v);
typedef void(*PFNGLMULTITEXCOORD3DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
typedef void(*PFNGLMULTITEXCOORD3DVPROC)(GLenum target, GLdouble* v);
typedef void(*PFNGLMULTITEXCOORD3FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
typedef void(*PFNGLMULTITEXCOORD3FVPROC)(GLenum target, GLfloat* v);
typedef void(*PFNGLMULTITEXCOORD3IPROC)(GLenum target, GLint s, GLint t, GLint r);
typedef void(*PFNGLMULTITEXCOORD3IVPROC)(GLenum target, GLint* v);
typedef void(*PFNGLMULTITEXCOORD3SPROC)(GLenum target, GLshort s, GLshort t, GLshort r);
typedef void(*PFNGLMULTITEXCOORD3SVPROC)(GLenum target, GLshort* v);
typedef void(*PFNGLMULTITEXCOORD4DPROC)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void(*PFNGLMULTITEXCOORD4DVPROC)(GLenum target, GLdouble* v);
typedef void(*PFNGLMULTITEXCOORD4FPROC)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void(*PFNGLMULTITEXCOORD4FVPROC)(GLenum target, GLfloat* v);
typedef void(*PFNGLMULTITEXCOORD4IPROC)(GLenum target, GLint s, GLint t, GLint r, GLint q);
typedef void(*PFNGLMULTITEXCOORD4IVPROC)(GLenum target, GLint* v);
typedef void(*PFNGLMULTITEXCOORD4SPROC)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef void(*PFNGLMULTITEXCOORD4SVPROC)(GLenum target, GLshort* v);
typedef void(*PFNGLMULTITEXCOORDP1UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void(*PFNGLMULTITEXCOORDP1UIVPROC)(GLenum texture, GLenum type, GLuint* coords);
typedef void(*PFNGLMULTITEXCOORDP2UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void(*PFNGLMULTITEXCOORDP2UIVPROC)(GLenum texture, GLenum type, GLuint* coords);
typedef void(*PFNGLMULTITEXCOORDP3UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void(*PFNGLMULTITEXCOORDP3UIVPROC)(GLenum texture, GLenum type, GLuint* coords);
typedef void(*PFNGLMULTITEXCOORDP4UIPROC)(GLenum texture, GLenum type, GLuint coords);
typedef void(*PFNGLMULTITEXCOORDP4UIVPROC)(GLenum texture, GLenum type, GLuint* coords);
typedef void(*PFNGLNEWLISTPROC)(GLuint list, GLenum mode);
typedef void(*PFNGLNORMAL3BPROC)(GLbyte nx, GLbyte ny, GLbyte nz);
typedef void(*PFNGLNORMAL3BVPROC)(GLbyte* v);
typedef void(*PFNGLNORMAL3DPROC)(GLdouble nx, GLdouble ny, GLdouble nz);
typedef void(*PFNGLNORMAL3DVPROC)(GLdouble* v);
typedef void(*PFNGLNORMAL3FPROC)(GLfloat nx, GLfloat ny, GLfloat nz);
typedef void(*PFNGLNORMAL3FVPROC)(GLfloat* v);
typedef void(*PFNGLNORMAL3IPROC)(GLint nx, GLint ny, GLint nz);
typedef void(*PFNGLNORMAL3IVPROC)(GLint* v);
typedef void(*PFNGLNORMAL3SPROC)(GLshort nx, GLshort ny, GLshort nz);
typedef void(*PFNGLNORMAL3SVPROC)(GLshort* v);
typedef void(*PFNGLNORMALP3UIPROC)(GLenum type, GLuint coords);
typedef void(*PFNGLNORMALP3UIVPROC)(GLenum type, GLuint* coords);
typedef void(*PFNGLNORMALPOINTERPROC)(GLenum type, GLsizei stride, const void* pointer);
typedef void(*PFNGLOBJECTLABELPROC)(GLenum identifier, GLuint name, GLsizei length, GLchar* label);
typedef void(*PFNGLOBJECTPTRLABELPROC)(const void* ptr, GLsizei length, GLchar* label);
typedef void(*PFNGLORTHOPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void(*PFNGLPASSTHROUGHPROC)(GLfloat token);
typedef void(*PFNGLPIXELMAPFVPROC)(GLenum map, GLsizei mapsize, GLfloat* values);
typedef void(*PFNGLPIXELMAPUIVPROC)(GLenum map, GLsizei mapsize, GLuint* values);
typedef void(*PFNGLPIXELMAPUSVPROC)(GLenum map, GLsizei mapsize, GLushort* values);
typedef void(*PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
typedef void(*PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
typedef void(*PFNGLPIXELTRANSFERFPROC)(GLenum pname, GLfloat param);
typedef void(*PFNGLPIXELTRANSFERIPROC)(GLenum pname, GLint param);
typedef void(*PFNGLPIXELZOOMPROC)(GLfloat xfactor, GLfloat yfactor);
typedef void(*PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);
typedef void(*PFNGLPOINTPARAMETERFVPROC)(GLenum pname, GLfloat* params);
typedef void(*PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);
typedef void(*PFNGLPOINTPARAMETERIVPROC)(GLenum pname, GLint* params);
typedef void(*PFNGLPOINTSIZEPROC)(GLfloat size);
typedef void(*PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
typedef void(*PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
typedef void(*PFNGLPOLYGONSTIPPLEPROC)(GLubyte* mask);
typedef void(*PFNGLPOPATTRIBPROC)();
typedef void(*PFNGLPOPCLIENTATTRIBPROC)();
typedef void(*PFNGLPOPDEBUGGROUPPROC)();
typedef void(*PFNGLPOPMATRIXPROC)();
typedef void(*PFNGLPOPNAMEPROC)();
typedef void(*PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint index);
typedef void(*PFNGLPRIORITIZETEXTURESPROC)(GLsizei n, GLuint* textures, GLfloat* priorities);
typedef void(*PFNGLPROVOKINGVERTEXPROC)(GLenum mode);
typedef void(*PFNGLPUSHATTRIBPROC)(GLbitfield mask);
typedef void(*PFNGLPUSHCLIENTATTRIBPROC)(GLbitfield mask);
typedef void(*PFNGLPUSHDEBUGGROUPPROC)(GLenum source, GLuint id, GLsizei length, GLchar* message);
typedef void(*PFNGLPUSHMATRIXPROC)();
typedef void(*PFNGLPUSHNAMEPROC)(GLuint name);
typedef void(*PFNGLQUERYCOUNTERPROC)(GLuint id, GLenum target);
typedef void(*PFNGLRASTERPOS2DPROC)(GLdouble x, GLdouble y);
typedef void(*PFNGLRASTERPOS2DVPROC)(GLdouble* v);
typedef void(*PFNGLRASTERPOS2FPROC)(GLfloat x, GLfloat y);
typedef void(*PFNGLRASTERPOS2FVPROC)(GLfloat* v);
typedef void(*PFNGLRASTERPOS2IPROC)(GLint x, GLint y);
typedef void(*PFNGLRASTERPOS2IVPROC)(GLint* v);
typedef void(*PFNGLRASTERPOS2SPROC)(GLshort x, GLshort y);
typedef void(*PFNGLRASTERPOS2SVPROC)(GLshort* v);
typedef void(*PFNGLRASTERPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void(*PFNGLRASTERPOS3DVPROC)(GLdouble* v);
typedef void(*PFNGLRASTERPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void(*PFNGLRASTERPOS3FVPROC)(GLfloat* v);
typedef void(*PFNGLRASTERPOS3IPROC)(GLint x, GLint y, GLint z);
typedef void(*PFNGLRASTERPOS3IVPROC)(GLint* v);
typedef void(*PFNGLRASTERPOS3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void(*PFNGLRASTERPOS3SVPROC)(GLshort* v);
typedef void(*PFNGLRASTERPOS4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void(*PFNGLRASTERPOS4DVPROC)(GLdouble* v);
typedef void(*PFNGLRASTERPOS4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void(*PFNGLRASTERPOS4FVPROC)(GLfloat* v);
typedef void(*PFNGLRASTERPOS4IPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void(*PFNGLRASTERPOS4IVPROC)(GLint* v);
typedef void(*PFNGLRASTERPOS4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void(*PFNGLRASTERPOS4SVPROC)(GLshort* v);
typedef void(*PFNGLREADBUFFERPROC)(GLenum src);
typedef void(*PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
typedef void(*PFNGLREADNPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data);
typedef void(*PFNGLREADNPIXELSARBPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data);
typedef void(*PFNGLRECTDPROC)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
typedef void(*PFNGLRECTDVPROC)(GLdouble* v1, GLdouble* v2);
typedef void(*PFNGLRECTFPROC)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
typedef void(*PFNGLRECTFVPROC)(GLfloat* v1, GLfloat* v2);
typedef void(*PFNGLRECTIPROC)(GLint x1, GLint y1, GLint x2, GLint y2);
typedef void(*PFNGLRECTIVPROC)(GLint* v1, GLint* v2);
typedef void(*PFNGLRECTSPROC)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
typedef void(*PFNGLRECTSVPROC)(GLshort* v1, GLshort* v2);
typedef GLint(*PFNGLRENDERMODEPROC)(GLenum mode);
typedef void(*PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void(*PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void(*PFNGLROTATEDPROC)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void(*PFNGLROTATEFPROC)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void(*PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);
typedef void(*PFNGLSAMPLECOVERAGEARBPROC)(GLfloat value, GLboolean invert);
typedef void(*PFNGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);
typedef void(*PFNGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint* param);
typedef void(*PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint* param);
typedef void(*PFNGLSAMPLERPARAMETERFPROC)(GLuint sampler, GLenum pname, GLfloat param);
typedef void(*PFNGLSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat* param);
typedef void(*PFNGLSAMPLERPARAMETERIPROC)(GLuint sampler, GLenum pname, GLint param);
typedef void(*PFNGLSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint* param);
typedef void(*PFNGLSCALEDPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void(*PFNGLSCALEFPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void(*PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void(*PFNGLSECONDARYCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
typedef void(*PFNGLSECONDARYCOLOR3BVPROC)(GLbyte* v);
typedef void(*PFNGLSECONDARYCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
typedef void(*PFNGLSECONDARYCOLOR3DVPROC)(GLdouble* v);
typedef void(*PFNGLSECONDARYCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
typedef void(*PFNGLSECONDARYCOLOR3FVPROC)(GLfloat* v);
typedef void(*PFNGLSECONDARYCOLOR3IPROC)(GLint red, GLint green, GLint blue);
typedef void(*PFNGLSECONDARYCOLOR3IVPROC)(GLint* v);
typedef void(*PFNGLSECONDARYCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
typedef void(*PFNGLSECONDARYCOLOR3SVPROC)(GLshort* v);
typedef void(*PFNGLSECONDARYCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
typedef void(*PFNGLSECONDARYCOLOR3UBVPROC)(GLubyte* v);
typedef void(*PFNGLSECONDARYCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
typedef void(*PFNGLSECONDARYCOLOR3UIVPROC)(GLuint* v);
typedef void(*PFNGLSECONDARYCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
typedef void(*PFNGLSECONDARYCOLOR3USVPROC)(GLushort* v);
typedef void(*PFNGLSECONDARYCOLORP3UIPROC)(GLenum type, GLuint color);
typedef void(*PFNGLSECONDARYCOLORP3UIVPROC)(GLenum type, GLuint* color);
typedef void(*PFNGLSECONDARYCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
typedef void(*PFNGLSELECTBUFFERPROC)(GLsizei size, GLuint* buffer);
typedef void(*PFNGLSHADEMODELPROC)(GLenum mode);
typedef void(*PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar** string, GLint* length);
typedef void(*PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
typedef void(*PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);
typedef void(*PFNGLSTENCILMASKPROC)(GLuint mask);
typedef void(*PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);
typedef void(*PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
typedef void(*PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void(*PFNGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer);
typedef void(*PFNGLTEXCOORD1DPROC)(GLdouble s);
typedef void(*PFNGLTEXCOORD1DVPROC)(GLdouble* v);
typedef void(*PFNGLTEXCOORD1FPROC)(GLfloat s);
typedef void(*PFNGLTEXCOORD1FVPROC)(GLfloat* v);
typedef void(*PFNGLTEXCOORD1IPROC)(GLint s);
typedef void(*PFNGLTEXCOORD1IVPROC)(GLint* v);
typedef void(*PFNGLTEXCOORD1SPROC)(GLshort s);
typedef void(*PFNGLTEXCOORD1SVPROC)(GLshort* v);
typedef void(*PFNGLTEXCOORD2DPROC)(GLdouble s, GLdouble t);
typedef void(*PFNGLTEXCOORD2DVPROC)(GLdouble* v);
typedef void(*PFNGLTEXCOORD2FPROC)(GLfloat s, GLfloat t);
typedef void(*PFNGLTEXCOORD2FVPROC)(GLfloat* v);
typedef void(*PFNGLTEXCOORD2IPROC)(GLint s, GLint t);
typedef void(*PFNGLTEXCOORD2IVPROC)(GLint* v);
typedef void(*PFNGLTEXCOORD2SPROC)(GLshort s, GLshort t);
typedef void(*PFNGLTEXCOORD2SVPROC)(GLshort* v);
typedef void(*PFNGLTEXCOORD3DPROC)(GLdouble s, GLdouble t, GLdouble r);
typedef void(*PFNGLTEXCOORD3DVPROC)(GLdouble* v);
typedef void(*PFNGLTEXCOORD3FPROC)(GLfloat s, GLfloat t, GLfloat r);
typedef void(*PFNGLTEXCOORD3FVPROC)(GLfloat* v);
typedef void(*PFNGLTEXCOORD3IPROC)(GLint s, GLint t, GLint r);
typedef void(*PFNGLTEXCOORD3IVPROC)(GLint* v);
typedef void(*PFNGLTEXCOORD3SPROC)(GLshort s, GLshort t, GLshort r);
typedef void(*PFNGLTEXCOORD3SVPROC)(GLshort* v);
typedef void(*PFNGLTEXCOORD4DPROC)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void(*PFNGLTEXCOORD4DVPROC)(GLdouble* v);
typedef void(*PFNGLTEXCOORD4FPROC)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void(*PFNGLTEXCOORD4FVPROC)(GLfloat* v);
typedef void(*PFNGLTEXCOORD4IPROC)(GLint s, GLint t, GLint r, GLint q);
typedef void(*PFNGLTEXCOORD4IVPROC)(GLint* v);
typedef void(*PFNGLTEXCOORD4SPROC)(GLshort s, GLshort t, GLshort r, GLshort q);
typedef void(*PFNGLTEXCOORD4SVPROC)(GLshort* v);
typedef void(*PFNGLTEXCOORDP1UIPROC)(GLenum type, GLuint coords);
typedef void(*PFNGLTEXCOORDP1UIVPROC)(GLenum type, GLuint* coords);
typedef void(*PFNGLTEXCOORDP2UIPROC)(GLenum type, GLuint coords);
typedef void(*PFNGLTEXCOORDP2UIVPROC)(GLenum type, GLuint* coords);
typedef void(*PFNGLTEXCOORDP3UIPROC)(GLenum type, GLuint coords);
typedef void(*PFNGLTEXCOORDP3UIVPROC)(GLenum type, GLuint* coords);
typedef void(*PFNGLTEXCOORDP4UIPROC)(GLenum type, GLuint coords);
typedef void(*PFNGLTEXCOORDP4UIVPROC)(GLenum type, GLuint* coords);
typedef void(*PFNGLTEXCOORDPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
typedef void(*PFNGLTEXENVFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void(*PFNGLTEXENVFVPROC)(GLenum target, GLenum pname, GLfloat* params);
typedef void(*PFNGLTEXENVIPROC)(GLenum target, GLenum pname, GLint param);
typedef void(*PFNGLTEXENVIVPROC)(GLenum target, GLenum pname, GLint* params);
typedef void(*PFNGLTEXGENDPROC)(GLenum coord, GLenum pname, GLdouble param);
typedef void(*PFNGLTEXGENDVPROC)(GLenum coord, GLenum pname, GLdouble* params);
typedef void(*PFNGLTEXGENFPROC)(GLenum coord, GLenum pname, GLfloat param);
typedef void(*PFNGLTEXGENFVPROC)(GLenum coord, GLenum pname, GLfloat* params);
typedef void(*PFNGLTEXGENIPROC)(GLenum coord, GLenum pname, GLint param);
typedef void(*PFNGLTEXGENIVPROC)(GLenum coord, GLenum pname, GLint* params);
typedef void(*PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels);
typedef void(*PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels);
typedef void(*PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void(*PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels);
typedef void(*PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void(*PFNGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint* params);
typedef void(*PFNGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint* params);
typedef void(*PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void(*PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat* params);
typedef void(*PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
typedef void(*PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint* params);
typedef void(*PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
typedef void(*PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
typedef void(*PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
typedef void(*PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar** varyings, GLenum bufferMode);
typedef void(*PFNGLTRANSLATEDPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void(*PFNGLTRANSLATEFPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void(*PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
typedef void(*PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, GLfloat* value);
typedef void(*PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
typedef void(*PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, GLint* value);
typedef void(*PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);
typedef void(*PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, GLuint* value);
typedef void(*PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
typedef void(*PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, GLfloat* value);
typedef void(*PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
typedef void(*PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, GLint* value);
typedef void(*PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);
typedef void(*PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, GLuint* value);
typedef void(*PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void(*PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, GLfloat* value);
typedef void(*PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
typedef void(*PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, GLint* value);
typedef void(*PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void(*PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, GLuint* value);
typedef void(*PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void(*PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, GLfloat* value);
typedef void(*PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void(*PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, GLint* value);
typedef void(*PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void(*PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, GLuint* value);
typedef void(*PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
typedef void(*PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
typedef void(*PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
typedef void(*PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
typedef void(*PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
typedef void(*PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
typedef void(*PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
typedef void(*PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
typedef void(*PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
typedef void(*PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
typedef GLboolean(*PFNGLUNMAPBUFFERPROC)(GLenum target);
typedef void(*PFNGLUSEPROGRAMPROC)(GLuint program);
typedef void(*PFNGLVALIDATEPROGRAMPROC)(GLuint program);
typedef void(*PFNGLVERTEX2DPROC)(GLdouble x, GLdouble y);
typedef void(*PFNGLVERTEX2DVPROC)(GLdouble* v);
typedef void(*PFNGLVERTEX2FPROC)(GLfloat x, GLfloat y);
typedef void(*PFNGLVERTEX2FVPROC)(GLfloat* v);
typedef void(*PFNGLVERTEX2IPROC)(GLint x, GLint y);
typedef void(*PFNGLVERTEX2IVPROC)(GLint* v);
typedef void(*PFNGLVERTEX2SPROC)(GLshort x, GLshort y);
typedef void(*PFNGLVERTEX2SVPROC)(GLshort* v);
typedef void(*PFNGLVERTEX3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void(*PFNGLVERTEX3DVPROC)(GLdouble* v);
typedef void(*PFNGLVERTEX3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void(*PFNGLVERTEX3FVPROC)(GLfloat* v);
typedef void(*PFNGLVERTEX3IPROC)(GLint x, GLint y, GLint z);
typedef void(*PFNGLVERTEX3IVPROC)(GLint* v);
typedef void(*PFNGLVERTEX3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void(*PFNGLVERTEX3SVPROC)(GLshort* v);
typedef void(*PFNGLVERTEX4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void(*PFNGLVERTEX4DVPROC)(GLdouble* v);
typedef void(*PFNGLVERTEX4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void(*PFNGLVERTEX4FVPROC)(GLfloat* v);
typedef void(*PFNGLVERTEX4IPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void(*PFNGLVERTEX4IVPROC)(GLint* v);
typedef void(*PFNGLVERTEX4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void(*PFNGLVERTEX4SVPROC)(GLshort* v);
typedef void(*PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
typedef void(*PFNGLVERTEXATTRIB1DVPROC)(GLuint index, GLdouble* v);
typedef void(*PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
typedef void(*PFNGLVERTEXATTRIB1FVPROC)(GLuint index, GLfloat* v);
typedef void(*PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
typedef void(*PFNGLVERTEXATTRIB1SVPROC)(GLuint index, GLshort* v);
typedef void(*PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
typedef void(*PFNGLVERTEXATTRIB2DVPROC)(GLuint index, GLdouble* v);
typedef void(*PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
typedef void(*PFNGLVERTEXATTRIB2FVPROC)(GLuint index, GLfloat* v);
typedef void(*PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
typedef void(*PFNGLVERTEXATTRIB2SVPROC)(GLuint index, GLshort* v);
typedef void(*PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef void(*PFNGLVERTEXATTRIB3DVPROC)(GLuint index, GLdouble* v);
typedef void(*PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
typedef void(*PFNGLVERTEXATTRIB3FVPROC)(GLuint index, GLfloat* v);
typedef void(*PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef void(*PFNGLVERTEXATTRIB3SVPROC)(GLuint index, GLshort* v);
typedef void(*PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, GLbyte* v);
typedef void(*PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, GLint* v);
typedef void(*PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, GLshort* v);
typedef void(*PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef void(*PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, GLubyte* v);
typedef void(*PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, GLuint* v);
typedef void(*PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, GLushort* v);
typedef void(*PFNGLVERTEXATTRIB4BVPROC)(GLuint index, GLbyte* v);
typedef void(*PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void(*PFNGLVERTEXATTRIB4DVPROC)(GLuint index, GLdouble* v);
typedef void(*PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void(*PFNGLVERTEXATTRIB4FVPROC)(GLuint index, GLfloat* v);
typedef void(*PFNGLVERTEXATTRIB4IVPROC)(GLuint index, GLint* v);
typedef void(*PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef void(*PFNGLVERTEXATTRIB4SVPROC)(GLuint index, GLshort* v);
typedef void(*PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, GLubyte* v);
typedef void(*PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, GLuint* v);
typedef void(*PFNGLVERTEXATTRIB4USVPROC)(GLuint index, GLushort* v);
typedef void(*PFNGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);
typedef void(*PFNGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);
typedef void(*PFNGLVERTEXATTRIBI1IVPROC)(GLuint index, GLint* v);
typedef void(*PFNGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);
typedef void(*PFNGLVERTEXATTRIBI1UIVPROC)(GLuint index, GLuint* v);
typedef void(*PFNGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);
typedef void(*PFNGLVERTEXATTRIBI2IVPROC)(GLuint index, GLint* v);
typedef void(*PFNGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);
typedef void(*PFNGLVERTEXATTRIBI2UIVPROC)(GLuint index, GLuint* v);
typedef void(*PFNGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);
typedef void(*PFNGLVERTEXATTRIBI3IVPROC)(GLuint index, GLint* v);
typedef void(*PFNGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
typedef void(*PFNGLVERTEXATTRIBI3UIVPROC)(GLuint index, GLuint* v);
typedef void(*PFNGLVERTEXATTRIBI4BVPROC)(GLuint index, GLbyte* v);
typedef void(*PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef void(*PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, GLint* v);
typedef void(*PFNGLVERTEXATTRIBI4SVPROC)(GLuint index, GLshort* v);
typedef void(*PFNGLVERTEXATTRIBI4UBVPROC)(GLuint index, GLubyte* v);
typedef void(*PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef void(*PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, GLuint* v);
typedef void(*PFNGLVERTEXATTRIBI4USVPROC)(GLuint index, GLushort* v);
typedef void(*PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
typedef void(*PFNGLVERTEXATTRIBP1UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void(*PFNGLVERTEXATTRIBP1UIVPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint* value);
typedef void(*PFNGLVERTEXATTRIBP2UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void(*PFNGLVERTEXATTRIBP2UIVPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint* value);
typedef void(*PFNGLVERTEXATTRIBP3UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void(*PFNGLVERTEXATTRIBP3UIVPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint* value);
typedef void(*PFNGLVERTEXATTRIBP4UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef void(*PFNGLVERTEXATTRIBP4UIVPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint* value);
typedef void(*PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer);
typedef void(*PFNGLVERTEXP2UIPROC)(GLenum type, GLuint value);
typedef void(*PFNGLVERTEXP2UIVPROC)(GLenum type, GLuint* value);
typedef void(*PFNGLVERTEXP3UIPROC)(GLenum type, GLuint value);
typedef void(*PFNGLVERTEXP3UIVPROC)(GLenum type, GLuint* value);
typedef void(*PFNGLVERTEXP4UIPROC)(GLenum type, GLuint value);
typedef void(*PFNGLVERTEXP4UIVPROC)(GLenum type, GLuint* value);
typedef void(*PFNGLVERTEXPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void* pointer);
typedef void(*PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void(*PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void(*PFNGLWINDOWPOS2DPROC)(GLdouble x, GLdouble y);
typedef void(*PFNGLWINDOWPOS2DVPROC)(GLdouble* v);
typedef void(*PFNGLWINDOWPOS2FPROC)(GLfloat x, GLfloat y);
typedef void(*PFNGLWINDOWPOS2FVPROC)(GLfloat* v);
typedef void(*PFNGLWINDOWPOS2IPROC)(GLint x, GLint y);
typedef void(*PFNGLWINDOWPOS2IVPROC)(GLint* v);
typedef void(*PFNGLWINDOWPOS2SPROC)(GLshort x, GLshort y);
typedef void(*PFNGLWINDOWPOS2SVPROC)(GLshort* v);
typedef void(*PFNGLWINDOWPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void(*PFNGLWINDOWPOS3DVPROC)(GLdouble* v);
typedef void(*PFNGLWINDOWPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void(*PFNGLWINDOWPOS3FVPROC)(GLfloat* v);
typedef void(*PFNGLWINDOWPOS3IPROC)(GLint x, GLint y, GLint z);
typedef void(*PFNGLWINDOWPOS3IVPROC)(GLint* v);
typedef void(*PFNGLWINDOWPOS3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void(*PFNGLWINDOWPOS3SVPROC)(GLshort* v);
    
]]

---@class OpenGL
---@field glAccum any
---@field glActiveTexture any
---@field glAlphaFunc any
---@field glAreTexturesResident any
---@field glArrayElement any
---@field glAttachShader any
---@field glBegin any
---@field glBeginConditionalRender any
---@field glBeginQuery any
---@field glBeginTransformFeedback any
---@field glBindAttribLocation any
---@field glBindBuffer any
---@field glBindBufferBase any
---@field glBindBufferRange any
---@field glBindFragDataLocation any
---@field glBindFragDataLocationIndexed any
---@field glBindFramebuffer any
---@field glBindRenderbuffer any
---@field glBindSampler any
---@field glBindTexture any
---@field glBindVertexArray any
---@field glBitmap any
---@field glBlendColor any
---@field glBlendEquation any
---@field glBlendEquationSeparate any
---@field glBlendFunc any
---@field glBlendFuncSeparate any
---@field glBlitFramebuffer any
---@field glBufferData any
---@field glBufferSubData any
---@field glCallList any
---@field glCallLists any
---@field glCheckFramebufferStatus any
---@field glClampColor any
---@field glClear any
---@field glClearAccum any
---@field glClearBufferfi any
---@field glClearBufferfv any
---@field glClearBufferiv any
---@field glClearBufferuiv any
---@field glClearColor any
---@field glClearDepth any
---@field glClearIndex any
---@field glClearStencil any
---@field glClientActiveTexture any
---@field glClientWaitSync any
---@field glClipPlane any
---@field glColor3b any
---@field glColor3bv any
---@field glColor3d any
---@field glColor3dv any
---@field glColor3f any
---@field glColor3fv any
---@field glColor3i any
---@field glColor3iv any
---@field glColor3s any
---@field glColor3sv any
---@field glColor3ub any
---@field glColor3ubv any
---@field glColor3ui any
---@field glColor3uiv any
---@field glColor3us any
---@field glColor3usv any
---@field glColor4b any
---@field glColor4bv any
---@field glColor4d any
---@field glColor4dv any
---@field glColor4f any
---@field glColor4fv any
---@field glColor4i any
---@field glColor4iv any
---@field glColor4s any
---@field glColor4sv any
---@field glColor4ub any
---@field glColor4ubv any
---@field glColor4ui any
---@field glColor4uiv any
---@field glColor4us any
---@field glColor4usv any
---@field glColorMask any
---@field glColorMaski any
---@field glColorMaterial any
---@field glColorP3ui any
---@field glColorP3uiv any
---@field glColorP4ui any
---@field glColorP4uiv any
---@field glColorPointer any
---@field glCompileShader any
---@field glCompressedTexImage1D any
---@field glCompressedTexImage2D any
---@field glCompressedTexImage3D any
---@field glCompressedTexSubImage1D any
---@field glCompressedTexSubImage2D any
---@field glCompressedTexSubImage3D any
---@field glCopyBufferSubData any
---@field glCopyPixels any
---@field glCopyTexImage1D any
---@field glCopyTexImage2D any
---@field glCopyTexSubImage1D any
---@field glCopyTexSubImage2D any
---@field glCopyTexSubImage3D any
---@field glCreateProgram any
---@field glCreateShader any
---@field glCullFace any
---@field glDebugMessageCallback any
---@field glDebugMessageControl any
---@field glDebugMessageInsert any
---@field glDeleteBuffers any
---@field glDeleteFramebuffers any
---@field glDeleteLists any
---@field glDeleteProgram any
---@field glDeleteQueries any
---@field glDeleteRenderbuffers any
---@field glDeleteSamplers any
---@field glDeleteShader any
---@field glDeleteSync any
---@field glDeleteTextures any
---@field glDeleteVertexArrays any
---@field glDepthFunc any
---@field glDepthMask any
---@field glDepthRange any
---@field glDetachShader any
---@field glDisable any
---@field glDisableClientState any
---@field glDisableVertexAttribArray any
---@field glDisablei any
---@field glDrawArrays any
---@field glDrawArraysInstanced any
---@field glDrawBuffer any
---@field glDrawBuffers any
---@field glDrawElements any
---@field glDrawElementsBaseVertex any
---@field glDrawElementsInstanced any
---@field glDrawElementsInstancedBaseVertex any
---@field glDrawPixels any
---@field glDrawRangeElements any
---@field glDrawRangeElementsBaseVertex any
---@field glEdgeFlag any
---@field glEdgeFlagPointer any
---@field glEdgeFlagv any
---@field glEnable any
---@field glEnableClientState any
---@field glEnableVertexAttribArray any
---@field glEnablei any
---@field glEnd any
---@field glEndConditionalRender any
---@field glEndList any
---@field glEndQuery any
---@field glEndTransformFeedback any
---@field glEvalCoord1d any
---@field glEvalCoord1dv any
---@field glEvalCoord1f any
---@field glEvalCoord1fv any
---@field glEvalCoord2d any
---@field glEvalCoord2dv any
---@field glEvalCoord2f any
---@field glEvalCoord2fv any
---@field glEvalMesh1 any
---@field glEvalMesh2 any
---@field glEvalPoint1 any
---@field glEvalPoint2 any
---@field glFeedbackBuffer any
---@field glFenceSync any
---@field glFinish any
---@field glFlush any
---@field glFlushMappedBufferRange any
---@field glFogCoordPointer any
---@field glFogCoordd any
---@field glFogCoorddv any
---@field glFogCoordf any
---@field glFogCoordfv any
---@field glFogf any
---@field glFogfv any
---@field glFogi any
---@field glFogiv any
---@field glFramebufferRenderbuffer any
---@field glFramebufferTexture any
---@field glFramebufferTexture1D any
---@field glFramebufferTexture2D any
---@field glFramebufferTexture3D any
---@field glFramebufferTextureLayer any
---@field glFrontFace any
---@field glFrustum any
---@field glGenBuffers any
---@field glGenFramebuffers any
---@field glGenLists any
---@field glGenQueries any
---@field glGenRenderbuffers any
---@field glGenSamplers any
---@field glGenTextures any
---@field glGenVertexArrays any
---@field glGenerateMipmap any
---@field glGetActiveAttrib any
---@field glGetActiveUniform any
---@field glGetActiveUniformBlockName any
---@field glGetActiveUniformBlockiv any
---@field glGetActiveUniformName any
---@field glGetActiveUniformsiv any
---@field glGetAttachedShaders any
---@field glGetAttribLocation any
---@field glGetBooleani_v any
---@field glGetBooleanv any
---@field glGetBufferParameteri64v any
---@field glGetBufferParameteriv any
---@field glGetBufferPointerv any
---@field glGetBufferSubData any
---@field glGetClipPlane any
---@field glGetCompressedTexImage any
---@field glGetDebugMessageLog any
---@field glGetDoublev any
---@field glGetError any
---@field glGetFloatv any
---@field glGetFragDataIndex any
---@field glGetFragDataLocation any
---@field glGetFramebufferAttachmentParameteriv any
---@field glGetGraphicsResetStatusARB any
---@field glGetInteger64i_v any
---@field glGetInteger64v any
---@field glGetIntegeri_v any
---@field glGetIntegerv any
---@field glGetLightfv any
---@field glGetLightiv any
---@field glGetMapdv any
---@field glGetMapfv any
---@field glGetMapiv any
---@field glGetMaterialfv any
---@field glGetMaterialiv any
---@field glGetMultisamplefv any
---@field glGetObjectLabel any
---@field glGetObjectPtrLabel any
---@field glGetPixelMapfv any
---@field glGetPixelMapuiv any
---@field glGetPixelMapusv any
---@field glGetPointerv any
---@field glGetPolygonStipple any
---@field glGetProgramInfoLog any
---@field glGetProgramiv any
---@field glGetQueryObjecti64v any
---@field glGetQueryObjectiv any
---@field glGetQueryObjectui64v any
---@field glGetQueryObjectuiv any
---@field glGetQueryiv any
---@field glGetRenderbufferParameteriv any
---@field glGetSamplerParameterIiv any
---@field glGetSamplerParameterIuiv any
---@field glGetSamplerParameterfv any
---@field glGetSamplerParameteriv any
---@field glGetShaderInfoLog any
---@field glGetShaderSource any
---@field glGetShaderiv any
---@field glGetString any
---@field glGetStringi any
---@field glGetSynciv any
---@field glGetTexEnvfv any
---@field glGetTexEnviv any
---@field glGetTexGendv any
---@field glGetTexGenfv any
---@field glGetTexGeniv any
---@field glGetTexImage any
---@field glGetTexLevelParameterfv any
---@field glGetTexLevelParameteriv any
---@field glGetTexParameterIiv any
---@field glGetTexParameterIuiv any
---@field glGetTexParameterfv any
---@field glGetTexParameteriv any
---@field glGetTransformFeedbackVarying any
---@field glGetUniformBlockIndex any
---@field glGetUniformIndices any
---@field glGetUniformLocation any
---@field glGetUniformfv any
---@field glGetUniformiv any
---@field glGetUniformuiv any
---@field glGetVertexAttribIiv any
---@field glGetVertexAttribIuiv any
---@field glGetVertexAttribPointerv any
---@field glGetVertexAttribdv any
---@field glGetVertexAttribfv any
---@field glGetVertexAttribiv any
---@field glGetnColorTableARB any
---@field glGetnCompressedTexImageARB any
---@field glGetnConvolutionFilterARB any
---@field glGetnHistogramARB any
---@field glGetnMapdvARB any
---@field glGetnMapfvARB any
---@field glGetnMapivARB any
---@field glGetnMinmaxARB any
---@field glGetnPixelMapfvARB any
---@field glGetnPixelMapuivARB any
---@field glGetnPixelMapusvARB any
---@field glGetnPolygonStippleARB any
---@field glGetnSeparableFilterARB any
---@field glGetnTexImageARB any
---@field glGetnUniformdvARB any
---@field glGetnUniformfvARB any
---@field glGetnUniformivARB any
---@field glGetnUniformuivARB any
---@field glHint any
---@field glIndexMask any
---@field glIndexPointer any
---@field glIndexd any
---@field glIndexdv any
---@field glIndexf any
---@field glIndexfv any
---@field glIndexi any
---@field glIndexiv any
---@field glIndexs any
---@field glIndexsv any
---@field glIndexub any
---@field glIndexubv any
---@field glInitNames any
---@field glInterleavedArrays any
---@field glIsBuffer any
---@field glIsEnabled any
---@field glIsEnabledi any
---@field glIsFramebuffer any
---@field glIsList any
---@field glIsProgram any
---@field glIsQuery any
---@field glIsRenderbuffer any
---@field glIsSampler any
---@field glIsShader any
---@field glIsSync any
---@field glIsTexture any
---@field glIsVertexArray any
---@field glLightModelf any
---@field glLightModelfv any
---@field glLightModeli any
---@field glLightModeliv any
---@field glLightf any
---@field glLightfv any
---@field glLighti any
---@field glLightiv any
---@field glLineStipple any
---@field glLineWidth any
---@field glLinkProgram any
---@field glListBase any
---@field glLoadIdentity any
---@field glLoadMatrixd any
---@field glLoadMatrixf any
---@field glLoadName any
---@field glLoadTransposeMatrixd any
---@field glLoadTransposeMatrixf any
---@field glLogicOp any
---@field glMap1d any
---@field glMap1f any
---@field glMap2d any
---@field glMap2f any
---@field glMapBuffer any
---@field glMapBufferRange any
---@field glMapGrid1d any
---@field glMapGrid1f any
---@field glMapGrid2d any
---@field glMapGrid2f any
---@field glMaterialf any
---@field glMaterialfv any
---@field glMateriali any
---@field glMaterialiv any
---@field glMatrixMode any
---@field glMultMatrixd any
---@field glMultMatrixf any
---@field glMultTransposeMatrixd any
---@field glMultTransposeMatrixf any
---@field glMultiDrawArrays any
---@field glMultiDrawElements any
---@field glMultiDrawElementsBaseVertex any
---@field glMultiTexCoord1d any
---@field glMultiTexCoord1dv any
---@field glMultiTexCoord1f any
---@field glMultiTexCoord1fv any
---@field glMultiTexCoord1i any
---@field glMultiTexCoord1iv any
---@field glMultiTexCoord1s any
---@field glMultiTexCoord1sv any
---@field glMultiTexCoord2d any
---@field glMultiTexCoord2dv any
---@field glMultiTexCoord2f any
---@field glMultiTexCoord2fv any
---@field glMultiTexCoord2i any
---@field glMultiTexCoord2iv any
---@field glMultiTexCoord2s any
---@field glMultiTexCoord2sv any
---@field glMultiTexCoord3d any
---@field glMultiTexCoord3dv any
---@field glMultiTexCoord3f any
---@field glMultiTexCoord3fv any
---@field glMultiTexCoord3i any
---@field glMultiTexCoord3iv any
---@field glMultiTexCoord3s any
---@field glMultiTexCoord3sv any
---@field glMultiTexCoord4d any
---@field glMultiTexCoord4dv any
---@field glMultiTexCoord4f any
---@field glMultiTexCoord4fv any
---@field glMultiTexCoord4i any
---@field glMultiTexCoord4iv any
---@field glMultiTexCoord4s any
---@field glMultiTexCoord4sv any
---@field glMultiTexCoordP1ui any
---@field glMultiTexCoordP1uiv any
---@field glMultiTexCoordP2ui any
---@field glMultiTexCoordP2uiv any
---@field glMultiTexCoordP3ui any
---@field glMultiTexCoordP3uiv any
---@field glMultiTexCoordP4ui any
---@field glMultiTexCoordP4uiv any
---@field glNewList any
---@field glNormal3b any
---@field glNormal3bv any
---@field glNormal3d any
---@field glNormal3dv any
---@field glNormal3f any
---@field glNormal3fv any
---@field glNormal3i any
---@field glNormal3iv any
---@field glNormal3s any
---@field glNormal3sv any
---@field glNormalP3ui any
---@field glNormalP3uiv any
---@field glNormalPointer any
---@field glObjectLabel any
---@field glObjectPtrLabel any
---@field glOrtho any
---@field glPassThrough any
---@field glPixelMapfv any
---@field glPixelMapuiv any
---@field glPixelMapusv any
---@field glPixelStoref any
---@field glPixelStorei any
---@field glPixelTransferf any
---@field glPixelTransferi any
---@field glPixelZoom any
---@field glPointParameterf any
---@field glPointParameterfv any
---@field glPointParameteri any
---@field glPointParameteriv any
---@field glPointSize any
---@field glPolygonMode any
---@field glPolygonOffset any
---@field glPolygonStipple any
---@field glPopAttrib any
---@field glPopClientAttrib any
---@field glPopDebugGroup any
---@field glPopMatrix any
---@field glPopName any
---@field glPrimitiveRestartIndex any
---@field glPrioritizeTextures any
---@field glProvokingVertex any
---@field glPushAttrib any
---@field glPushClientAttrib any
---@field glPushDebugGroup any
---@field glPushMatrix any
---@field glPushName any
---@field glQueryCounter any
---@field glRasterPos2d any
---@field glRasterPos2dv any
---@field glRasterPos2f any
---@field glRasterPos2fv any
---@field glRasterPos2i any
---@field glRasterPos2iv any
---@field glRasterPos2s any
---@field glRasterPos2sv any
---@field glRasterPos3d any
---@field glRasterPos3dv any
---@field glRasterPos3f any
---@field glRasterPos3fv any
---@field glRasterPos3i any
---@field glRasterPos3iv any
---@field glRasterPos3s any
---@field glRasterPos3sv any
---@field glRasterPos4d any
---@field glRasterPos4dv any
---@field glRasterPos4f any
---@field glRasterPos4fv any
---@field glRasterPos4i any
---@field glRasterPos4iv any
---@field glRasterPos4s any
---@field glRasterPos4sv any
---@field glReadBuffer any
---@field glReadPixels any
---@field glReadnPixels any
---@field glReadnPixelsARB any
---@field glRectd any
---@field glRectdv any
---@field glRectf any
---@field glRectfv any
---@field glRecti any
---@field glRectiv any
---@field glRects any
---@field glRectsv any
---@field glRenderMode any
---@field glRenderbufferStorage any
---@field glRenderbufferStorageMultisample any
---@field glRotated any
---@field glRotatef any
---@field glSampleCoverage any
---@field glSampleCoverageARB any
---@field glSampleMaski any
---@field glSamplerParameterIiv any
---@field glSamplerParameterIuiv any
---@field glSamplerParameterf any
---@field glSamplerParameterfv any
---@field glSamplerParameteri any
---@field glSamplerParameteriv any
---@field glScaled any
---@field glScalef any
---@field glScissor any
---@field glSecondaryColor3b any
---@field glSecondaryColor3bv any
---@field glSecondaryColor3d any
---@field glSecondaryColor3dv any
---@field glSecondaryColor3f any
---@field glSecondaryColor3fv any
---@field glSecondaryColor3i any
---@field glSecondaryColor3iv any
---@field glSecondaryColor3s any
---@field glSecondaryColor3sv any
---@field glSecondaryColor3ub any
---@field glSecondaryColor3ubv any
---@field glSecondaryColor3ui any
---@field glSecondaryColor3uiv any
---@field glSecondaryColor3us any
---@field glSecondaryColor3usv any
---@field glSecondaryColorP3ui any
---@field glSecondaryColorP3uiv any
---@field glSecondaryColorPointer any
---@field glSelectBuffer any
---@field glShadeModel any
---@field glShaderSource any
---@field glStencilFunc any
---@field glStencilFuncSeparate any
---@field glStencilMask any
---@field glStencilMaskSeparate any
---@field glStencilOp any
---@field glStencilOpSeparate any
---@field glTexBuffer any
---@field glTexCoord1d any
---@field glTexCoord1dv any
---@field glTexCoord1f any
---@field glTexCoord1fv any
---@field glTexCoord1i any
---@field glTexCoord1iv any
---@field glTexCoord1s any
---@field glTexCoord1sv any
---@field glTexCoord2d any
---@field glTexCoord2dv any
---@field glTexCoord2f any
---@field glTexCoord2fv any
---@field glTexCoord2i any
---@field glTexCoord2iv any
---@field glTexCoord2s any
---@field glTexCoord2sv any
---@field glTexCoord3d any
---@field glTexCoord3dv any
---@field glTexCoord3f any
---@field glTexCoord3fv any
---@field glTexCoord3i any
---@field glTexCoord3iv any
---@field glTexCoord3s any
---@field glTexCoord3sv any
---@field glTexCoord4d any
---@field glTexCoord4dv any
---@field glTexCoord4f any
---@field glTexCoord4fv any
---@field glTexCoord4i any
---@field glTexCoord4iv any
---@field glTexCoord4s any
---@field glTexCoord4sv any
---@field glTexCoordP1ui any
---@field glTexCoordP1uiv any
---@field glTexCoordP2ui any
---@field glTexCoordP2uiv any
---@field glTexCoordP3ui any
---@field glTexCoordP3uiv any
---@field glTexCoordP4ui any
---@field glTexCoordP4uiv any
---@field glTexCoordPointer any
---@field glTexEnvf any
---@field glTexEnvfv any
---@field glTexEnvi any
---@field glTexEnviv any
---@field glTexGend any
---@field glTexGendv any
---@field glTexGenf any
---@field glTexGenfv any
---@field glTexGeni any
---@field glTexGeniv any
---@field glTexImage1D any
---@field glTexImage2D any
---@field glTexImage2DMultisample any
---@field glTexImage3D any
---@field glTexImage3DMultisample any
---@field glTexParameterIiv any
---@field glTexParameterIuiv any
---@field glTexParameterf any
---@field glTexParameterfv any
---@field glTexParameteri any
---@field glTexParameteriv any
---@field glTexSubImage1D any
---@field glTexSubImage2D any
---@field glTexSubImage3D any
---@field glTransformFeedbackVaryings any
---@field glTranslated any
---@field glTranslatef any
---@field glUniform1f any
---@field glUniform1fv any
---@field glUniform1i any
---@field glUniform1iv any
---@field glUniform1ui any
---@field glUniform1uiv any
---@field glUniform2f any
---@field glUniform2fv any
---@field glUniform2i any
---@field glUniform2iv any
---@field glUniform2ui any
---@field glUniform2uiv any
---@field glUniform3f any
---@field glUniform3fv any
---@field glUniform3i any
---@field glUniform3iv any
---@field glUniform3ui any
---@field glUniform3uiv any
---@field glUniform4f any
---@field glUniform4fv any
---@field glUniform4i any
---@field glUniform4iv any
---@field glUniform4ui any
---@field glUniform4uiv any
---@field glUniformBlockBinding any
---@field glUniformMatrix2fv any
---@field glUniformMatrix2x3fv any
---@field glUniformMatrix2x4fv any
---@field glUniformMatrix3fv any
---@field glUniformMatrix3x2fv any
---@field glUniformMatrix3x4fv any
---@field glUniformMatrix4fv any
---@field glUniformMatrix4x2fv any
---@field glUniformMatrix4x3fv any
---@field glUnmapBuffer any
---@field glUseProgram any
---@field glValidateProgram any
---@field glVertex2d any
---@field glVertex2dv any
---@field glVertex2f any
---@field glVertex2fv any
---@field glVertex2i any
---@field glVertex2iv any
---@field glVertex2s any
---@field glVertex2sv any
---@field glVertex3d any
---@field glVertex3dv any
---@field glVertex3f any
---@field glVertex3fv any
---@field glVertex3i any
---@field glVertex3iv any
---@field glVertex3s any
---@field glVertex3sv any
---@field glVertex4d any
---@field glVertex4dv any
---@field glVertex4f any
---@field glVertex4fv any
---@field glVertex4i any
---@field glVertex4iv any
---@field glVertex4s any
---@field glVertex4sv any
---@field glVertexAttrib1d any
---@field glVertexAttrib1dv any
---@field glVertexAttrib1f any
---@field glVertexAttrib1fv any
---@field glVertexAttrib1s any
---@field glVertexAttrib1sv any
---@field glVertexAttrib2d any
---@field glVertexAttrib2dv any
---@field glVertexAttrib2f any
---@field glVertexAttrib2fv any
---@field glVertexAttrib2s any
---@field glVertexAttrib2sv any
---@field glVertexAttrib3d any
---@field glVertexAttrib3dv any
---@field glVertexAttrib3f any
---@field glVertexAttrib3fv any
---@field glVertexAttrib3s any
---@field glVertexAttrib3sv any
---@field glVertexAttrib4Nbv any
---@field glVertexAttrib4Niv any
---@field glVertexAttrib4Nsv any
---@field glVertexAttrib4Nub any
---@field glVertexAttrib4Nubv any
---@field glVertexAttrib4Nuiv any
---@field glVertexAttrib4Nusv any
---@field glVertexAttrib4bv any
---@field glVertexAttrib4d any
---@field glVertexAttrib4dv any
---@field glVertexAttrib4f any
---@field glVertexAttrib4fv any
---@field glVertexAttrib4iv any
---@field glVertexAttrib4s any
---@field glVertexAttrib4sv any
---@field glVertexAttrib4ubv any
---@field glVertexAttrib4uiv any
---@field glVertexAttrib4usv any
---@field glVertexAttribDivisor any
---@field glVertexAttribI1i any
---@field glVertexAttribI1iv any
---@field glVertexAttribI1ui any
---@field glVertexAttribI1uiv any
---@field glVertexAttribI2i any
---@field glVertexAttribI2iv any
---@field glVertexAttribI2ui any
---@field glVertexAttribI2uiv any
---@field glVertexAttribI3i any
---@field glVertexAttribI3iv any
---@field glVertexAttribI3ui any
---@field glVertexAttribI3uiv any
---@field glVertexAttribI4bv any
---@field glVertexAttribI4i any
---@field glVertexAttribI4iv any
---@field glVertexAttribI4sv any
---@field glVertexAttribI4ubv any
---@field glVertexAttribI4ui any
---@field glVertexAttribI4uiv any
---@field glVertexAttribI4usv any
---@field glVertexAttribIPointer any
---@field glVertexAttribP1ui any
---@field glVertexAttribP1uiv any
---@field glVertexAttribP2ui any
---@field glVertexAttribP2uiv any
---@field glVertexAttribP3ui any
---@field glVertexAttribP3uiv any
---@field glVertexAttribP4ui any
---@field glVertexAttribP4uiv any
---@field glVertexAttribPointer any
---@field glVertexP2ui any
---@field glVertexP2uiv any
---@field glVertexP3ui any
---@field glVertexP3uiv any
---@field glVertexP4ui any
---@field glVertexP4uiv any
---@field glVertexPointer any
---@field glViewport any
---@field glWaitSync any
---@field glWindowPos2d any
---@field glWindowPos2dv any
---@field glWindowPos2f any
---@field glWindowPos2fv any
---@field glWindowPos2i any
---@field glWindowPos2iv any
---@field glWindowPos2s any
---@field glWindowPos2sv any
---@field glWindowPos3d any
---@field glWindowPos3dv any
---@field glWindowPos3f any
---@field glWindowPos3fv any
---@field glWindowPos3i any
---@field glWindowPos3iv any
---@field glWindowPos3s any
---@field glWindowPos3sv any

local M = {}
M.GL_2D = ffi.C.GL_2D
M.GL_2_BYTES = ffi.C.GL_2_BYTES
M.GL_3D = ffi.C.GL_3D
M.GL_3D_COLOR = ffi.C.GL_3D_COLOR
M.GL_3D_COLOR_TEXTURE = ffi.C.GL_3D_COLOR_TEXTURE
M.GL_3_BYTES = ffi.C.GL_3_BYTES
M.GL_4D_COLOR_TEXTURE = ffi.C.GL_4D_COLOR_TEXTURE
M.GL_4_BYTES = ffi.C.GL_4_BYTES
M.GL_ACCUM = ffi.C.GL_ACCUM
M.GL_ACCUM_ALPHA_BITS = ffi.C.GL_ACCUM_ALPHA_BITS
M.GL_ACCUM_BLUE_BITS = ffi.C.GL_ACCUM_BLUE_BITS
M.GL_ACCUM_BUFFER_BIT = ffi.C.GL_ACCUM_BUFFER_BIT
M.GL_ACCUM_CLEAR_VALUE = ffi.C.GL_ACCUM_CLEAR_VALUE
M.GL_ACCUM_GREEN_BITS = ffi.C.GL_ACCUM_GREEN_BITS
M.GL_ACCUM_RED_BITS = ffi.C.GL_ACCUM_RED_BITS
M.GL_ACTIVE_ATTRIBUTES = ffi.C.GL_ACTIVE_ATTRIBUTES
M.GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = ffi.C.GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
M.GL_ACTIVE_TEXTURE = ffi.C.GL_ACTIVE_TEXTURE
M.GL_ACTIVE_UNIFORMS = ffi.C.GL_ACTIVE_UNIFORMS
M.GL_ACTIVE_UNIFORM_BLOCKS = ffi.C.GL_ACTIVE_UNIFORM_BLOCKS
M.GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = ffi.C.GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
M.GL_ACTIVE_UNIFORM_MAX_LENGTH = ffi.C.GL_ACTIVE_UNIFORM_MAX_LENGTH
M.GL_ADD = ffi.C.GL_ADD
M.GL_ADD_SIGNED = ffi.C.GL_ADD_SIGNED
M.GL_ALIASED_LINE_WIDTH_RANGE = ffi.C.GL_ALIASED_LINE_WIDTH_RANGE
M.GL_ALIASED_POINT_SIZE_RANGE = ffi.C.GL_ALIASED_POINT_SIZE_RANGE
M.GL_ALL_ATTRIB_BITS = ffi.C.GL_ALL_ATTRIB_BITS
M.GL_ALPHA = ffi.C.GL_ALPHA
M.GL_ALPHA12 = ffi.C.GL_ALPHA12
M.GL_ALPHA16 = ffi.C.GL_ALPHA16
M.GL_ALPHA4 = ffi.C.GL_ALPHA4
M.GL_ALPHA8 = ffi.C.GL_ALPHA8
M.GL_ALPHA_BIAS = ffi.C.GL_ALPHA_BIAS
M.GL_ALPHA_BITS = ffi.C.GL_ALPHA_BITS
M.GL_ALPHA_INTEGER = ffi.C.GL_ALPHA_INTEGER
M.GL_ALPHA_SCALE = ffi.C.GL_ALPHA_SCALE
M.GL_ALPHA_TEST = ffi.C.GL_ALPHA_TEST
M.GL_ALPHA_TEST_FUNC = ffi.C.GL_ALPHA_TEST_FUNC
M.GL_ALPHA_TEST_REF = ffi.C.GL_ALPHA_TEST_REF
M.GL_ALREADY_SIGNALED = ffi.C.GL_ALREADY_SIGNALED
M.GL_ALWAYS = ffi.C.GL_ALWAYS
M.GL_AMBIENT = ffi.C.GL_AMBIENT
M.GL_AMBIENT_AND_DIFFUSE = ffi.C.GL_AMBIENT_AND_DIFFUSE
M.GL_AND = ffi.C.GL_AND
M.GL_AND_INVERTED = ffi.C.GL_AND_INVERTED
M.GL_AND_REVERSE = ffi.C.GL_AND_REVERSE
M.GL_ANY_SAMPLES_PASSED = ffi.C.GL_ANY_SAMPLES_PASSED
M.GL_ARRAY_BUFFER = ffi.C.GL_ARRAY_BUFFER
M.GL_ARRAY_BUFFER_BINDING = ffi.C.GL_ARRAY_BUFFER_BINDING
M.GL_ATTACHED_SHADERS = ffi.C.GL_ATTACHED_SHADERS
M.GL_ATTRIB_STACK_DEPTH = ffi.C.GL_ATTRIB_STACK_DEPTH
M.GL_AUTO_NORMAL = ffi.C.GL_AUTO_NORMAL
M.GL_AUX0 = ffi.C.GL_AUX0
M.GL_AUX1 = ffi.C.GL_AUX1
M.GL_AUX2 = ffi.C.GL_AUX2
M.GL_AUX3 = ffi.C.GL_AUX3
M.GL_AUX_BUFFERS = ffi.C.GL_AUX_BUFFERS
M.GL_BACK = ffi.C.GL_BACK
M.GL_BACK_LEFT = ffi.C.GL_BACK_LEFT
M.GL_BACK_RIGHT = ffi.C.GL_BACK_RIGHT
M.GL_BGR = ffi.C.GL_BGR
M.GL_BGRA = ffi.C.GL_BGRA
M.GL_BGRA_INTEGER = ffi.C.GL_BGRA_INTEGER
M.GL_BGR_INTEGER = ffi.C.GL_BGR_INTEGER
M.GL_BITMAP = ffi.C.GL_BITMAP
M.GL_BITMAP_TOKEN = ffi.C.GL_BITMAP_TOKEN
M.GL_BLEND = ffi.C.GL_BLEND
M.GL_BLEND_COLOR = ffi.C.GL_BLEND_COLOR
M.GL_BLEND_DST = ffi.C.GL_BLEND_DST
M.GL_BLEND_DST_ALPHA = ffi.C.GL_BLEND_DST_ALPHA
M.GL_BLEND_DST_RGB = ffi.C.GL_BLEND_DST_RGB
M.GL_BLEND_EQUATION = ffi.C.GL_BLEND_EQUATION
M.GL_BLEND_EQUATION_ALPHA = ffi.C.GL_BLEND_EQUATION_ALPHA
M.GL_BLEND_EQUATION_RGB = ffi.C.GL_BLEND_EQUATION_RGB
M.GL_BLEND_SRC = ffi.C.GL_BLEND_SRC
M.GL_BLEND_SRC_ALPHA = ffi.C.GL_BLEND_SRC_ALPHA
M.GL_BLEND_SRC_RGB = ffi.C.GL_BLEND_SRC_RGB
M.GL_BLUE = ffi.C.GL_BLUE
M.GL_BLUE_BIAS = ffi.C.GL_BLUE_BIAS
M.GL_BLUE_BITS = ffi.C.GL_BLUE_BITS
M.GL_BLUE_INTEGER = ffi.C.GL_BLUE_INTEGER
M.GL_BLUE_SCALE = ffi.C.GL_BLUE_SCALE
M.GL_BOOL = ffi.C.GL_BOOL
M.GL_BOOL_VEC2 = ffi.C.GL_BOOL_VEC2
M.GL_BOOL_VEC3 = ffi.C.GL_BOOL_VEC3
M.GL_BOOL_VEC4 = ffi.C.GL_BOOL_VEC4
M.GL_BUFFER = ffi.C.GL_BUFFER
M.GL_BUFFER_ACCESS = ffi.C.GL_BUFFER_ACCESS
M.GL_BUFFER_ACCESS_FLAGS = ffi.C.GL_BUFFER_ACCESS_FLAGS
M.GL_BUFFER_MAPPED = ffi.C.GL_BUFFER_MAPPED
M.GL_BUFFER_MAP_LENGTH = ffi.C.GL_BUFFER_MAP_LENGTH
M.GL_BUFFER_MAP_OFFSET = ffi.C.GL_BUFFER_MAP_OFFSET
M.GL_BUFFER_MAP_POINTER = ffi.C.GL_BUFFER_MAP_POINTER
M.GL_BUFFER_SIZE = ffi.C.GL_BUFFER_SIZE
M.GL_BUFFER_USAGE = ffi.C.GL_BUFFER_USAGE
M.GL_BYTE = ffi.C.GL_BYTE
M.GL_C3F_V3F = ffi.C.GL_C3F_V3F
M.GL_C4F_N3F_V3F = ffi.C.GL_C4F_N3F_V3F
M.GL_C4UB_V2F = ffi.C.GL_C4UB_V2F
M.GL_C4UB_V3F = ffi.C.GL_C4UB_V3F
M.GL_CCW = ffi.C.GL_CCW
M.GL_CLAMP = ffi.C.GL_CLAMP
M.GL_CLAMP_FRAGMENT_COLOR = ffi.C.GL_CLAMP_FRAGMENT_COLOR
M.GL_CLAMP_READ_COLOR = ffi.C.GL_CLAMP_READ_COLOR
M.GL_CLAMP_TO_BORDER = ffi.C.GL_CLAMP_TO_BORDER
M.GL_CLAMP_TO_EDGE = ffi.C.GL_CLAMP_TO_EDGE
M.GL_CLAMP_VERTEX_COLOR = ffi.C.GL_CLAMP_VERTEX_COLOR
M.GL_CLEAR = ffi.C.GL_CLEAR
M.GL_CLIENT_ACTIVE_TEXTURE = ffi.C.GL_CLIENT_ACTIVE_TEXTURE
M.GL_CLIENT_ALL_ATTRIB_BITS = ffi.C.GL_CLIENT_ALL_ATTRIB_BITS
M.GL_CLIENT_ATTRIB_STACK_DEPTH = ffi.C.GL_CLIENT_ATTRIB_STACK_DEPTH
M.GL_CLIENT_PIXEL_STORE_BIT = ffi.C.GL_CLIENT_PIXEL_STORE_BIT
M.GL_CLIENT_VERTEX_ARRAY_BIT = ffi.C.GL_CLIENT_VERTEX_ARRAY_BIT
M.GL_CLIP_DISTANCE0 = ffi.C.GL_CLIP_DISTANCE0
M.GL_CLIP_DISTANCE1 = ffi.C.GL_CLIP_DISTANCE1
M.GL_CLIP_DISTANCE2 = ffi.C.GL_CLIP_DISTANCE2
M.GL_CLIP_DISTANCE3 = ffi.C.GL_CLIP_DISTANCE3
M.GL_CLIP_DISTANCE4 = ffi.C.GL_CLIP_DISTANCE4
M.GL_CLIP_DISTANCE5 = ffi.C.GL_CLIP_DISTANCE5
M.GL_CLIP_DISTANCE6 = ffi.C.GL_CLIP_DISTANCE6
M.GL_CLIP_DISTANCE7 = ffi.C.GL_CLIP_DISTANCE7
M.GL_CLIP_PLANE0 = ffi.C.GL_CLIP_PLANE0
M.GL_CLIP_PLANE1 = ffi.C.GL_CLIP_PLANE1
M.GL_CLIP_PLANE2 = ffi.C.GL_CLIP_PLANE2
M.GL_CLIP_PLANE3 = ffi.C.GL_CLIP_PLANE3
M.GL_CLIP_PLANE4 = ffi.C.GL_CLIP_PLANE4
M.GL_CLIP_PLANE5 = ffi.C.GL_CLIP_PLANE5
M.GL_COEFF = ffi.C.GL_COEFF
M.GL_COLOR = ffi.C.GL_COLOR
M.GL_COLOR_ARRAY = ffi.C.GL_COLOR_ARRAY
M.GL_COLOR_ARRAY_BUFFER_BINDING = ffi.C.GL_COLOR_ARRAY_BUFFER_BINDING
M.GL_COLOR_ARRAY_POINTER = ffi.C.GL_COLOR_ARRAY_POINTER
M.GL_COLOR_ARRAY_SIZE = ffi.C.GL_COLOR_ARRAY_SIZE
M.GL_COLOR_ARRAY_STRIDE = ffi.C.GL_COLOR_ARRAY_STRIDE
M.GL_COLOR_ARRAY_TYPE = ffi.C.GL_COLOR_ARRAY_TYPE
M.GL_COLOR_ATTACHMENT0 = ffi.C.GL_COLOR_ATTACHMENT0
M.GL_COLOR_ATTACHMENT1 = ffi.C.GL_COLOR_ATTACHMENT1
M.GL_COLOR_ATTACHMENT10 = ffi.C.GL_COLOR_ATTACHMENT10
M.GL_COLOR_ATTACHMENT11 = ffi.C.GL_COLOR_ATTACHMENT11
M.GL_COLOR_ATTACHMENT12 = ffi.C.GL_COLOR_ATTACHMENT12
M.GL_COLOR_ATTACHMENT13 = ffi.C.GL_COLOR_ATTACHMENT13
M.GL_COLOR_ATTACHMENT14 = ffi.C.GL_COLOR_ATTACHMENT14
M.GL_COLOR_ATTACHMENT15 = ffi.C.GL_COLOR_ATTACHMENT15
M.GL_COLOR_ATTACHMENT16 = ffi.C.GL_COLOR_ATTACHMENT16
M.GL_COLOR_ATTACHMENT17 = ffi.C.GL_COLOR_ATTACHMENT17
M.GL_COLOR_ATTACHMENT18 = ffi.C.GL_COLOR_ATTACHMENT18
M.GL_COLOR_ATTACHMENT19 = ffi.C.GL_COLOR_ATTACHMENT19
M.GL_COLOR_ATTACHMENT2 = ffi.C.GL_COLOR_ATTACHMENT2
M.GL_COLOR_ATTACHMENT20 = ffi.C.GL_COLOR_ATTACHMENT20
M.GL_COLOR_ATTACHMENT21 = ffi.C.GL_COLOR_ATTACHMENT21
M.GL_COLOR_ATTACHMENT22 = ffi.C.GL_COLOR_ATTACHMENT22
M.GL_COLOR_ATTACHMENT23 = ffi.C.GL_COLOR_ATTACHMENT23
M.GL_COLOR_ATTACHMENT24 = ffi.C.GL_COLOR_ATTACHMENT24
M.GL_COLOR_ATTACHMENT25 = ffi.C.GL_COLOR_ATTACHMENT25
M.GL_COLOR_ATTACHMENT26 = ffi.C.GL_COLOR_ATTACHMENT26
M.GL_COLOR_ATTACHMENT27 = ffi.C.GL_COLOR_ATTACHMENT27
M.GL_COLOR_ATTACHMENT28 = ffi.C.GL_COLOR_ATTACHMENT28
M.GL_COLOR_ATTACHMENT29 = ffi.C.GL_COLOR_ATTACHMENT29
M.GL_COLOR_ATTACHMENT3 = ffi.C.GL_COLOR_ATTACHMENT3
M.GL_COLOR_ATTACHMENT30 = ffi.C.GL_COLOR_ATTACHMENT30
M.GL_COLOR_ATTACHMENT31 = ffi.C.GL_COLOR_ATTACHMENT31
M.GL_COLOR_ATTACHMENT4 = ffi.C.GL_COLOR_ATTACHMENT4
M.GL_COLOR_ATTACHMENT5 = ffi.C.GL_COLOR_ATTACHMENT5
M.GL_COLOR_ATTACHMENT6 = ffi.C.GL_COLOR_ATTACHMENT6
M.GL_COLOR_ATTACHMENT7 = ffi.C.GL_COLOR_ATTACHMENT7
M.GL_COLOR_ATTACHMENT8 = ffi.C.GL_COLOR_ATTACHMENT8
M.GL_COLOR_ATTACHMENT9 = ffi.C.GL_COLOR_ATTACHMENT9
M.GL_COLOR_BUFFER_BIT = ffi.C.GL_COLOR_BUFFER_BIT
M.GL_COLOR_CLEAR_VALUE = ffi.C.GL_COLOR_CLEAR_VALUE
M.GL_COLOR_INDEX = ffi.C.GL_COLOR_INDEX
M.GL_COLOR_INDEXES = ffi.C.GL_COLOR_INDEXES
M.GL_COLOR_LOGIC_OP = ffi.C.GL_COLOR_LOGIC_OP
M.GL_COLOR_MATERIAL = ffi.C.GL_COLOR_MATERIAL
M.GL_COLOR_MATERIAL_FACE = ffi.C.GL_COLOR_MATERIAL_FACE
M.GL_COLOR_MATERIAL_PARAMETER = ffi.C.GL_COLOR_MATERIAL_PARAMETER
M.GL_COLOR_SUM = ffi.C.GL_COLOR_SUM
M.GL_COLOR_WRITEMASK = ffi.C.GL_COLOR_WRITEMASK
M.GL_COMBINE = ffi.C.GL_COMBINE
M.GL_COMBINE_ALPHA = ffi.C.GL_COMBINE_ALPHA
M.GL_COMBINE_RGB = ffi.C.GL_COMBINE_RGB
M.GL_COMPARE_REF_TO_TEXTURE = ffi.C.GL_COMPARE_REF_TO_TEXTURE
M.GL_COMPARE_R_TO_TEXTURE = ffi.C.GL_COMPARE_R_TO_TEXTURE
M.GL_COMPILE = ffi.C.GL_COMPILE
M.GL_COMPILE_AND_EXECUTE = ffi.C.GL_COMPILE_AND_EXECUTE
M.GL_COMPILE_STATUS = ffi.C.GL_COMPILE_STATUS
M.GL_COMPRESSED_ALPHA = ffi.C.GL_COMPRESSED_ALPHA
M.GL_COMPRESSED_INTENSITY = ffi.C.GL_COMPRESSED_INTENSITY
M.GL_COMPRESSED_LUMINANCE = ffi.C.GL_COMPRESSED_LUMINANCE
M.GL_COMPRESSED_LUMINANCE_ALPHA = ffi.C.GL_COMPRESSED_LUMINANCE_ALPHA
M.GL_COMPRESSED_RED = ffi.C.GL_COMPRESSED_RED
M.GL_COMPRESSED_RED_RGTC1 = ffi.C.GL_COMPRESSED_RED_RGTC1
M.GL_COMPRESSED_RG = ffi.C.GL_COMPRESSED_RG
M.GL_COMPRESSED_RGB = ffi.C.GL_COMPRESSED_RGB
M.GL_COMPRESSED_RGBA = ffi.C.GL_COMPRESSED_RGBA
M.GL_COMPRESSED_RG_RGTC2 = ffi.C.GL_COMPRESSED_RG_RGTC2
M.GL_COMPRESSED_SIGNED_RED_RGTC1 = ffi.C.GL_COMPRESSED_SIGNED_RED_RGTC1
M.GL_COMPRESSED_SIGNED_RG_RGTC2 = ffi.C.GL_COMPRESSED_SIGNED_RG_RGTC2
M.GL_COMPRESSED_SLUMINANCE = ffi.C.GL_COMPRESSED_SLUMINANCE
M.GL_COMPRESSED_SLUMINANCE_ALPHA = ffi.C.GL_COMPRESSED_SLUMINANCE_ALPHA
M.GL_COMPRESSED_SRGB = ffi.C.GL_COMPRESSED_SRGB
M.GL_COMPRESSED_SRGB_ALPHA = ffi.C.GL_COMPRESSED_SRGB_ALPHA
M.GL_COMPRESSED_TEXTURE_FORMATS = ffi.C.GL_COMPRESSED_TEXTURE_FORMATS
M.GL_CONDITION_SATISFIED = ffi.C.GL_CONDITION_SATISFIED
M.GL_CONSTANT = ffi.C.GL_CONSTANT
M.GL_CONSTANT_ALPHA = ffi.C.GL_CONSTANT_ALPHA
M.GL_CONSTANT_ATTENUATION = ffi.C.GL_CONSTANT_ATTENUATION
M.GL_CONSTANT_COLOR = ffi.C.GL_CONSTANT_COLOR
M.GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = ffi.C.GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
M.GL_CONTEXT_CORE_PROFILE_BIT = ffi.C.GL_CONTEXT_CORE_PROFILE_BIT
M.GL_CONTEXT_FLAGS = ffi.C.GL_CONTEXT_FLAGS
M.GL_CONTEXT_FLAG_DEBUG_BIT = ffi.C.GL_CONTEXT_FLAG_DEBUG_BIT
M.GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = ffi.C.GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
M.GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = ffi.C.GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB
M.GL_CONTEXT_PROFILE_MASK = ffi.C.GL_CONTEXT_PROFILE_MASK
M.GL_COORD_REPLACE = ffi.C.GL_COORD_REPLACE
M.GL_COPY = ffi.C.GL_COPY
M.GL_COPY_INVERTED = ffi.C.GL_COPY_INVERTED
M.GL_COPY_PIXEL_TOKEN = ffi.C.GL_COPY_PIXEL_TOKEN
M.GL_COPY_READ_BUFFER = ffi.C.GL_COPY_READ_BUFFER
M.GL_COPY_WRITE_BUFFER = ffi.C.GL_COPY_WRITE_BUFFER
M.GL_CULL_FACE = ffi.C.GL_CULL_FACE
M.GL_CULL_FACE_MODE = ffi.C.GL_CULL_FACE_MODE
M.GL_CURRENT_BIT = ffi.C.GL_CURRENT_BIT
M.GL_CURRENT_COLOR = ffi.C.GL_CURRENT_COLOR
M.GL_CURRENT_FOG_COORD = ffi.C.GL_CURRENT_FOG_COORD
M.GL_CURRENT_FOG_COORDINATE = ffi.C.GL_CURRENT_FOG_COORDINATE
M.GL_CURRENT_INDEX = ffi.C.GL_CURRENT_INDEX
M.GL_CURRENT_NORMAL = ffi.C.GL_CURRENT_NORMAL
M.GL_CURRENT_PROGRAM = ffi.C.GL_CURRENT_PROGRAM
M.GL_CURRENT_QUERY = ffi.C.GL_CURRENT_QUERY
M.GL_CURRENT_RASTER_COLOR = ffi.C.GL_CURRENT_RASTER_COLOR
M.GL_CURRENT_RASTER_DISTANCE = ffi.C.GL_CURRENT_RASTER_DISTANCE
M.GL_CURRENT_RASTER_INDEX = ffi.C.GL_CURRENT_RASTER_INDEX
M.GL_CURRENT_RASTER_POSITION = ffi.C.GL_CURRENT_RASTER_POSITION
M.GL_CURRENT_RASTER_POSITION_VALID = ffi.C.GL_CURRENT_RASTER_POSITION_VALID
M.GL_CURRENT_RASTER_SECONDARY_COLOR = ffi.C.GL_CURRENT_RASTER_SECONDARY_COLOR
M.GL_CURRENT_RASTER_TEXTURE_COORDS = ffi.C.GL_CURRENT_RASTER_TEXTURE_COORDS
M.GL_CURRENT_SECONDARY_COLOR = ffi.C.GL_CURRENT_SECONDARY_COLOR
M.GL_CURRENT_TEXTURE_COORDS = ffi.C.GL_CURRENT_TEXTURE_COORDS
M.GL_CURRENT_VERTEX_ATTRIB = ffi.C.GL_CURRENT_VERTEX_ATTRIB
M.GL_CW = ffi.C.GL_CW
M.GL_DEBUG_CALLBACK_FUNCTION = ffi.C.GL_DEBUG_CALLBACK_FUNCTION
M.GL_DEBUG_CALLBACK_USER_PARAM = ffi.C.GL_DEBUG_CALLBACK_USER_PARAM
M.GL_DEBUG_GROUP_STACK_DEPTH = ffi.C.GL_DEBUG_GROUP_STACK_DEPTH
M.GL_DEBUG_LOGGED_MESSAGES = ffi.C.GL_DEBUG_LOGGED_MESSAGES
M.GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = ffi.C.GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
M.GL_DEBUG_OUTPUT = ffi.C.GL_DEBUG_OUTPUT
M.GL_DEBUG_OUTPUT_SYNCHRONOUS = ffi.C.GL_DEBUG_OUTPUT_SYNCHRONOUS
M.GL_DEBUG_SEVERITY_HIGH = ffi.C.GL_DEBUG_SEVERITY_HIGH
M.GL_DEBUG_SEVERITY_LOW = ffi.C.GL_DEBUG_SEVERITY_LOW
M.GL_DEBUG_SEVERITY_MEDIUM = ffi.C.GL_DEBUG_SEVERITY_MEDIUM
M.GL_DEBUG_SEVERITY_NOTIFICATION = ffi.C.GL_DEBUG_SEVERITY_NOTIFICATION
M.GL_DEBUG_SOURCE_API = ffi.C.GL_DEBUG_SOURCE_API
M.GL_DEBUG_SOURCE_APPLICATION = ffi.C.GL_DEBUG_SOURCE_APPLICATION
M.GL_DEBUG_SOURCE_OTHER = ffi.C.GL_DEBUG_SOURCE_OTHER
M.GL_DEBUG_SOURCE_SHADER_COMPILER = ffi.C.GL_DEBUG_SOURCE_SHADER_COMPILER
M.GL_DEBUG_SOURCE_THIRD_PARTY = ffi.C.GL_DEBUG_SOURCE_THIRD_PARTY
M.GL_DEBUG_SOURCE_WINDOW_SYSTEM = ffi.C.GL_DEBUG_SOURCE_WINDOW_SYSTEM
M.GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = ffi.C.GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
M.GL_DEBUG_TYPE_ERROR = ffi.C.GL_DEBUG_TYPE_ERROR
M.GL_DEBUG_TYPE_MARKER = ffi.C.GL_DEBUG_TYPE_MARKER
M.GL_DEBUG_TYPE_OTHER = ffi.C.GL_DEBUG_TYPE_OTHER
M.GL_DEBUG_TYPE_PERFORMANCE = ffi.C.GL_DEBUG_TYPE_PERFORMANCE
M.GL_DEBUG_TYPE_POP_GROUP = ffi.C.GL_DEBUG_TYPE_POP_GROUP
M.GL_DEBUG_TYPE_PORTABILITY = ffi.C.GL_DEBUG_TYPE_PORTABILITY
M.GL_DEBUG_TYPE_PUSH_GROUP = ffi.C.GL_DEBUG_TYPE_PUSH_GROUP
M.GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = ffi.C.GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
M.GL_DECAL = ffi.C.GL_DECAL
M.GL_DECR = ffi.C.GL_DECR
M.GL_DECR_WRAP = ffi.C.GL_DECR_WRAP
M.GL_DELETE_STATUS = ffi.C.GL_DELETE_STATUS
M.GL_DEPTH = ffi.C.GL_DEPTH
M.GL_DEPTH24_STENCIL8 = ffi.C.GL_DEPTH24_STENCIL8
M.GL_DEPTH32F_STENCIL8 = ffi.C.GL_DEPTH32F_STENCIL8
M.GL_DEPTH_ATTACHMENT = ffi.C.GL_DEPTH_ATTACHMENT
M.GL_DEPTH_BIAS = ffi.C.GL_DEPTH_BIAS
M.GL_DEPTH_BITS = ffi.C.GL_DEPTH_BITS
M.GL_DEPTH_BUFFER_BIT = ffi.C.GL_DEPTH_BUFFER_BIT
M.GL_DEPTH_CLAMP = ffi.C.GL_DEPTH_CLAMP
M.GL_DEPTH_CLEAR_VALUE = ffi.C.GL_DEPTH_CLEAR_VALUE
M.GL_DEPTH_COMPONENT = ffi.C.GL_DEPTH_COMPONENT
M.GL_DEPTH_COMPONENT16 = ffi.C.GL_DEPTH_COMPONENT16
M.GL_DEPTH_COMPONENT24 = ffi.C.GL_DEPTH_COMPONENT24
M.GL_DEPTH_COMPONENT32 = ffi.C.GL_DEPTH_COMPONENT32
M.GL_DEPTH_COMPONENT32F = ffi.C.GL_DEPTH_COMPONENT32F
M.GL_DEPTH_FUNC = ffi.C.GL_DEPTH_FUNC
M.GL_DEPTH_RANGE = ffi.C.GL_DEPTH_RANGE
M.GL_DEPTH_SCALE = ffi.C.GL_DEPTH_SCALE
M.GL_DEPTH_STENCIL = ffi.C.GL_DEPTH_STENCIL
M.GL_DEPTH_STENCIL_ATTACHMENT = ffi.C.GL_DEPTH_STENCIL_ATTACHMENT
M.GL_DEPTH_TEST = ffi.C.GL_DEPTH_TEST
M.GL_DEPTH_TEXTURE_MODE = ffi.C.GL_DEPTH_TEXTURE_MODE
M.GL_DEPTH_WRITEMASK = ffi.C.GL_DEPTH_WRITEMASK
M.GL_DIFFUSE = ffi.C.GL_DIFFUSE
M.GL_DISPLAY_LIST = ffi.C.GL_DISPLAY_LIST
M.GL_DITHER = ffi.C.GL_DITHER
M.GL_DOMAIN = ffi.C.GL_DOMAIN
M.GL_DONT_CARE = ffi.C.GL_DONT_CARE
M.GL_DOT3_RGB = ffi.C.GL_DOT3_RGB
M.GL_DOT3_RGBA = ffi.C.GL_DOT3_RGBA
M.GL_DOUBLE = ffi.C.GL_DOUBLE
M.GL_DOUBLEBUFFER = ffi.C.GL_DOUBLEBUFFER
M.GL_DRAW_BUFFER = ffi.C.GL_DRAW_BUFFER
M.GL_DRAW_BUFFER0 = ffi.C.GL_DRAW_BUFFER0
M.GL_DRAW_BUFFER1 = ffi.C.GL_DRAW_BUFFER1
M.GL_DRAW_BUFFER10 = ffi.C.GL_DRAW_BUFFER10
M.GL_DRAW_BUFFER11 = ffi.C.GL_DRAW_BUFFER11
M.GL_DRAW_BUFFER12 = ffi.C.GL_DRAW_BUFFER12
M.GL_DRAW_BUFFER13 = ffi.C.GL_DRAW_BUFFER13
M.GL_DRAW_BUFFER14 = ffi.C.GL_DRAW_BUFFER14
M.GL_DRAW_BUFFER15 = ffi.C.GL_DRAW_BUFFER15
M.GL_DRAW_BUFFER2 = ffi.C.GL_DRAW_BUFFER2
M.GL_DRAW_BUFFER3 = ffi.C.GL_DRAW_BUFFER3
M.GL_DRAW_BUFFER4 = ffi.C.GL_DRAW_BUFFER4
M.GL_DRAW_BUFFER5 = ffi.C.GL_DRAW_BUFFER5
M.GL_DRAW_BUFFER6 = ffi.C.GL_DRAW_BUFFER6
M.GL_DRAW_BUFFER7 = ffi.C.GL_DRAW_BUFFER7
M.GL_DRAW_BUFFER8 = ffi.C.GL_DRAW_BUFFER8
M.GL_DRAW_BUFFER9 = ffi.C.GL_DRAW_BUFFER9
M.GL_DRAW_FRAMEBUFFER = ffi.C.GL_DRAW_FRAMEBUFFER
M.GL_DRAW_FRAMEBUFFER_BINDING = ffi.C.GL_DRAW_FRAMEBUFFER_BINDING
M.GL_DRAW_PIXEL_TOKEN = ffi.C.GL_DRAW_PIXEL_TOKEN
M.GL_DST_ALPHA = ffi.C.GL_DST_ALPHA
M.GL_DST_COLOR = ffi.C.GL_DST_COLOR
M.GL_DYNAMIC_COPY = ffi.C.GL_DYNAMIC_COPY
M.GL_DYNAMIC_DRAW = ffi.C.GL_DYNAMIC_DRAW
M.GL_DYNAMIC_READ = ffi.C.GL_DYNAMIC_READ
M.GL_EDGE_FLAG = ffi.C.GL_EDGE_FLAG
M.GL_EDGE_FLAG_ARRAY = ffi.C.GL_EDGE_FLAG_ARRAY
M.GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = ffi.C.GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
M.GL_EDGE_FLAG_ARRAY_POINTER = ffi.C.GL_EDGE_FLAG_ARRAY_POINTER
M.GL_EDGE_FLAG_ARRAY_STRIDE = ffi.C.GL_EDGE_FLAG_ARRAY_STRIDE
M.GL_ELEMENT_ARRAY_BUFFER = ffi.C.GL_ELEMENT_ARRAY_BUFFER
M.GL_ELEMENT_ARRAY_BUFFER_BINDING = ffi.C.GL_ELEMENT_ARRAY_BUFFER_BINDING
M.GL_EMISSION = ffi.C.GL_EMISSION
M.GL_ENABLE_BIT = ffi.C.GL_ENABLE_BIT
M.GL_EQUAL = ffi.C.GL_EQUAL
M.GL_EQUIV = ffi.C.GL_EQUIV
M.GL_EVAL_BIT = ffi.C.GL_EVAL_BIT
M.GL_EXP = ffi.C.GL_EXP
M.GL_EXP2 = ffi.C.GL_EXP2
M.GL_EXTENSIONS = ffi.C.GL_EXTENSIONS
M.GL_EYE_LINEAR = ffi.C.GL_EYE_LINEAR
M.GL_EYE_PLANE = ffi.C.GL_EYE_PLANE
M.GL_FALSE = ffi.C.GL_FALSE
M.GL_FASTEST = ffi.C.GL_FASTEST
M.GL_FEEDBACK = ffi.C.GL_FEEDBACK
M.GL_FEEDBACK_BUFFER_POINTER = ffi.C.GL_FEEDBACK_BUFFER_POINTER
M.GL_FEEDBACK_BUFFER_SIZE = ffi.C.GL_FEEDBACK_BUFFER_SIZE
M.GL_FEEDBACK_BUFFER_TYPE = ffi.C.GL_FEEDBACK_BUFFER_TYPE
M.GL_FILL = ffi.C.GL_FILL
M.GL_FIRST_VERTEX_CONVENTION = ffi.C.GL_FIRST_VERTEX_CONVENTION
M.GL_FIXED_ONLY = ffi.C.GL_FIXED_ONLY
M.GL_FLAT = ffi.C.GL_FLAT
M.GL_FLOAT = ffi.C.GL_FLOAT
M.GL_FLOAT_32_UNSIGNED_INT_24_8_REV = ffi.C.GL_FLOAT_32_UNSIGNED_INT_24_8_REV
M.GL_FLOAT_MAT2 = ffi.C.GL_FLOAT_MAT2
M.GL_FLOAT_MAT2x3 = ffi.C.GL_FLOAT_MAT2x3
M.GL_FLOAT_MAT2x4 = ffi.C.GL_FLOAT_MAT2x4
M.GL_FLOAT_MAT3 = ffi.C.GL_FLOAT_MAT3
M.GL_FLOAT_MAT3x2 = ffi.C.GL_FLOAT_MAT3x2
M.GL_FLOAT_MAT3x4 = ffi.C.GL_FLOAT_MAT3x4
M.GL_FLOAT_MAT4 = ffi.C.GL_FLOAT_MAT4
M.GL_FLOAT_MAT4x2 = ffi.C.GL_FLOAT_MAT4x2
M.GL_FLOAT_MAT4x3 = ffi.C.GL_FLOAT_MAT4x3
M.GL_FLOAT_VEC2 = ffi.C.GL_FLOAT_VEC2
M.GL_FLOAT_VEC3 = ffi.C.GL_FLOAT_VEC3
M.GL_FLOAT_VEC4 = ffi.C.GL_FLOAT_VEC4
M.GL_FOG = ffi.C.GL_FOG
M.GL_FOG_BIT = ffi.C.GL_FOG_BIT
M.GL_FOG_COLOR = ffi.C.GL_FOG_COLOR
M.GL_FOG_COORD = ffi.C.GL_FOG_COORD
M.GL_FOG_COORDINATE = ffi.C.GL_FOG_COORDINATE
M.GL_FOG_COORDINATE_ARRAY = ffi.C.GL_FOG_COORDINATE_ARRAY
M.GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = ffi.C.GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
M.GL_FOG_COORDINATE_ARRAY_POINTER = ffi.C.GL_FOG_COORDINATE_ARRAY_POINTER
M.GL_FOG_COORDINATE_ARRAY_STRIDE = ffi.C.GL_FOG_COORDINATE_ARRAY_STRIDE
M.GL_FOG_COORDINATE_ARRAY_TYPE = ffi.C.GL_FOG_COORDINATE_ARRAY_TYPE
M.GL_FOG_COORDINATE_SOURCE = ffi.C.GL_FOG_COORDINATE_SOURCE
M.GL_FOG_COORD_ARRAY = ffi.C.GL_FOG_COORD_ARRAY
M.GL_FOG_COORD_ARRAY_BUFFER_BINDING = ffi.C.GL_FOG_COORD_ARRAY_BUFFER_BINDING
M.GL_FOG_COORD_ARRAY_POINTER = ffi.C.GL_FOG_COORD_ARRAY_POINTER
M.GL_FOG_COORD_ARRAY_STRIDE = ffi.C.GL_FOG_COORD_ARRAY_STRIDE
M.GL_FOG_COORD_ARRAY_TYPE = ffi.C.GL_FOG_COORD_ARRAY_TYPE
M.GL_FOG_COORD_SRC = ffi.C.GL_FOG_COORD_SRC
M.GL_FOG_DENSITY = ffi.C.GL_FOG_DENSITY
M.GL_FOG_END = ffi.C.GL_FOG_END
M.GL_FOG_HINT = ffi.C.GL_FOG_HINT
M.GL_FOG_INDEX = ffi.C.GL_FOG_INDEX
M.GL_FOG_MODE = ffi.C.GL_FOG_MODE
M.GL_FOG_START = ffi.C.GL_FOG_START
M.GL_FRAGMENT_DEPTH = ffi.C.GL_FRAGMENT_DEPTH
M.GL_FRAGMENT_SHADER = ffi.C.GL_FRAGMENT_SHADER
M.GL_FRAGMENT_SHADER_DERIVATIVE_HINT = ffi.C.GL_FRAGMENT_SHADER_DERIVATIVE_HINT
M.GL_FRAMEBUFFER = ffi.C.GL_FRAMEBUFFER
M.GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = ffi.C.GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
M.GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = ffi.C.GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
M.GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = ffi.C.GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
M.GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = ffi.C.GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
M.GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = ffi.C.GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
M.GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = ffi.C.GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
M.GL_FRAMEBUFFER_ATTACHMENT_LAYERED = ffi.C.GL_FRAMEBUFFER_ATTACHMENT_LAYERED
M.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = ffi.C.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
M.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = ffi.C.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
M.GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = ffi.C.GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
M.GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = ffi.C.GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
M.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = ffi.C.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
M.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = ffi.C.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
M.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = ffi.C.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
M.GL_FRAMEBUFFER_BINDING = ffi.C.GL_FRAMEBUFFER_BINDING
M.GL_FRAMEBUFFER_COMPLETE = ffi.C.GL_FRAMEBUFFER_COMPLETE
M.GL_FRAMEBUFFER_DEFAULT = ffi.C.GL_FRAMEBUFFER_DEFAULT
M.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = ffi.C.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
M.GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = ffi.C.GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
M.GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = ffi.C.GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
M.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = ffi.C.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
M.GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = ffi.C.GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
M.GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = ffi.C.GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
M.GL_FRAMEBUFFER_SRGB = ffi.C.GL_FRAMEBUFFER_SRGB
M.GL_FRAMEBUFFER_UNDEFINED = ffi.C.GL_FRAMEBUFFER_UNDEFINED
M.GL_FRAMEBUFFER_UNSUPPORTED = ffi.C.GL_FRAMEBUFFER_UNSUPPORTED
M.GL_FRONT = ffi.C.GL_FRONT
M.GL_FRONT_AND_BACK = ffi.C.GL_FRONT_AND_BACK
M.GL_FRONT_FACE = ffi.C.GL_FRONT_FACE
M.GL_FRONT_LEFT = ffi.C.GL_FRONT_LEFT
M.GL_FRONT_RIGHT = ffi.C.GL_FRONT_RIGHT
M.GL_FUNC_ADD = ffi.C.GL_FUNC_ADD
M.GL_FUNC_REVERSE_SUBTRACT = ffi.C.GL_FUNC_REVERSE_SUBTRACT
M.GL_FUNC_SUBTRACT = ffi.C.GL_FUNC_SUBTRACT
M.GL_GENERATE_MIPMAP = ffi.C.GL_GENERATE_MIPMAP
M.GL_GENERATE_MIPMAP_HINT = ffi.C.GL_GENERATE_MIPMAP_HINT
M.GL_GEOMETRY_INPUT_TYPE = ffi.C.GL_GEOMETRY_INPUT_TYPE
M.GL_GEOMETRY_OUTPUT_TYPE = ffi.C.GL_GEOMETRY_OUTPUT_TYPE
M.GL_GEOMETRY_SHADER = ffi.C.GL_GEOMETRY_SHADER
M.GL_GEOMETRY_VERTICES_OUT = ffi.C.GL_GEOMETRY_VERTICES_OUT
M.GL_GEQUAL = ffi.C.GL_GEQUAL
M.GL_GREATER = ffi.C.GL_GREATER
M.GL_GREEN = ffi.C.GL_GREEN
M.GL_GREEN_BIAS = ffi.C.GL_GREEN_BIAS
M.GL_GREEN_BITS = ffi.C.GL_GREEN_BITS
M.GL_GREEN_INTEGER = ffi.C.GL_GREEN_INTEGER
M.GL_GREEN_SCALE = ffi.C.GL_GREEN_SCALE
M.GL_GUILTY_CONTEXT_RESET_ARB = ffi.C.GL_GUILTY_CONTEXT_RESET_ARB
M.GL_HALF_FLOAT = ffi.C.GL_HALF_FLOAT
M.GL_HINT_BIT = ffi.C.GL_HINT_BIT
M.GL_INCR = ffi.C.GL_INCR
M.GL_INCR_WRAP = ffi.C.GL_INCR_WRAP
M.GL_INDEX = ffi.C.GL_INDEX
M.GL_INDEX_ARRAY = ffi.C.GL_INDEX_ARRAY
M.GL_INDEX_ARRAY_BUFFER_BINDING = ffi.C.GL_INDEX_ARRAY_BUFFER_BINDING
M.GL_INDEX_ARRAY_POINTER = ffi.C.GL_INDEX_ARRAY_POINTER
M.GL_INDEX_ARRAY_STRIDE = ffi.C.GL_INDEX_ARRAY_STRIDE
M.GL_INDEX_ARRAY_TYPE = ffi.C.GL_INDEX_ARRAY_TYPE
M.GL_INDEX_BITS = ffi.C.GL_INDEX_BITS
M.GL_INDEX_CLEAR_VALUE = ffi.C.GL_INDEX_CLEAR_VALUE
M.GL_INDEX_LOGIC_OP = ffi.C.GL_INDEX_LOGIC_OP
M.GL_INDEX_MODE = ffi.C.GL_INDEX_MODE
M.GL_INDEX_OFFSET = ffi.C.GL_INDEX_OFFSET
M.GL_INDEX_SHIFT = ffi.C.GL_INDEX_SHIFT
M.GL_INDEX_WRITEMASK = ffi.C.GL_INDEX_WRITEMASK
M.GL_INFO_LOG_LENGTH = ffi.C.GL_INFO_LOG_LENGTH
M.GL_INNOCENT_CONTEXT_RESET_ARB = ffi.C.GL_INNOCENT_CONTEXT_RESET_ARB
M.GL_INT = ffi.C.GL_INT
M.GL_INTENSITY = ffi.C.GL_INTENSITY
M.GL_INTENSITY12 = ffi.C.GL_INTENSITY12
M.GL_INTENSITY16 = ffi.C.GL_INTENSITY16
M.GL_INTENSITY4 = ffi.C.GL_INTENSITY4
M.GL_INTENSITY8 = ffi.C.GL_INTENSITY8
M.GL_INTERLEAVED_ATTRIBS = ffi.C.GL_INTERLEAVED_ATTRIBS
M.GL_INTERPOLATE = ffi.C.GL_INTERPOLATE
M.GL_INT_2_10_10_10_REV = ffi.C.GL_INT_2_10_10_10_REV
M.GL_INT_SAMPLER_1D = ffi.C.GL_INT_SAMPLER_1D
M.GL_INT_SAMPLER_1D_ARRAY = ffi.C.GL_INT_SAMPLER_1D_ARRAY
M.GL_INT_SAMPLER_2D = ffi.C.GL_INT_SAMPLER_2D
M.GL_INT_SAMPLER_2D_ARRAY = ffi.C.GL_INT_SAMPLER_2D_ARRAY
M.GL_INT_SAMPLER_2D_MULTISAMPLE = ffi.C.GL_INT_SAMPLER_2D_MULTISAMPLE
M.GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = ffi.C.GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
M.GL_INT_SAMPLER_2D_RECT = ffi.C.GL_INT_SAMPLER_2D_RECT
M.GL_INT_SAMPLER_3D = ffi.C.GL_INT_SAMPLER_3D
M.GL_INT_SAMPLER_BUFFER = ffi.C.GL_INT_SAMPLER_BUFFER
M.GL_INT_SAMPLER_CUBE = ffi.C.GL_INT_SAMPLER_CUBE
M.GL_INT_VEC2 = ffi.C.GL_INT_VEC2
M.GL_INT_VEC3 = ffi.C.GL_INT_VEC3
M.GL_INT_VEC4 = ffi.C.GL_INT_VEC4
M.GL_INVALID_ENUM = ffi.C.GL_INVALID_ENUM
M.GL_INVALID_FRAMEBUFFER_OPERATION = ffi.C.GL_INVALID_FRAMEBUFFER_OPERATION
M.GL_INVALID_INDEX = ffi.C.GL_INVALID_INDEX
M.GL_INVALID_OPERATION = ffi.C.GL_INVALID_OPERATION
M.GL_INVALID_VALUE = ffi.C.GL_INVALID_VALUE
M.GL_INVERT = ffi.C.GL_INVERT
M.GL_KEEP = ffi.C.GL_KEEP
M.GL_LAST_VERTEX_CONVENTION = ffi.C.GL_LAST_VERTEX_CONVENTION
M.GL_LEFT = ffi.C.GL_LEFT
M.GL_LEQUAL = ffi.C.GL_LEQUAL
M.GL_LESS = ffi.C.GL_LESS
M.GL_LIGHT0 = ffi.C.GL_LIGHT0
M.GL_LIGHT1 = ffi.C.GL_LIGHT1
M.GL_LIGHT2 = ffi.C.GL_LIGHT2
M.GL_LIGHT3 = ffi.C.GL_LIGHT3
M.GL_LIGHT4 = ffi.C.GL_LIGHT4
M.GL_LIGHT5 = ffi.C.GL_LIGHT5
M.GL_LIGHT6 = ffi.C.GL_LIGHT6
M.GL_LIGHT7 = ffi.C.GL_LIGHT7
M.GL_LIGHTING = ffi.C.GL_LIGHTING
M.GL_LIGHTING_BIT = ffi.C.GL_LIGHTING_BIT
M.GL_LIGHT_MODEL_AMBIENT = ffi.C.GL_LIGHT_MODEL_AMBIENT
M.GL_LIGHT_MODEL_COLOR_CONTROL = ffi.C.GL_LIGHT_MODEL_COLOR_CONTROL
M.GL_LIGHT_MODEL_LOCAL_VIEWER = ffi.C.GL_LIGHT_MODEL_LOCAL_VIEWER
M.GL_LIGHT_MODEL_TWO_SIDE = ffi.C.GL_LIGHT_MODEL_TWO_SIDE
M.GL_LINE = ffi.C.GL_LINE
M.GL_LINEAR = ffi.C.GL_LINEAR
M.GL_LINEAR_ATTENUATION = ffi.C.GL_LINEAR_ATTENUATION
M.GL_LINEAR_MIPMAP_LINEAR = ffi.C.GL_LINEAR_MIPMAP_LINEAR
M.GL_LINEAR_MIPMAP_NEAREST = ffi.C.GL_LINEAR_MIPMAP_NEAREST
M.GL_LINES = ffi.C.GL_LINES
M.GL_LINES_ADJACENCY = ffi.C.GL_LINES_ADJACENCY
M.GL_LINE_BIT = ffi.C.GL_LINE_BIT
M.GL_LINE_LOOP = ffi.C.GL_LINE_LOOP
M.GL_LINE_RESET_TOKEN = ffi.C.GL_LINE_RESET_TOKEN
M.GL_LINE_SMOOTH = ffi.C.GL_LINE_SMOOTH
M.GL_LINE_SMOOTH_HINT = ffi.C.GL_LINE_SMOOTH_HINT
M.GL_LINE_STIPPLE = ffi.C.GL_LINE_STIPPLE
M.GL_LINE_STIPPLE_PATTERN = ffi.C.GL_LINE_STIPPLE_PATTERN
M.GL_LINE_STIPPLE_REPEAT = ffi.C.GL_LINE_STIPPLE_REPEAT
M.GL_LINE_STRIP = ffi.C.GL_LINE_STRIP
M.GL_LINE_STRIP_ADJACENCY = ffi.C.GL_LINE_STRIP_ADJACENCY
M.GL_LINE_TOKEN = ffi.C.GL_LINE_TOKEN
M.GL_LINE_WIDTH = ffi.C.GL_LINE_WIDTH
M.GL_LINE_WIDTH_GRANULARITY = ffi.C.GL_LINE_WIDTH_GRANULARITY
M.GL_LINE_WIDTH_RANGE = ffi.C.GL_LINE_WIDTH_RANGE
M.GL_LINK_STATUS = ffi.C.GL_LINK_STATUS
M.GL_LIST_BASE = ffi.C.GL_LIST_BASE
M.GL_LIST_BIT = ffi.C.GL_LIST_BIT
M.GL_LIST_INDEX = ffi.C.GL_LIST_INDEX
M.GL_LIST_MODE = ffi.C.GL_LIST_MODE
M.GL_LOAD = ffi.C.GL_LOAD
M.GL_LOGIC_OP = ffi.C.GL_LOGIC_OP
M.GL_LOGIC_OP_MODE = ffi.C.GL_LOGIC_OP_MODE
M.GL_LOSE_CONTEXT_ON_RESET_ARB = ffi.C.GL_LOSE_CONTEXT_ON_RESET_ARB
M.GL_LOWER_LEFT = ffi.C.GL_LOWER_LEFT
M.GL_LUMINANCE = ffi.C.GL_LUMINANCE
M.GL_LUMINANCE12 = ffi.C.GL_LUMINANCE12
M.GL_LUMINANCE12_ALPHA12 = ffi.C.GL_LUMINANCE12_ALPHA12
M.GL_LUMINANCE12_ALPHA4 = ffi.C.GL_LUMINANCE12_ALPHA4
M.GL_LUMINANCE16 = ffi.C.GL_LUMINANCE16
M.GL_LUMINANCE16_ALPHA16 = ffi.C.GL_LUMINANCE16_ALPHA16
M.GL_LUMINANCE4 = ffi.C.GL_LUMINANCE4
M.GL_LUMINANCE4_ALPHA4 = ffi.C.GL_LUMINANCE4_ALPHA4
M.GL_LUMINANCE6_ALPHA2 = ffi.C.GL_LUMINANCE6_ALPHA2
M.GL_LUMINANCE8 = ffi.C.GL_LUMINANCE8
M.GL_LUMINANCE8_ALPHA8 = ffi.C.GL_LUMINANCE8_ALPHA8
M.GL_LUMINANCE_ALPHA = ffi.C.GL_LUMINANCE_ALPHA
M.GL_MAJOR_VERSION = ffi.C.GL_MAJOR_VERSION
M.GL_MAP1_COLOR_4 = ffi.C.GL_MAP1_COLOR_4
M.GL_MAP1_GRID_DOMAIN = ffi.C.GL_MAP1_GRID_DOMAIN
M.GL_MAP1_GRID_SEGMENTS = ffi.C.GL_MAP1_GRID_SEGMENTS
M.GL_MAP1_INDEX = ffi.C.GL_MAP1_INDEX
M.GL_MAP1_NORMAL = ffi.C.GL_MAP1_NORMAL
M.GL_MAP1_TEXTURE_COORD_1 = ffi.C.GL_MAP1_TEXTURE_COORD_1
M.GL_MAP1_TEXTURE_COORD_2 = ffi.C.GL_MAP1_TEXTURE_COORD_2
M.GL_MAP1_TEXTURE_COORD_3 = ffi.C.GL_MAP1_TEXTURE_COORD_3
M.GL_MAP1_TEXTURE_COORD_4 = ffi.C.GL_MAP1_TEXTURE_COORD_4
M.GL_MAP1_VERTEX_3 = ffi.C.GL_MAP1_VERTEX_3
M.GL_MAP1_VERTEX_4 = ffi.C.GL_MAP1_VERTEX_4
M.GL_MAP2_COLOR_4 = ffi.C.GL_MAP2_COLOR_4
M.GL_MAP2_GRID_DOMAIN = ffi.C.GL_MAP2_GRID_DOMAIN
M.GL_MAP2_GRID_SEGMENTS = ffi.C.GL_MAP2_GRID_SEGMENTS
M.GL_MAP2_INDEX = ffi.C.GL_MAP2_INDEX
M.GL_MAP2_NORMAL = ffi.C.GL_MAP2_NORMAL
M.GL_MAP2_TEXTURE_COORD_1 = ffi.C.GL_MAP2_TEXTURE_COORD_1
M.GL_MAP2_TEXTURE_COORD_2 = ffi.C.GL_MAP2_TEXTURE_COORD_2
M.GL_MAP2_TEXTURE_COORD_3 = ffi.C.GL_MAP2_TEXTURE_COORD_3
M.GL_MAP2_TEXTURE_COORD_4 = ffi.C.GL_MAP2_TEXTURE_COORD_4
M.GL_MAP2_VERTEX_3 = ffi.C.GL_MAP2_VERTEX_3
M.GL_MAP2_VERTEX_4 = ffi.C.GL_MAP2_VERTEX_4
M.GL_MAP_COLOR = ffi.C.GL_MAP_COLOR
M.GL_MAP_FLUSH_EXPLICIT_BIT = ffi.C.GL_MAP_FLUSH_EXPLICIT_BIT
M.GL_MAP_INVALIDATE_BUFFER_BIT = ffi.C.GL_MAP_INVALIDATE_BUFFER_BIT
M.GL_MAP_INVALIDATE_RANGE_BIT = ffi.C.GL_MAP_INVALIDATE_RANGE_BIT
M.GL_MAP_READ_BIT = ffi.C.GL_MAP_READ_BIT
M.GL_MAP_STENCIL = ffi.C.GL_MAP_STENCIL
M.GL_MAP_UNSYNCHRONIZED_BIT = ffi.C.GL_MAP_UNSYNCHRONIZED_BIT
M.GL_MAP_WRITE_BIT = ffi.C.GL_MAP_WRITE_BIT
M.GL_MATRIX_MODE = ffi.C.GL_MATRIX_MODE
M.GL_MAX = ffi.C.GL_MAX
M.GL_MAX_3D_TEXTURE_SIZE = ffi.C.GL_MAX_3D_TEXTURE_SIZE
M.GL_MAX_ARRAY_TEXTURE_LAYERS = ffi.C.GL_MAX_ARRAY_TEXTURE_LAYERS
M.GL_MAX_ATTRIB_STACK_DEPTH = ffi.C.GL_MAX_ATTRIB_STACK_DEPTH
M.GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = ffi.C.GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
M.GL_MAX_CLIP_DISTANCES = ffi.C.GL_MAX_CLIP_DISTANCES
M.GL_MAX_CLIP_PLANES = ffi.C.GL_MAX_CLIP_PLANES
M.GL_MAX_COLOR_ATTACHMENTS = ffi.C.GL_MAX_COLOR_ATTACHMENTS
M.GL_MAX_COLOR_TEXTURE_SAMPLES = ffi.C.GL_MAX_COLOR_TEXTURE_SAMPLES
M.GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = ffi.C.GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
M.GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = ffi.C.GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
M.GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = ffi.C.GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
M.GL_MAX_COMBINED_UNIFORM_BLOCKS = ffi.C.GL_MAX_COMBINED_UNIFORM_BLOCKS
M.GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = ffi.C.GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
M.GL_MAX_CUBE_MAP_TEXTURE_SIZE = ffi.C.GL_MAX_CUBE_MAP_TEXTURE_SIZE
M.GL_MAX_DEBUG_GROUP_STACK_DEPTH = ffi.C.GL_MAX_DEBUG_GROUP_STACK_DEPTH
M.GL_MAX_DEBUG_LOGGED_MESSAGES = ffi.C.GL_MAX_DEBUG_LOGGED_MESSAGES
M.GL_MAX_DEBUG_MESSAGE_LENGTH = ffi.C.GL_MAX_DEBUG_MESSAGE_LENGTH
M.GL_MAX_DEPTH_TEXTURE_SAMPLES = ffi.C.GL_MAX_DEPTH_TEXTURE_SAMPLES
M.GL_MAX_DRAW_BUFFERS = ffi.C.GL_MAX_DRAW_BUFFERS
M.GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = ffi.C.GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
M.GL_MAX_ELEMENTS_INDICES = ffi.C.GL_MAX_ELEMENTS_INDICES
M.GL_MAX_ELEMENTS_VERTICES = ffi.C.GL_MAX_ELEMENTS_VERTICES
M.GL_MAX_EVAL_ORDER = ffi.C.GL_MAX_EVAL_ORDER
M.GL_MAX_FRAGMENT_INPUT_COMPONENTS = ffi.C.GL_MAX_FRAGMENT_INPUT_COMPONENTS
M.GL_MAX_FRAGMENT_UNIFORM_BLOCKS = ffi.C.GL_MAX_FRAGMENT_UNIFORM_BLOCKS
M.GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = ffi.C.GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
M.GL_MAX_GEOMETRY_INPUT_COMPONENTS = ffi.C.GL_MAX_GEOMETRY_INPUT_COMPONENTS
M.GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = ffi.C.GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
M.GL_MAX_GEOMETRY_OUTPUT_VERTICES = ffi.C.GL_MAX_GEOMETRY_OUTPUT_VERTICES
M.GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = ffi.C.GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
M.GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = ffi.C.GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
M.GL_MAX_GEOMETRY_UNIFORM_BLOCKS = ffi.C.GL_MAX_GEOMETRY_UNIFORM_BLOCKS
M.GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = ffi.C.GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
M.GL_MAX_INTEGER_SAMPLES = ffi.C.GL_MAX_INTEGER_SAMPLES
M.GL_MAX_LABEL_LENGTH = ffi.C.GL_MAX_LABEL_LENGTH
M.GL_MAX_LIGHTS = ffi.C.GL_MAX_LIGHTS
M.GL_MAX_LIST_NESTING = ffi.C.GL_MAX_LIST_NESTING
M.GL_MAX_MODELVIEW_STACK_DEPTH = ffi.C.GL_MAX_MODELVIEW_STACK_DEPTH
M.GL_MAX_NAME_STACK_DEPTH = ffi.C.GL_MAX_NAME_STACK_DEPTH
M.GL_MAX_PIXEL_MAP_TABLE = ffi.C.GL_MAX_PIXEL_MAP_TABLE
M.GL_MAX_PROGRAM_TEXEL_OFFSET = ffi.C.GL_MAX_PROGRAM_TEXEL_OFFSET
M.GL_MAX_PROJECTION_STACK_DEPTH = ffi.C.GL_MAX_PROJECTION_STACK_DEPTH
M.GL_MAX_RECTANGLE_TEXTURE_SIZE = ffi.C.GL_MAX_RECTANGLE_TEXTURE_SIZE
M.GL_MAX_RENDERBUFFER_SIZE = ffi.C.GL_MAX_RENDERBUFFER_SIZE
M.GL_MAX_SAMPLES = ffi.C.GL_MAX_SAMPLES
M.GL_MAX_SAMPLE_MASK_WORDS = ffi.C.GL_MAX_SAMPLE_MASK_WORDS
M.GL_MAX_SERVER_WAIT_TIMEOUT = ffi.C.GL_MAX_SERVER_WAIT_TIMEOUT
M.GL_MAX_TEXTURE_BUFFER_SIZE = ffi.C.GL_MAX_TEXTURE_BUFFER_SIZE
M.GL_MAX_TEXTURE_COORDS = ffi.C.GL_MAX_TEXTURE_COORDS
M.GL_MAX_TEXTURE_IMAGE_UNITS = ffi.C.GL_MAX_TEXTURE_IMAGE_UNITS
M.GL_MAX_TEXTURE_LOD_BIAS = ffi.C.GL_MAX_TEXTURE_LOD_BIAS
M.GL_MAX_TEXTURE_SIZE = ffi.C.GL_MAX_TEXTURE_SIZE
M.GL_MAX_TEXTURE_STACK_DEPTH = ffi.C.GL_MAX_TEXTURE_STACK_DEPTH
M.GL_MAX_TEXTURE_UNITS = ffi.C.GL_MAX_TEXTURE_UNITS
M.GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = ffi.C.GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
M.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = ffi.C.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
M.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = ffi.C.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
M.GL_MAX_UNIFORM_BLOCK_SIZE = ffi.C.GL_MAX_UNIFORM_BLOCK_SIZE
M.GL_MAX_UNIFORM_BUFFER_BINDINGS = ffi.C.GL_MAX_UNIFORM_BUFFER_BINDINGS
M.GL_MAX_VARYING_COMPONENTS = ffi.C.GL_MAX_VARYING_COMPONENTS
M.GL_MAX_VARYING_FLOATS = ffi.C.GL_MAX_VARYING_FLOATS
M.GL_MAX_VERTEX_ATTRIBS = ffi.C.GL_MAX_VERTEX_ATTRIBS
M.GL_MAX_VERTEX_OUTPUT_COMPONENTS = ffi.C.GL_MAX_VERTEX_OUTPUT_COMPONENTS
M.GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = ffi.C.GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
M.GL_MAX_VERTEX_UNIFORM_BLOCKS = ffi.C.GL_MAX_VERTEX_UNIFORM_BLOCKS
M.GL_MAX_VERTEX_UNIFORM_COMPONENTS = ffi.C.GL_MAX_VERTEX_UNIFORM_COMPONENTS
M.GL_MAX_VIEWPORT_DIMS = ffi.C.GL_MAX_VIEWPORT_DIMS
M.GL_MIN = ffi.C.GL_MIN
M.GL_MINOR_VERSION = ffi.C.GL_MINOR_VERSION
M.GL_MIN_PROGRAM_TEXEL_OFFSET = ffi.C.GL_MIN_PROGRAM_TEXEL_OFFSET
M.GL_MIRRORED_REPEAT = ffi.C.GL_MIRRORED_REPEAT
M.GL_MODELVIEW = ffi.C.GL_MODELVIEW
M.GL_MODELVIEW_MATRIX = ffi.C.GL_MODELVIEW_MATRIX
M.GL_MODELVIEW_STACK_DEPTH = ffi.C.GL_MODELVIEW_STACK_DEPTH
M.GL_MODULATE = ffi.C.GL_MODULATE
M.GL_MULT = ffi.C.GL_MULT
M.GL_MULTISAMPLE = ffi.C.GL_MULTISAMPLE
M.GL_MULTISAMPLE_ARB = ffi.C.GL_MULTISAMPLE_ARB
M.GL_MULTISAMPLE_BIT = ffi.C.GL_MULTISAMPLE_BIT
M.GL_MULTISAMPLE_BIT_ARB = ffi.C.GL_MULTISAMPLE_BIT_ARB
M.GL_N3F_V3F = ffi.C.GL_N3F_V3F
M.GL_NAME_STACK_DEPTH = ffi.C.GL_NAME_STACK_DEPTH
M.GL_NAND = ffi.C.GL_NAND
M.GL_NEAREST = ffi.C.GL_NEAREST
M.GL_NEAREST_MIPMAP_LINEAR = ffi.C.GL_NEAREST_MIPMAP_LINEAR
M.GL_NEAREST_MIPMAP_NEAREST = ffi.C.GL_NEAREST_MIPMAP_NEAREST
M.GL_NEVER = ffi.C.GL_NEVER
M.GL_NICEST = ffi.C.GL_NICEST
M.GL_NONE = ffi.C.GL_NONE
M.GL_NOOP = ffi.C.GL_NOOP
M.GL_NOR = ffi.C.GL_NOR
M.GL_NORMALIZE = ffi.C.GL_NORMALIZE
M.GL_NORMAL_ARRAY = ffi.C.GL_NORMAL_ARRAY
M.GL_NORMAL_ARRAY_BUFFER_BINDING = ffi.C.GL_NORMAL_ARRAY_BUFFER_BINDING
M.GL_NORMAL_ARRAY_POINTER = ffi.C.GL_NORMAL_ARRAY_POINTER
M.GL_NORMAL_ARRAY_STRIDE = ffi.C.GL_NORMAL_ARRAY_STRIDE
M.GL_NORMAL_ARRAY_TYPE = ffi.C.GL_NORMAL_ARRAY_TYPE
M.GL_NORMAL_MAP = ffi.C.GL_NORMAL_MAP
M.GL_NOTEQUAL = ffi.C.GL_NOTEQUAL
M.GL_NO_ERROR = ffi.C.GL_NO_ERROR
M.GL_NO_RESET_NOTIFICATION_ARB = ffi.C.GL_NO_RESET_NOTIFICATION_ARB
M.GL_NUM_COMPRESSED_TEXTURE_FORMATS = ffi.C.GL_NUM_COMPRESSED_TEXTURE_FORMATS
M.GL_NUM_EXTENSIONS = ffi.C.GL_NUM_EXTENSIONS
M.GL_OBJECT_LINEAR = ffi.C.GL_OBJECT_LINEAR
M.GL_OBJECT_PLANE = ffi.C.GL_OBJECT_PLANE
M.GL_OBJECT_TYPE = ffi.C.GL_OBJECT_TYPE
M.GL_ONE = ffi.C.GL_ONE
M.GL_ONE_MINUS_CONSTANT_ALPHA = ffi.C.GL_ONE_MINUS_CONSTANT_ALPHA
M.GL_ONE_MINUS_CONSTANT_COLOR = ffi.C.GL_ONE_MINUS_CONSTANT_COLOR
M.GL_ONE_MINUS_DST_ALPHA = ffi.C.GL_ONE_MINUS_DST_ALPHA
M.GL_ONE_MINUS_DST_COLOR = ffi.C.GL_ONE_MINUS_DST_COLOR
M.GL_ONE_MINUS_SRC1_ALPHA = ffi.C.GL_ONE_MINUS_SRC1_ALPHA
M.GL_ONE_MINUS_SRC1_COLOR = ffi.C.GL_ONE_MINUS_SRC1_COLOR
M.GL_ONE_MINUS_SRC_ALPHA = ffi.C.GL_ONE_MINUS_SRC_ALPHA
M.GL_ONE_MINUS_SRC_COLOR = ffi.C.GL_ONE_MINUS_SRC_COLOR
M.GL_OPERAND0_ALPHA = ffi.C.GL_OPERAND0_ALPHA
M.GL_OPERAND0_RGB = ffi.C.GL_OPERAND0_RGB
M.GL_OPERAND1_ALPHA = ffi.C.GL_OPERAND1_ALPHA
M.GL_OPERAND1_RGB = ffi.C.GL_OPERAND1_RGB
M.GL_OPERAND2_ALPHA = ffi.C.GL_OPERAND2_ALPHA
M.GL_OPERAND2_RGB = ffi.C.GL_OPERAND2_RGB
M.GL_OR = ffi.C.GL_OR
M.GL_ORDER = ffi.C.GL_ORDER
M.GL_OR_INVERTED = ffi.C.GL_OR_INVERTED
M.GL_OR_REVERSE = ffi.C.GL_OR_REVERSE
M.GL_OUT_OF_MEMORY = ffi.C.GL_OUT_OF_MEMORY
M.GL_PACK_ALIGNMENT = ffi.C.GL_PACK_ALIGNMENT
M.GL_PACK_IMAGE_HEIGHT = ffi.C.GL_PACK_IMAGE_HEIGHT
M.GL_PACK_LSB_FIRST = ffi.C.GL_PACK_LSB_FIRST
M.GL_PACK_ROW_LENGTH = ffi.C.GL_PACK_ROW_LENGTH
M.GL_PACK_SKIP_IMAGES = ffi.C.GL_PACK_SKIP_IMAGES
M.GL_PACK_SKIP_PIXELS = ffi.C.GL_PACK_SKIP_PIXELS
M.GL_PACK_SKIP_ROWS = ffi.C.GL_PACK_SKIP_ROWS
M.GL_PACK_SWAP_BYTES = ffi.C.GL_PACK_SWAP_BYTES
M.GL_PASS_THROUGH_TOKEN = ffi.C.GL_PASS_THROUGH_TOKEN
M.GL_PERSPECTIVE_CORRECTION_HINT = ffi.C.GL_PERSPECTIVE_CORRECTION_HINT
M.GL_PIXEL_MAP_A_TO_A = ffi.C.GL_PIXEL_MAP_A_TO_A
M.GL_PIXEL_MAP_A_TO_A_SIZE = ffi.C.GL_PIXEL_MAP_A_TO_A_SIZE
M.GL_PIXEL_MAP_B_TO_B = ffi.C.GL_PIXEL_MAP_B_TO_B
M.GL_PIXEL_MAP_B_TO_B_SIZE = ffi.C.GL_PIXEL_MAP_B_TO_B_SIZE
M.GL_PIXEL_MAP_G_TO_G = ffi.C.GL_PIXEL_MAP_G_TO_G
M.GL_PIXEL_MAP_G_TO_G_SIZE = ffi.C.GL_PIXEL_MAP_G_TO_G_SIZE
M.GL_PIXEL_MAP_I_TO_A = ffi.C.GL_PIXEL_MAP_I_TO_A
M.GL_PIXEL_MAP_I_TO_A_SIZE = ffi.C.GL_PIXEL_MAP_I_TO_A_SIZE
M.GL_PIXEL_MAP_I_TO_B = ffi.C.GL_PIXEL_MAP_I_TO_B
M.GL_PIXEL_MAP_I_TO_B_SIZE = ffi.C.GL_PIXEL_MAP_I_TO_B_SIZE
M.GL_PIXEL_MAP_I_TO_G = ffi.C.GL_PIXEL_MAP_I_TO_G
M.GL_PIXEL_MAP_I_TO_G_SIZE = ffi.C.GL_PIXEL_MAP_I_TO_G_SIZE
M.GL_PIXEL_MAP_I_TO_I = ffi.C.GL_PIXEL_MAP_I_TO_I
M.GL_PIXEL_MAP_I_TO_I_SIZE = ffi.C.GL_PIXEL_MAP_I_TO_I_SIZE
M.GL_PIXEL_MAP_I_TO_R = ffi.C.GL_PIXEL_MAP_I_TO_R
M.GL_PIXEL_MAP_I_TO_R_SIZE = ffi.C.GL_PIXEL_MAP_I_TO_R_SIZE
M.GL_PIXEL_MAP_R_TO_R = ffi.C.GL_PIXEL_MAP_R_TO_R
M.GL_PIXEL_MAP_R_TO_R_SIZE = ffi.C.GL_PIXEL_MAP_R_TO_R_SIZE
M.GL_PIXEL_MAP_S_TO_S = ffi.C.GL_PIXEL_MAP_S_TO_S
M.GL_PIXEL_MAP_S_TO_S_SIZE = ffi.C.GL_PIXEL_MAP_S_TO_S_SIZE
M.GL_PIXEL_MODE_BIT = ffi.C.GL_PIXEL_MODE_BIT
M.GL_PIXEL_PACK_BUFFER = ffi.C.GL_PIXEL_PACK_BUFFER
M.GL_PIXEL_PACK_BUFFER_BINDING = ffi.C.GL_PIXEL_PACK_BUFFER_BINDING
M.GL_PIXEL_UNPACK_BUFFER = ffi.C.GL_PIXEL_UNPACK_BUFFER
M.GL_PIXEL_UNPACK_BUFFER_BINDING = ffi.C.GL_PIXEL_UNPACK_BUFFER_BINDING
M.GL_POINT = ffi.C.GL_POINT
M.GL_POINTS = ffi.C.GL_POINTS
M.GL_POINT_BIT = ffi.C.GL_POINT_BIT
M.GL_POINT_DISTANCE_ATTENUATION = ffi.C.GL_POINT_DISTANCE_ATTENUATION
M.GL_POINT_FADE_THRESHOLD_SIZE = ffi.C.GL_POINT_FADE_THRESHOLD_SIZE
M.GL_POINT_SIZE = ffi.C.GL_POINT_SIZE
M.GL_POINT_SIZE_GRANULARITY = ffi.C.GL_POINT_SIZE_GRANULARITY
M.GL_POINT_SIZE_MAX = ffi.C.GL_POINT_SIZE_MAX
M.GL_POINT_SIZE_MIN = ffi.C.GL_POINT_SIZE_MIN
M.GL_POINT_SIZE_RANGE = ffi.C.GL_POINT_SIZE_RANGE
M.GL_POINT_SMOOTH = ffi.C.GL_POINT_SMOOTH
M.GL_POINT_SMOOTH_HINT = ffi.C.GL_POINT_SMOOTH_HINT
M.GL_POINT_SPRITE = ffi.C.GL_POINT_SPRITE
M.GL_POINT_SPRITE_COORD_ORIGIN = ffi.C.GL_POINT_SPRITE_COORD_ORIGIN
M.GL_POINT_TOKEN = ffi.C.GL_POINT_TOKEN
M.GL_POLYGON = ffi.C.GL_POLYGON
M.GL_POLYGON_BIT = ffi.C.GL_POLYGON_BIT
M.GL_POLYGON_MODE = ffi.C.GL_POLYGON_MODE
M.GL_POLYGON_OFFSET_FACTOR = ffi.C.GL_POLYGON_OFFSET_FACTOR
M.GL_POLYGON_OFFSET_FILL = ffi.C.GL_POLYGON_OFFSET_FILL
M.GL_POLYGON_OFFSET_LINE = ffi.C.GL_POLYGON_OFFSET_LINE
M.GL_POLYGON_OFFSET_POINT = ffi.C.GL_POLYGON_OFFSET_POINT
M.GL_POLYGON_OFFSET_UNITS = ffi.C.GL_POLYGON_OFFSET_UNITS
M.GL_POLYGON_SMOOTH = ffi.C.GL_POLYGON_SMOOTH
M.GL_POLYGON_SMOOTH_HINT = ffi.C.GL_POLYGON_SMOOTH_HINT
M.GL_POLYGON_STIPPLE = ffi.C.GL_POLYGON_STIPPLE
M.GL_POLYGON_STIPPLE_BIT = ffi.C.GL_POLYGON_STIPPLE_BIT
M.GL_POLYGON_TOKEN = ffi.C.GL_POLYGON_TOKEN
M.GL_POSITION = ffi.C.GL_POSITION
M.GL_PREVIOUS = ffi.C.GL_PREVIOUS
M.GL_PRIMARY_COLOR = ffi.C.GL_PRIMARY_COLOR
M.GL_PRIMITIVES_GENERATED = ffi.C.GL_PRIMITIVES_GENERATED
M.GL_PRIMITIVE_RESTART = ffi.C.GL_PRIMITIVE_RESTART
M.GL_PRIMITIVE_RESTART_INDEX = ffi.C.GL_PRIMITIVE_RESTART_INDEX
M.GL_PROGRAM = ffi.C.GL_PROGRAM
M.GL_PROGRAM_PIPELINE = ffi.C.GL_PROGRAM_PIPELINE
M.GL_PROGRAM_POINT_SIZE = ffi.C.GL_PROGRAM_POINT_SIZE
M.GL_PROJECTION = ffi.C.GL_PROJECTION
M.GL_PROJECTION_MATRIX = ffi.C.GL_PROJECTION_MATRIX
M.GL_PROJECTION_STACK_DEPTH = ffi.C.GL_PROJECTION_STACK_DEPTH
M.GL_PROVOKING_VERTEX = ffi.C.GL_PROVOKING_VERTEX
M.GL_PROXY_TEXTURE_1D = ffi.C.GL_PROXY_TEXTURE_1D
M.GL_PROXY_TEXTURE_1D_ARRAY = ffi.C.GL_PROXY_TEXTURE_1D_ARRAY
M.GL_PROXY_TEXTURE_2D = ffi.C.GL_PROXY_TEXTURE_2D
M.GL_PROXY_TEXTURE_2D_ARRAY = ffi.C.GL_PROXY_TEXTURE_2D_ARRAY
M.GL_PROXY_TEXTURE_2D_MULTISAMPLE = ffi.C.GL_PROXY_TEXTURE_2D_MULTISAMPLE
M.GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = ffi.C.GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
M.GL_PROXY_TEXTURE_3D = ffi.C.GL_PROXY_TEXTURE_3D
M.GL_PROXY_TEXTURE_CUBE_MAP = ffi.C.GL_PROXY_TEXTURE_CUBE_MAP
M.GL_PROXY_TEXTURE_RECTANGLE = ffi.C.GL_PROXY_TEXTURE_RECTANGLE
M.GL_Q = ffi.C.GL_Q
M.GL_QUADRATIC_ATTENUATION = ffi.C.GL_QUADRATIC_ATTENUATION
M.GL_QUADS = ffi.C.GL_QUADS
M.GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = ffi.C.GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
M.GL_QUAD_STRIP = ffi.C.GL_QUAD_STRIP
M.GL_QUERY = ffi.C.GL_QUERY
M.GL_QUERY_BY_REGION_NO_WAIT = ffi.C.GL_QUERY_BY_REGION_NO_WAIT
M.GL_QUERY_BY_REGION_WAIT = ffi.C.GL_QUERY_BY_REGION_WAIT
M.GL_QUERY_COUNTER_BITS = ffi.C.GL_QUERY_COUNTER_BITS
M.GL_QUERY_NO_WAIT = ffi.C.GL_QUERY_NO_WAIT
M.GL_QUERY_RESULT = ffi.C.GL_QUERY_RESULT
M.GL_QUERY_RESULT_AVAILABLE = ffi.C.GL_QUERY_RESULT_AVAILABLE
M.GL_QUERY_WAIT = ffi.C.GL_QUERY_WAIT
M.GL_R = ffi.C.GL_R
M.GL_R11F_G11F_B10F = ffi.C.GL_R11F_G11F_B10F
M.GL_R16 = ffi.C.GL_R16
M.GL_R16F = ffi.C.GL_R16F
M.GL_R16I = ffi.C.GL_R16I
M.GL_R16UI = ffi.C.GL_R16UI
M.GL_R16_SNORM = ffi.C.GL_R16_SNORM
M.GL_R32F = ffi.C.GL_R32F
M.GL_R32I = ffi.C.GL_R32I
M.GL_R32UI = ffi.C.GL_R32UI
M.GL_R3_G3_B2 = ffi.C.GL_R3_G3_B2
M.GL_R8 = ffi.C.GL_R8
M.GL_R8I = ffi.C.GL_R8I
M.GL_R8UI = ffi.C.GL_R8UI
M.GL_R8_SNORM = ffi.C.GL_R8_SNORM
M.GL_RASTERIZER_DISCARD = ffi.C.GL_RASTERIZER_DISCARD
M.GL_READ_BUFFER = ffi.C.GL_READ_BUFFER
M.GL_READ_FRAMEBUFFER = ffi.C.GL_READ_FRAMEBUFFER
M.GL_READ_FRAMEBUFFER_BINDING = ffi.C.GL_READ_FRAMEBUFFER_BINDING
M.GL_READ_ONLY = ffi.C.GL_READ_ONLY
M.GL_READ_WRITE = ffi.C.GL_READ_WRITE
M.GL_RED = ffi.C.GL_RED
M.GL_RED_BIAS = ffi.C.GL_RED_BIAS
M.GL_RED_BITS = ffi.C.GL_RED_BITS
M.GL_RED_INTEGER = ffi.C.GL_RED_INTEGER
M.GL_RED_SCALE = ffi.C.GL_RED_SCALE
M.GL_REFLECTION_MAP = ffi.C.GL_REFLECTION_MAP
M.GL_RENDER = ffi.C.GL_RENDER
M.GL_RENDERBUFFER = ffi.C.GL_RENDERBUFFER
M.GL_RENDERBUFFER_ALPHA_SIZE = ffi.C.GL_RENDERBUFFER_ALPHA_SIZE
M.GL_RENDERBUFFER_BINDING = ffi.C.GL_RENDERBUFFER_BINDING
M.GL_RENDERBUFFER_BLUE_SIZE = ffi.C.GL_RENDERBUFFER_BLUE_SIZE
M.GL_RENDERBUFFER_DEPTH_SIZE = ffi.C.GL_RENDERBUFFER_DEPTH_SIZE
M.GL_RENDERBUFFER_GREEN_SIZE = ffi.C.GL_RENDERBUFFER_GREEN_SIZE
M.GL_RENDERBUFFER_HEIGHT = ffi.C.GL_RENDERBUFFER_HEIGHT
M.GL_RENDERBUFFER_INTERNAL_FORMAT = ffi.C.GL_RENDERBUFFER_INTERNAL_FORMAT
M.GL_RENDERBUFFER_RED_SIZE = ffi.C.GL_RENDERBUFFER_RED_SIZE
M.GL_RENDERBUFFER_SAMPLES = ffi.C.GL_RENDERBUFFER_SAMPLES
M.GL_RENDERBUFFER_STENCIL_SIZE = ffi.C.GL_RENDERBUFFER_STENCIL_SIZE
M.GL_RENDERBUFFER_WIDTH = ffi.C.GL_RENDERBUFFER_WIDTH
M.GL_RENDERER = ffi.C.GL_RENDERER
M.GL_RENDER_MODE = ffi.C.GL_RENDER_MODE
M.GL_REPEAT = ffi.C.GL_REPEAT
M.GL_REPLACE = ffi.C.GL_REPLACE
M.GL_RESCALE_NORMAL = ffi.C.GL_RESCALE_NORMAL
M.GL_RESET_NOTIFICATION_STRATEGY_ARB = ffi.C.GL_RESET_NOTIFICATION_STRATEGY_ARB
M.GL_RETURN = ffi.C.GL_RETURN
M.GL_RG = ffi.C.GL_RG
M.GL_RG16 = ffi.C.GL_RG16
M.GL_RG16F = ffi.C.GL_RG16F
M.GL_RG16I = ffi.C.GL_RG16I
M.GL_RG16UI = ffi.C.GL_RG16UI
M.GL_RG16_SNORM = ffi.C.GL_RG16_SNORM
M.GL_RG32F = ffi.C.GL_RG32F
M.GL_RG32I = ffi.C.GL_RG32I
M.GL_RG32UI = ffi.C.GL_RG32UI
M.GL_RG8 = ffi.C.GL_RG8
M.GL_RG8I = ffi.C.GL_RG8I
M.GL_RG8UI = ffi.C.GL_RG8UI
M.GL_RG8_SNORM = ffi.C.GL_RG8_SNORM
M.GL_RGB = ffi.C.GL_RGB
M.GL_RGB10 = ffi.C.GL_RGB10
M.GL_RGB10_A2 = ffi.C.GL_RGB10_A2
M.GL_RGB10_A2UI = ffi.C.GL_RGB10_A2UI
M.GL_RGB12 = ffi.C.GL_RGB12
M.GL_RGB16 = ffi.C.GL_RGB16
M.GL_RGB16F = ffi.C.GL_RGB16F
M.GL_RGB16I = ffi.C.GL_RGB16I
M.GL_RGB16UI = ffi.C.GL_RGB16UI
M.GL_RGB16_SNORM = ffi.C.GL_RGB16_SNORM
M.GL_RGB32F = ffi.C.GL_RGB32F
M.GL_RGB32I = ffi.C.GL_RGB32I
M.GL_RGB32UI = ffi.C.GL_RGB32UI
M.GL_RGB4 = ffi.C.GL_RGB4
M.GL_RGB5 = ffi.C.GL_RGB5
M.GL_RGB5_A1 = ffi.C.GL_RGB5_A1
M.GL_RGB8 = ffi.C.GL_RGB8
M.GL_RGB8I = ffi.C.GL_RGB8I
M.GL_RGB8UI = ffi.C.GL_RGB8UI
M.GL_RGB8_SNORM = ffi.C.GL_RGB8_SNORM
M.GL_RGB9_E5 = ffi.C.GL_RGB9_E5
M.GL_RGBA = ffi.C.GL_RGBA
M.GL_RGBA12 = ffi.C.GL_RGBA12
M.GL_RGBA16 = ffi.C.GL_RGBA16
M.GL_RGBA16F = ffi.C.GL_RGBA16F
M.GL_RGBA16I = ffi.C.GL_RGBA16I
M.GL_RGBA16UI = ffi.C.GL_RGBA16UI
M.GL_RGBA16_SNORM = ffi.C.GL_RGBA16_SNORM
M.GL_RGBA2 = ffi.C.GL_RGBA2
M.GL_RGBA32F = ffi.C.GL_RGBA32F
M.GL_RGBA32I = ffi.C.GL_RGBA32I
M.GL_RGBA32UI = ffi.C.GL_RGBA32UI
M.GL_RGBA4 = ffi.C.GL_RGBA4
M.GL_RGBA8 = ffi.C.GL_RGBA8
M.GL_RGBA8I = ffi.C.GL_RGBA8I
M.GL_RGBA8UI = ffi.C.GL_RGBA8UI
M.GL_RGBA8_SNORM = ffi.C.GL_RGBA8_SNORM
M.GL_RGBA_INTEGER = ffi.C.GL_RGBA_INTEGER
M.GL_RGBA_MODE = ffi.C.GL_RGBA_MODE
M.GL_RGB_INTEGER = ffi.C.GL_RGB_INTEGER
M.GL_RGB_SCALE = ffi.C.GL_RGB_SCALE
M.GL_RG_INTEGER = ffi.C.GL_RG_INTEGER
M.GL_RIGHT = ffi.C.GL_RIGHT
M.GL_S = ffi.C.GL_S
M.GL_SAMPLER = ffi.C.GL_SAMPLER
M.GL_SAMPLER_1D = ffi.C.GL_SAMPLER_1D
M.GL_SAMPLER_1D_ARRAY = ffi.C.GL_SAMPLER_1D_ARRAY
M.GL_SAMPLER_1D_ARRAY_SHADOW = ffi.C.GL_SAMPLER_1D_ARRAY_SHADOW
M.GL_SAMPLER_1D_SHADOW = ffi.C.GL_SAMPLER_1D_SHADOW
M.GL_SAMPLER_2D = ffi.C.GL_SAMPLER_2D
M.GL_SAMPLER_2D_ARRAY = ffi.C.GL_SAMPLER_2D_ARRAY
M.GL_SAMPLER_2D_ARRAY_SHADOW = ffi.C.GL_SAMPLER_2D_ARRAY_SHADOW
M.GL_SAMPLER_2D_MULTISAMPLE = ffi.C.GL_SAMPLER_2D_MULTISAMPLE
M.GL_SAMPLER_2D_MULTISAMPLE_ARRAY = ffi.C.GL_SAMPLER_2D_MULTISAMPLE_ARRAY
M.GL_SAMPLER_2D_RECT = ffi.C.GL_SAMPLER_2D_RECT
M.GL_SAMPLER_2D_RECT_SHADOW = ffi.C.GL_SAMPLER_2D_RECT_SHADOW
M.GL_SAMPLER_2D_SHADOW = ffi.C.GL_SAMPLER_2D_SHADOW
M.GL_SAMPLER_3D = ffi.C.GL_SAMPLER_3D
M.GL_SAMPLER_BINDING = ffi.C.GL_SAMPLER_BINDING
M.GL_SAMPLER_BUFFER = ffi.C.GL_SAMPLER_BUFFER
M.GL_SAMPLER_CUBE = ffi.C.GL_SAMPLER_CUBE
M.GL_SAMPLER_CUBE_SHADOW = ffi.C.GL_SAMPLER_CUBE_SHADOW
M.GL_SAMPLES = ffi.C.GL_SAMPLES
M.GL_SAMPLES_ARB = ffi.C.GL_SAMPLES_ARB
M.GL_SAMPLES_PASSED = ffi.C.GL_SAMPLES_PASSED
M.GL_SAMPLE_ALPHA_TO_COVERAGE = ffi.C.GL_SAMPLE_ALPHA_TO_COVERAGE
M.GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = ffi.C.GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
M.GL_SAMPLE_ALPHA_TO_ONE = ffi.C.GL_SAMPLE_ALPHA_TO_ONE
M.GL_SAMPLE_ALPHA_TO_ONE_ARB = ffi.C.GL_SAMPLE_ALPHA_TO_ONE_ARB
M.GL_SAMPLE_BUFFERS = ffi.C.GL_SAMPLE_BUFFERS
M.GL_SAMPLE_BUFFERS_ARB = ffi.C.GL_SAMPLE_BUFFERS_ARB
M.GL_SAMPLE_COVERAGE = ffi.C.GL_SAMPLE_COVERAGE
M.GL_SAMPLE_COVERAGE_ARB = ffi.C.GL_SAMPLE_COVERAGE_ARB
M.GL_SAMPLE_COVERAGE_INVERT = ffi.C.GL_SAMPLE_COVERAGE_INVERT
M.GL_SAMPLE_COVERAGE_INVERT_ARB = ffi.C.GL_SAMPLE_COVERAGE_INVERT_ARB
M.GL_SAMPLE_COVERAGE_VALUE = ffi.C.GL_SAMPLE_COVERAGE_VALUE
M.GL_SAMPLE_COVERAGE_VALUE_ARB = ffi.C.GL_SAMPLE_COVERAGE_VALUE_ARB
M.GL_SAMPLE_MASK = ffi.C.GL_SAMPLE_MASK
M.GL_SAMPLE_MASK_VALUE = ffi.C.GL_SAMPLE_MASK_VALUE
M.GL_SAMPLE_POSITION = ffi.C.GL_SAMPLE_POSITION
M.GL_SCISSOR_BIT = ffi.C.GL_SCISSOR_BIT
M.GL_SCISSOR_BOX = ffi.C.GL_SCISSOR_BOX
M.GL_SCISSOR_TEST = ffi.C.GL_SCISSOR_TEST
M.GL_SECONDARY_COLOR_ARRAY = ffi.C.GL_SECONDARY_COLOR_ARRAY
M.GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = ffi.C.GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
M.GL_SECONDARY_COLOR_ARRAY_POINTER = ffi.C.GL_SECONDARY_COLOR_ARRAY_POINTER
M.GL_SECONDARY_COLOR_ARRAY_SIZE = ffi.C.GL_SECONDARY_COLOR_ARRAY_SIZE
M.GL_SECONDARY_COLOR_ARRAY_STRIDE = ffi.C.GL_SECONDARY_COLOR_ARRAY_STRIDE
M.GL_SECONDARY_COLOR_ARRAY_TYPE = ffi.C.GL_SECONDARY_COLOR_ARRAY_TYPE
M.GL_SELECT = ffi.C.GL_SELECT
M.GL_SELECTION_BUFFER_POINTER = ffi.C.GL_SELECTION_BUFFER_POINTER
M.GL_SELECTION_BUFFER_SIZE = ffi.C.GL_SELECTION_BUFFER_SIZE
M.GL_SEPARATE_ATTRIBS = ffi.C.GL_SEPARATE_ATTRIBS
M.GL_SEPARATE_SPECULAR_COLOR = ffi.C.GL_SEPARATE_SPECULAR_COLOR
M.GL_SET = ffi.C.GL_SET
M.GL_SHADER = ffi.C.GL_SHADER
M.GL_SHADER_SOURCE_LENGTH = ffi.C.GL_SHADER_SOURCE_LENGTH
M.GL_SHADER_TYPE = ffi.C.GL_SHADER_TYPE
M.GL_SHADE_MODEL = ffi.C.GL_SHADE_MODEL
M.GL_SHADING_LANGUAGE_VERSION = ffi.C.GL_SHADING_LANGUAGE_VERSION
M.GL_SHININESS = ffi.C.GL_SHININESS
M.GL_SHORT = ffi.C.GL_SHORT
M.GL_SIGNALED = ffi.C.GL_SIGNALED
M.GL_SIGNED_NORMALIZED = ffi.C.GL_SIGNED_NORMALIZED
M.GL_SINGLE_COLOR = ffi.C.GL_SINGLE_COLOR
M.GL_SLUMINANCE = ffi.C.GL_SLUMINANCE
M.GL_SLUMINANCE8 = ffi.C.GL_SLUMINANCE8
M.GL_SLUMINANCE8_ALPHA8 = ffi.C.GL_SLUMINANCE8_ALPHA8
M.GL_SLUMINANCE_ALPHA = ffi.C.GL_SLUMINANCE_ALPHA
M.GL_SMOOTH = ffi.C.GL_SMOOTH
M.GL_SMOOTH_LINE_WIDTH_GRANULARITY = ffi.C.GL_SMOOTH_LINE_WIDTH_GRANULARITY
M.GL_SMOOTH_LINE_WIDTH_RANGE = ffi.C.GL_SMOOTH_LINE_WIDTH_RANGE
M.GL_SMOOTH_POINT_SIZE_GRANULARITY = ffi.C.GL_SMOOTH_POINT_SIZE_GRANULARITY
M.GL_SMOOTH_POINT_SIZE_RANGE = ffi.C.GL_SMOOTH_POINT_SIZE_RANGE
M.GL_SOURCE0_ALPHA = ffi.C.GL_SOURCE0_ALPHA
M.GL_SOURCE0_RGB = ffi.C.GL_SOURCE0_RGB
M.GL_SOURCE1_ALPHA = ffi.C.GL_SOURCE1_ALPHA
M.GL_SOURCE1_RGB = ffi.C.GL_SOURCE1_RGB
M.GL_SOURCE2_ALPHA = ffi.C.GL_SOURCE2_ALPHA
M.GL_SOURCE2_RGB = ffi.C.GL_SOURCE2_RGB
M.GL_SPECULAR = ffi.C.GL_SPECULAR
M.GL_SPHERE_MAP = ffi.C.GL_SPHERE_MAP
M.GL_SPOT_CUTOFF = ffi.C.GL_SPOT_CUTOFF
M.GL_SPOT_DIRECTION = ffi.C.GL_SPOT_DIRECTION
M.GL_SPOT_EXPONENT = ffi.C.GL_SPOT_EXPONENT
M.GL_SRC0_ALPHA = ffi.C.GL_SRC0_ALPHA
M.GL_SRC0_RGB = ffi.C.GL_SRC0_RGB
M.GL_SRC1_ALPHA = ffi.C.GL_SRC1_ALPHA
M.GL_SRC1_COLOR = ffi.C.GL_SRC1_COLOR
M.GL_SRC1_RGB = ffi.C.GL_SRC1_RGB
M.GL_SRC2_ALPHA = ffi.C.GL_SRC2_ALPHA
M.GL_SRC2_RGB = ffi.C.GL_SRC2_RGB
M.GL_SRC_ALPHA = ffi.C.GL_SRC_ALPHA
M.GL_SRC_ALPHA_SATURATE = ffi.C.GL_SRC_ALPHA_SATURATE
M.GL_SRC_COLOR = ffi.C.GL_SRC_COLOR
M.GL_SRGB = ffi.C.GL_SRGB
M.GL_SRGB8 = ffi.C.GL_SRGB8
M.GL_SRGB8_ALPHA8 = ffi.C.GL_SRGB8_ALPHA8
M.GL_SRGB_ALPHA = ffi.C.GL_SRGB_ALPHA
M.GL_STACK_OVERFLOW = ffi.C.GL_STACK_OVERFLOW
M.GL_STACK_UNDERFLOW = ffi.C.GL_STACK_UNDERFLOW
M.GL_STATIC_COPY = ffi.C.GL_STATIC_COPY
M.GL_STATIC_DRAW = ffi.C.GL_STATIC_DRAW
M.GL_STATIC_READ = ffi.C.GL_STATIC_READ
M.GL_STENCIL = ffi.C.GL_STENCIL
M.GL_STENCIL_ATTACHMENT = ffi.C.GL_STENCIL_ATTACHMENT
M.GL_STENCIL_BACK_FAIL = ffi.C.GL_STENCIL_BACK_FAIL
M.GL_STENCIL_BACK_FUNC = ffi.C.GL_STENCIL_BACK_FUNC
M.GL_STENCIL_BACK_PASS_DEPTH_FAIL = ffi.C.GL_STENCIL_BACK_PASS_DEPTH_FAIL
M.GL_STENCIL_BACK_PASS_DEPTH_PASS = ffi.C.GL_STENCIL_BACK_PASS_DEPTH_PASS
M.GL_STENCIL_BACK_REF = ffi.C.GL_STENCIL_BACK_REF
M.GL_STENCIL_BACK_VALUE_MASK = ffi.C.GL_STENCIL_BACK_VALUE_MASK
M.GL_STENCIL_BACK_WRITEMASK = ffi.C.GL_STENCIL_BACK_WRITEMASK
M.GL_STENCIL_BITS = ffi.C.GL_STENCIL_BITS
M.GL_STENCIL_BUFFER_BIT = ffi.C.GL_STENCIL_BUFFER_BIT
M.GL_STENCIL_CLEAR_VALUE = ffi.C.GL_STENCIL_CLEAR_VALUE
M.GL_STENCIL_FAIL = ffi.C.GL_STENCIL_FAIL
M.GL_STENCIL_FUNC = ffi.C.GL_STENCIL_FUNC
M.GL_STENCIL_INDEX = ffi.C.GL_STENCIL_INDEX
M.GL_STENCIL_INDEX1 = ffi.C.GL_STENCIL_INDEX1
M.GL_STENCIL_INDEX16 = ffi.C.GL_STENCIL_INDEX16
M.GL_STENCIL_INDEX4 = ffi.C.GL_STENCIL_INDEX4
M.GL_STENCIL_INDEX8 = ffi.C.GL_STENCIL_INDEX8
M.GL_STENCIL_PASS_DEPTH_FAIL = ffi.C.GL_STENCIL_PASS_DEPTH_FAIL
M.GL_STENCIL_PASS_DEPTH_PASS = ffi.C.GL_STENCIL_PASS_DEPTH_PASS
M.GL_STENCIL_REF = ffi.C.GL_STENCIL_REF
M.GL_STENCIL_TEST = ffi.C.GL_STENCIL_TEST
M.GL_STENCIL_VALUE_MASK = ffi.C.GL_STENCIL_VALUE_MASK
M.GL_STENCIL_WRITEMASK = ffi.C.GL_STENCIL_WRITEMASK
M.GL_STEREO = ffi.C.GL_STEREO
M.GL_STREAM_COPY = ffi.C.GL_STREAM_COPY
M.GL_STREAM_DRAW = ffi.C.GL_STREAM_DRAW
M.GL_STREAM_READ = ffi.C.GL_STREAM_READ
M.GL_SUBPIXEL_BITS = ffi.C.GL_SUBPIXEL_BITS
M.GL_SUBTRACT = ffi.C.GL_SUBTRACT
M.GL_SYNC_CONDITION = ffi.C.GL_SYNC_CONDITION
M.GL_SYNC_FENCE = ffi.C.GL_SYNC_FENCE
M.GL_SYNC_FLAGS = ffi.C.GL_SYNC_FLAGS
M.GL_SYNC_FLUSH_COMMANDS_BIT = ffi.C.GL_SYNC_FLUSH_COMMANDS_BIT
M.GL_SYNC_GPU_COMMANDS_COMPLETE = ffi.C.GL_SYNC_GPU_COMMANDS_COMPLETE
M.GL_SYNC_STATUS = ffi.C.GL_SYNC_STATUS
M.GL_T = ffi.C.GL_T
M.GL_T2F_C3F_V3F = ffi.C.GL_T2F_C3F_V3F
M.GL_T2F_C4F_N3F_V3F = ffi.C.GL_T2F_C4F_N3F_V3F
M.GL_T2F_C4UB_V3F = ffi.C.GL_T2F_C4UB_V3F
M.GL_T2F_N3F_V3F = ffi.C.GL_T2F_N3F_V3F
M.GL_T2F_V3F = ffi.C.GL_T2F_V3F
M.GL_T4F_C4F_N3F_V4F = ffi.C.GL_T4F_C4F_N3F_V4F
M.GL_T4F_V4F = ffi.C.GL_T4F_V4F
M.GL_TEXTURE = ffi.C.GL_TEXTURE
M.GL_TEXTURE0 = ffi.C.GL_TEXTURE0
M.GL_TEXTURE1 = ffi.C.GL_TEXTURE1
M.GL_TEXTURE10 = ffi.C.GL_TEXTURE10
M.GL_TEXTURE11 = ffi.C.GL_TEXTURE11
M.GL_TEXTURE12 = ffi.C.GL_TEXTURE12
M.GL_TEXTURE13 = ffi.C.GL_TEXTURE13
M.GL_TEXTURE14 = ffi.C.GL_TEXTURE14
M.GL_TEXTURE15 = ffi.C.GL_TEXTURE15
M.GL_TEXTURE16 = ffi.C.GL_TEXTURE16
M.GL_TEXTURE17 = ffi.C.GL_TEXTURE17
M.GL_TEXTURE18 = ffi.C.GL_TEXTURE18
M.GL_TEXTURE19 = ffi.C.GL_TEXTURE19
M.GL_TEXTURE2 = ffi.C.GL_TEXTURE2
M.GL_TEXTURE20 = ffi.C.GL_TEXTURE20
M.GL_TEXTURE21 = ffi.C.GL_TEXTURE21
M.GL_TEXTURE22 = ffi.C.GL_TEXTURE22
M.GL_TEXTURE23 = ffi.C.GL_TEXTURE23
M.GL_TEXTURE24 = ffi.C.GL_TEXTURE24
M.GL_TEXTURE25 = ffi.C.GL_TEXTURE25
M.GL_TEXTURE26 = ffi.C.GL_TEXTURE26
M.GL_TEXTURE27 = ffi.C.GL_TEXTURE27
M.GL_TEXTURE28 = ffi.C.GL_TEXTURE28
M.GL_TEXTURE29 = ffi.C.GL_TEXTURE29
M.GL_TEXTURE3 = ffi.C.GL_TEXTURE3
M.GL_TEXTURE30 = ffi.C.GL_TEXTURE30
M.GL_TEXTURE31 = ffi.C.GL_TEXTURE31
M.GL_TEXTURE4 = ffi.C.GL_TEXTURE4
M.GL_TEXTURE5 = ffi.C.GL_TEXTURE5
M.GL_TEXTURE6 = ffi.C.GL_TEXTURE6
M.GL_TEXTURE7 = ffi.C.GL_TEXTURE7
M.GL_TEXTURE8 = ffi.C.GL_TEXTURE8
M.GL_TEXTURE9 = ffi.C.GL_TEXTURE9
M.GL_TEXTURE_1D = ffi.C.GL_TEXTURE_1D
M.GL_TEXTURE_1D_ARRAY = ffi.C.GL_TEXTURE_1D_ARRAY
M.GL_TEXTURE_2D = ffi.C.GL_TEXTURE_2D
M.GL_TEXTURE_2D_ARRAY = ffi.C.GL_TEXTURE_2D_ARRAY
M.GL_TEXTURE_2D_MULTISAMPLE = ffi.C.GL_TEXTURE_2D_MULTISAMPLE
M.GL_TEXTURE_2D_MULTISAMPLE_ARRAY = ffi.C.GL_TEXTURE_2D_MULTISAMPLE_ARRAY
M.GL_TEXTURE_3D = ffi.C.GL_TEXTURE_3D
M.GL_TEXTURE_ALPHA_SIZE = ffi.C.GL_TEXTURE_ALPHA_SIZE
M.GL_TEXTURE_ALPHA_TYPE = ffi.C.GL_TEXTURE_ALPHA_TYPE
M.GL_TEXTURE_BASE_LEVEL = ffi.C.GL_TEXTURE_BASE_LEVEL
M.GL_TEXTURE_BINDING_1D = ffi.C.GL_TEXTURE_BINDING_1D
M.GL_TEXTURE_BINDING_1D_ARRAY = ffi.C.GL_TEXTURE_BINDING_1D_ARRAY
M.GL_TEXTURE_BINDING_2D = ffi.C.GL_TEXTURE_BINDING_2D
M.GL_TEXTURE_BINDING_2D_ARRAY = ffi.C.GL_TEXTURE_BINDING_2D_ARRAY
M.GL_TEXTURE_BINDING_2D_MULTISAMPLE = ffi.C.GL_TEXTURE_BINDING_2D_MULTISAMPLE
M.GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = ffi.C.GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
M.GL_TEXTURE_BINDING_3D = ffi.C.GL_TEXTURE_BINDING_3D
M.GL_TEXTURE_BINDING_BUFFER = ffi.C.GL_TEXTURE_BINDING_BUFFER
M.GL_TEXTURE_BINDING_CUBE_MAP = ffi.C.GL_TEXTURE_BINDING_CUBE_MAP
M.GL_TEXTURE_BINDING_RECTANGLE = ffi.C.GL_TEXTURE_BINDING_RECTANGLE
M.GL_TEXTURE_BIT = ffi.C.GL_TEXTURE_BIT
M.GL_TEXTURE_BLUE_SIZE = ffi.C.GL_TEXTURE_BLUE_SIZE
M.GL_TEXTURE_BLUE_TYPE = ffi.C.GL_TEXTURE_BLUE_TYPE
M.GL_TEXTURE_BORDER = ffi.C.GL_TEXTURE_BORDER
M.GL_TEXTURE_BORDER_COLOR = ffi.C.GL_TEXTURE_BORDER_COLOR
M.GL_TEXTURE_BUFFER = ffi.C.GL_TEXTURE_BUFFER
M.GL_TEXTURE_BUFFER_DATA_STORE_BINDING = ffi.C.GL_TEXTURE_BUFFER_DATA_STORE_BINDING
M.GL_TEXTURE_COMPARE_FUNC = ffi.C.GL_TEXTURE_COMPARE_FUNC
M.GL_TEXTURE_COMPARE_MODE = ffi.C.GL_TEXTURE_COMPARE_MODE
M.GL_TEXTURE_COMPONENTS = ffi.C.GL_TEXTURE_COMPONENTS
M.GL_TEXTURE_COMPRESSED = ffi.C.GL_TEXTURE_COMPRESSED
M.GL_TEXTURE_COMPRESSED_IMAGE_SIZE = ffi.C.GL_TEXTURE_COMPRESSED_IMAGE_SIZE
M.GL_TEXTURE_COMPRESSION_HINT = ffi.C.GL_TEXTURE_COMPRESSION_HINT
M.GL_TEXTURE_COORD_ARRAY = ffi.C.GL_TEXTURE_COORD_ARRAY
M.GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = ffi.C.GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
M.GL_TEXTURE_COORD_ARRAY_POINTER = ffi.C.GL_TEXTURE_COORD_ARRAY_POINTER
M.GL_TEXTURE_COORD_ARRAY_SIZE = ffi.C.GL_TEXTURE_COORD_ARRAY_SIZE
M.GL_TEXTURE_COORD_ARRAY_STRIDE = ffi.C.GL_TEXTURE_COORD_ARRAY_STRIDE
M.GL_TEXTURE_COORD_ARRAY_TYPE = ffi.C.GL_TEXTURE_COORD_ARRAY_TYPE
M.GL_TEXTURE_CUBE_MAP = ffi.C.GL_TEXTURE_CUBE_MAP
M.GL_TEXTURE_CUBE_MAP_NEGATIVE_X = ffi.C.GL_TEXTURE_CUBE_MAP_NEGATIVE_X
M.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = ffi.C.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
M.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = ffi.C.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
M.GL_TEXTURE_CUBE_MAP_POSITIVE_X = ffi.C.GL_TEXTURE_CUBE_MAP_POSITIVE_X
M.GL_TEXTURE_CUBE_MAP_POSITIVE_Y = ffi.C.GL_TEXTURE_CUBE_MAP_POSITIVE_Y
M.GL_TEXTURE_CUBE_MAP_POSITIVE_Z = ffi.C.GL_TEXTURE_CUBE_MAP_POSITIVE_Z
M.GL_TEXTURE_CUBE_MAP_SEAMLESS = ffi.C.GL_TEXTURE_CUBE_MAP_SEAMLESS
M.GL_TEXTURE_DEPTH = ffi.C.GL_TEXTURE_DEPTH
M.GL_TEXTURE_DEPTH_SIZE = ffi.C.GL_TEXTURE_DEPTH_SIZE
M.GL_TEXTURE_DEPTH_TYPE = ffi.C.GL_TEXTURE_DEPTH_TYPE
M.GL_TEXTURE_ENV = ffi.C.GL_TEXTURE_ENV
M.GL_TEXTURE_ENV_COLOR = ffi.C.GL_TEXTURE_ENV_COLOR
M.GL_TEXTURE_ENV_MODE = ffi.C.GL_TEXTURE_ENV_MODE
M.GL_TEXTURE_FILTER_CONTROL = ffi.C.GL_TEXTURE_FILTER_CONTROL
M.GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = ffi.C.GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
M.GL_TEXTURE_GEN_MODE = ffi.C.GL_TEXTURE_GEN_MODE
M.GL_TEXTURE_GEN_Q = ffi.C.GL_TEXTURE_GEN_Q
M.GL_TEXTURE_GEN_R = ffi.C.GL_TEXTURE_GEN_R
M.GL_TEXTURE_GEN_S = ffi.C.GL_TEXTURE_GEN_S
M.GL_TEXTURE_GEN_T = ffi.C.GL_TEXTURE_GEN_T
M.GL_TEXTURE_GREEN_SIZE = ffi.C.GL_TEXTURE_GREEN_SIZE
M.GL_TEXTURE_GREEN_TYPE = ffi.C.GL_TEXTURE_GREEN_TYPE
M.GL_TEXTURE_HEIGHT = ffi.C.GL_TEXTURE_HEIGHT
M.GL_TEXTURE_INTENSITY_SIZE = ffi.C.GL_TEXTURE_INTENSITY_SIZE
M.GL_TEXTURE_INTENSITY_TYPE = ffi.C.GL_TEXTURE_INTENSITY_TYPE
M.GL_TEXTURE_INTERNAL_FORMAT = ffi.C.GL_TEXTURE_INTERNAL_FORMAT
M.GL_TEXTURE_LOD_BIAS = ffi.C.GL_TEXTURE_LOD_BIAS
M.GL_TEXTURE_LUMINANCE_SIZE = ffi.C.GL_TEXTURE_LUMINANCE_SIZE
M.GL_TEXTURE_LUMINANCE_TYPE = ffi.C.GL_TEXTURE_LUMINANCE_TYPE
M.GL_TEXTURE_MAG_FILTER = ffi.C.GL_TEXTURE_MAG_FILTER
M.GL_TEXTURE_MATRIX = ffi.C.GL_TEXTURE_MATRIX
M.GL_TEXTURE_MAX_LEVEL = ffi.C.GL_TEXTURE_MAX_LEVEL
M.GL_TEXTURE_MAX_LOD = ffi.C.GL_TEXTURE_MAX_LOD
M.GL_TEXTURE_MIN_FILTER = ffi.C.GL_TEXTURE_MIN_FILTER
M.GL_TEXTURE_MIN_LOD = ffi.C.GL_TEXTURE_MIN_LOD
M.GL_TEXTURE_PRIORITY = ffi.C.GL_TEXTURE_PRIORITY
M.GL_TEXTURE_RECTANGLE = ffi.C.GL_TEXTURE_RECTANGLE
M.GL_TEXTURE_RED_SIZE = ffi.C.GL_TEXTURE_RED_SIZE
M.GL_TEXTURE_RED_TYPE = ffi.C.GL_TEXTURE_RED_TYPE
M.GL_TEXTURE_RESIDENT = ffi.C.GL_TEXTURE_RESIDENT
M.GL_TEXTURE_SAMPLES = ffi.C.GL_TEXTURE_SAMPLES
M.GL_TEXTURE_SHARED_SIZE = ffi.C.GL_TEXTURE_SHARED_SIZE
M.GL_TEXTURE_STACK_DEPTH = ffi.C.GL_TEXTURE_STACK_DEPTH
M.GL_TEXTURE_STENCIL_SIZE = ffi.C.GL_TEXTURE_STENCIL_SIZE
M.GL_TEXTURE_SWIZZLE_A = ffi.C.GL_TEXTURE_SWIZZLE_A
M.GL_TEXTURE_SWIZZLE_B = ffi.C.GL_TEXTURE_SWIZZLE_B
M.GL_TEXTURE_SWIZZLE_G = ffi.C.GL_TEXTURE_SWIZZLE_G
M.GL_TEXTURE_SWIZZLE_R = ffi.C.GL_TEXTURE_SWIZZLE_R
M.GL_TEXTURE_SWIZZLE_RGBA = ffi.C.GL_TEXTURE_SWIZZLE_RGBA
M.GL_TEXTURE_WIDTH = ffi.C.GL_TEXTURE_WIDTH
M.GL_TEXTURE_WRAP_R = ffi.C.GL_TEXTURE_WRAP_R
M.GL_TEXTURE_WRAP_S = ffi.C.GL_TEXTURE_WRAP_S
M.GL_TEXTURE_WRAP_T = ffi.C.GL_TEXTURE_WRAP_T
M.GL_TIMEOUT_EXPIRED = ffi.C.GL_TIMEOUT_EXPIRED
-- M.GL_TIMEOUT_IGNORED = ffi.C.GL_TIMEOUT_IGNORED
M.GL_TIMESTAMP = ffi.C.GL_TIMESTAMP
M.GL_TIME_ELAPSED = ffi.C.GL_TIME_ELAPSED
M.GL_TRANSFORM_BIT = ffi.C.GL_TRANSFORM_BIT
M.GL_TRANSFORM_FEEDBACK_BUFFER = ffi.C.GL_TRANSFORM_FEEDBACK_BUFFER
M.GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = ffi.C.GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
M.GL_TRANSFORM_FEEDBACK_BUFFER_MODE = ffi.C.GL_TRANSFORM_FEEDBACK_BUFFER_MODE
M.GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = ffi.C.GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
M.GL_TRANSFORM_FEEDBACK_BUFFER_START = ffi.C.GL_TRANSFORM_FEEDBACK_BUFFER_START
M.GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = ffi.C.GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
M.GL_TRANSFORM_FEEDBACK_VARYINGS = ffi.C.GL_TRANSFORM_FEEDBACK_VARYINGS
M.GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = ffi.C.GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
M.GL_TRANSPOSE_COLOR_MATRIX = ffi.C.GL_TRANSPOSE_COLOR_MATRIX
M.GL_TRANSPOSE_MODELVIEW_MATRIX = ffi.C.GL_TRANSPOSE_MODELVIEW_MATRIX
M.GL_TRANSPOSE_PROJECTION_MATRIX = ffi.C.GL_TRANSPOSE_PROJECTION_MATRIX
M.GL_TRANSPOSE_TEXTURE_MATRIX = ffi.C.GL_TRANSPOSE_TEXTURE_MATRIX
M.GL_TRIANGLES = ffi.C.GL_TRIANGLES
M.GL_TRIANGLES_ADJACENCY = ffi.C.GL_TRIANGLES_ADJACENCY
M.GL_TRIANGLE_FAN = ffi.C.GL_TRIANGLE_FAN
M.GL_TRIANGLE_STRIP = ffi.C.GL_TRIANGLE_STRIP
M.GL_TRIANGLE_STRIP_ADJACENCY = ffi.C.GL_TRIANGLE_STRIP_ADJACENCY
M.GL_TRUE = ffi.C.GL_TRUE
M.GL_UNIFORM_ARRAY_STRIDE = ffi.C.GL_UNIFORM_ARRAY_STRIDE
M.GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = ffi.C.GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
M.GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = ffi.C.GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
M.GL_UNIFORM_BLOCK_BINDING = ffi.C.GL_UNIFORM_BLOCK_BINDING
M.GL_UNIFORM_BLOCK_DATA_SIZE = ffi.C.GL_UNIFORM_BLOCK_DATA_SIZE
M.GL_UNIFORM_BLOCK_INDEX = ffi.C.GL_UNIFORM_BLOCK_INDEX
M.GL_UNIFORM_BLOCK_NAME_LENGTH = ffi.C.GL_UNIFORM_BLOCK_NAME_LENGTH
M.GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = ffi.C.GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
M.GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = ffi.C.GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
M.GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = ffi.C.GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
M.GL_UNIFORM_BUFFER = ffi.C.GL_UNIFORM_BUFFER
M.GL_UNIFORM_BUFFER_BINDING = ffi.C.GL_UNIFORM_BUFFER_BINDING
M.GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = ffi.C.GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
M.GL_UNIFORM_BUFFER_SIZE = ffi.C.GL_UNIFORM_BUFFER_SIZE
M.GL_UNIFORM_BUFFER_START = ffi.C.GL_UNIFORM_BUFFER_START
M.GL_UNIFORM_IS_ROW_MAJOR = ffi.C.GL_UNIFORM_IS_ROW_MAJOR
M.GL_UNIFORM_MATRIX_STRIDE = ffi.C.GL_UNIFORM_MATRIX_STRIDE
M.GL_UNIFORM_NAME_LENGTH = ffi.C.GL_UNIFORM_NAME_LENGTH
M.GL_UNIFORM_OFFSET = ffi.C.GL_UNIFORM_OFFSET
M.GL_UNIFORM_SIZE = ffi.C.GL_UNIFORM_SIZE
M.GL_UNIFORM_TYPE = ffi.C.GL_UNIFORM_TYPE
M.GL_UNKNOWN_CONTEXT_RESET_ARB = ffi.C.GL_UNKNOWN_CONTEXT_RESET_ARB
M.GL_UNPACK_ALIGNMENT = ffi.C.GL_UNPACK_ALIGNMENT
M.GL_UNPACK_IMAGE_HEIGHT = ffi.C.GL_UNPACK_IMAGE_HEIGHT
M.GL_UNPACK_LSB_FIRST = ffi.C.GL_UNPACK_LSB_FIRST
M.GL_UNPACK_ROW_LENGTH = ffi.C.GL_UNPACK_ROW_LENGTH
M.GL_UNPACK_SKIP_IMAGES = ffi.C.GL_UNPACK_SKIP_IMAGES
M.GL_UNPACK_SKIP_PIXELS = ffi.C.GL_UNPACK_SKIP_PIXELS
M.GL_UNPACK_SKIP_ROWS = ffi.C.GL_UNPACK_SKIP_ROWS
M.GL_UNPACK_SWAP_BYTES = ffi.C.GL_UNPACK_SWAP_BYTES
M.GL_UNSIGNALED = ffi.C.GL_UNSIGNALED
M.GL_UNSIGNED_BYTE = ffi.C.GL_UNSIGNED_BYTE
M.GL_UNSIGNED_BYTE_2_3_3_REV = ffi.C.GL_UNSIGNED_BYTE_2_3_3_REV
M.GL_UNSIGNED_BYTE_3_3_2 = ffi.C.GL_UNSIGNED_BYTE_3_3_2
M.GL_UNSIGNED_INT = ffi.C.GL_UNSIGNED_INT
M.GL_UNSIGNED_INT_10F_11F_11F_REV = ffi.C.GL_UNSIGNED_INT_10F_11F_11F_REV
M.GL_UNSIGNED_INT_10_10_10_2 = ffi.C.GL_UNSIGNED_INT_10_10_10_2
M.GL_UNSIGNED_INT_24_8 = ffi.C.GL_UNSIGNED_INT_24_8
M.GL_UNSIGNED_INT_2_10_10_10_REV = ffi.C.GL_UNSIGNED_INT_2_10_10_10_REV
M.GL_UNSIGNED_INT_5_9_9_9_REV = ffi.C.GL_UNSIGNED_INT_5_9_9_9_REV
M.GL_UNSIGNED_INT_8_8_8_8 = ffi.C.GL_UNSIGNED_INT_8_8_8_8
M.GL_UNSIGNED_INT_8_8_8_8_REV = ffi.C.GL_UNSIGNED_INT_8_8_8_8_REV
M.GL_UNSIGNED_INT_SAMPLER_1D = ffi.C.GL_UNSIGNED_INT_SAMPLER_1D
M.GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = ffi.C.GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
M.GL_UNSIGNED_INT_SAMPLER_2D = ffi.C.GL_UNSIGNED_INT_SAMPLER_2D
M.GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = ffi.C.GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
M.GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = ffi.C.GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
M.GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = ffi.C.GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
M.GL_UNSIGNED_INT_SAMPLER_2D_RECT = ffi.C.GL_UNSIGNED_INT_SAMPLER_2D_RECT
M.GL_UNSIGNED_INT_SAMPLER_3D = ffi.C.GL_UNSIGNED_INT_SAMPLER_3D
M.GL_UNSIGNED_INT_SAMPLER_BUFFER = ffi.C.GL_UNSIGNED_INT_SAMPLER_BUFFER
M.GL_UNSIGNED_INT_SAMPLER_CUBE = ffi.C.GL_UNSIGNED_INT_SAMPLER_CUBE
M.GL_UNSIGNED_INT_VEC2 = ffi.C.GL_UNSIGNED_INT_VEC2
M.GL_UNSIGNED_INT_VEC3 = ffi.C.GL_UNSIGNED_INT_VEC3
M.GL_UNSIGNED_INT_VEC4 = ffi.C.GL_UNSIGNED_INT_VEC4
M.GL_UNSIGNED_NORMALIZED = ffi.C.GL_UNSIGNED_NORMALIZED
M.GL_UNSIGNED_SHORT = ffi.C.GL_UNSIGNED_SHORT
M.GL_UNSIGNED_SHORT_1_5_5_5_REV = ffi.C.GL_UNSIGNED_SHORT_1_5_5_5_REV
M.GL_UNSIGNED_SHORT_4_4_4_4 = ffi.C.GL_UNSIGNED_SHORT_4_4_4_4
M.GL_UNSIGNED_SHORT_4_4_4_4_REV = ffi.C.GL_UNSIGNED_SHORT_4_4_4_4_REV
M.GL_UNSIGNED_SHORT_5_5_5_1 = ffi.C.GL_UNSIGNED_SHORT_5_5_5_1
M.GL_UNSIGNED_SHORT_5_6_5 = ffi.C.GL_UNSIGNED_SHORT_5_6_5
M.GL_UNSIGNED_SHORT_5_6_5_REV = ffi.C.GL_UNSIGNED_SHORT_5_6_5_REV
M.GL_UPPER_LEFT = ffi.C.GL_UPPER_LEFT
M.GL_V2F = ffi.C.GL_V2F
M.GL_V3F = ffi.C.GL_V3F
M.GL_VALIDATE_STATUS = ffi.C.GL_VALIDATE_STATUS
M.GL_VENDOR = ffi.C.GL_VENDOR
M.GL_VERSION = ffi.C.GL_VERSION
M.GL_VERTEX_ARRAY = ffi.C.GL_VERTEX_ARRAY
M.GL_VERTEX_ARRAY_BINDING = ffi.C.GL_VERTEX_ARRAY_BINDING
M.GL_VERTEX_ARRAY_BUFFER_BINDING = ffi.C.GL_VERTEX_ARRAY_BUFFER_BINDING
M.GL_VERTEX_ARRAY_POINTER = ffi.C.GL_VERTEX_ARRAY_POINTER
M.GL_VERTEX_ARRAY_SIZE = ffi.C.GL_VERTEX_ARRAY_SIZE
M.GL_VERTEX_ARRAY_STRIDE = ffi.C.GL_VERTEX_ARRAY_STRIDE
M.GL_VERTEX_ARRAY_TYPE = ffi.C.GL_VERTEX_ARRAY_TYPE
M.GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = ffi.C.GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
M.GL_VERTEX_ATTRIB_ARRAY_DIVISOR = ffi.C.GL_VERTEX_ATTRIB_ARRAY_DIVISOR
M.GL_VERTEX_ATTRIB_ARRAY_ENABLED = ffi.C.GL_VERTEX_ATTRIB_ARRAY_ENABLED
M.GL_VERTEX_ATTRIB_ARRAY_INTEGER = ffi.C.GL_VERTEX_ATTRIB_ARRAY_INTEGER
M.GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = ffi.C.GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
M.GL_VERTEX_ATTRIB_ARRAY_POINTER = ffi.C.GL_VERTEX_ATTRIB_ARRAY_POINTER
M.GL_VERTEX_ATTRIB_ARRAY_SIZE = ffi.C.GL_VERTEX_ATTRIB_ARRAY_SIZE
M.GL_VERTEX_ATTRIB_ARRAY_STRIDE = ffi.C.GL_VERTEX_ATTRIB_ARRAY_STRIDE
M.GL_VERTEX_ATTRIB_ARRAY_TYPE = ffi.C.GL_VERTEX_ATTRIB_ARRAY_TYPE
M.GL_VERTEX_PROGRAM_POINT_SIZE = ffi.C.GL_VERTEX_PROGRAM_POINT_SIZE
M.GL_VERTEX_PROGRAM_TWO_SIDE = ffi.C.GL_VERTEX_PROGRAM_TWO_SIDE
M.GL_VERTEX_SHADER = ffi.C.GL_VERTEX_SHADER
M.GL_VIEWPORT = ffi.C.GL_VIEWPORT
M.GL_VIEWPORT_BIT = ffi.C.GL_VIEWPORT_BIT
M.GL_WAIT_FAILED = ffi.C.GL_WAIT_FAILED
M.GL_WEIGHT_ARRAY_BUFFER_BINDING = ffi.C.GL_WEIGHT_ARRAY_BUFFER_BINDING
M.GL_WRITE_ONLY = ffi.C.GL_WRITE_ONLY
M.GL_XOR = ffi.C.GL_XOR
M.GL_ZERO = ffi.C.GL_ZERO
M.GL_ZOOM_X = ffi.C.GL_ZOOM_X
M.GL_ZOOM_Y = ffi.C.GL_ZOOM_Y
M.GL_VERSION_1_0 = ffi.C.GL_VERSION_1_0
M.GL_VERSION_1_1 = ffi.C.GL_VERSION_1_1
M.GL_VERSION_1_2 = ffi.C.GL_VERSION_1_2
M.GL_VERSION_1_3 = ffi.C.GL_VERSION_1_3
M.GL_VERSION_1_4 = ffi.C.GL_VERSION_1_4
M.GL_VERSION_1_5 = ffi.C.GL_VERSION_1_5
M.GL_VERSION_2_0 = ffi.C.GL_VERSION_2_0
M.GL_VERSION_2_1 = ffi.C.GL_VERSION_2_1
M.GL_VERSION_3_0 = ffi.C.GL_VERSION_3_0
M.GL_VERSION_3_1 = ffi.C.GL_VERSION_3_1
M.GL_VERSION_3_2 = ffi.C.GL_VERSION_3_2
M.GL_VERSION_3_3 = ffi.C.GL_VERSION_3_3
M.GL_ARB_multisample = ffi.C.GL_ARB_multisample
M.GL_ARB_robustness = ffi.C.GL_ARB_robustness
M.GL_KHR_debug = ffi.C.GL_KHR_debug

local is_loaded = false
M.load = function(glfw)
    if is_loaded then
        return
    end
    is_loaded = true

M.glAccum = ffi.cast(ffi.typeof("PFNGLACCUMPROC"), glfw.getProcAddress("glAccum"))
M.glActiveTexture = ffi.cast(ffi.typeof("PFNGLACTIVETEXTUREPROC"), glfw.getProcAddress("glActiveTexture"))
M.glAlphaFunc = ffi.cast(ffi.typeof("PFNGLALPHAFUNCPROC"), glfw.getProcAddress("glAlphaFunc"))
M.glAreTexturesResident = ffi.cast(ffi.typeof("PFNGLARETEXTURESRESIDENTPROC"), glfw.getProcAddress("glAreTexturesResident"))
M.glArrayElement = ffi.cast(ffi.typeof("PFNGLARRAYELEMENTPROC"), glfw.getProcAddress("glArrayElement"))
M.glAttachShader = ffi.cast(ffi.typeof("PFNGLATTACHSHADERPROC"), glfw.getProcAddress("glAttachShader"))
M.glBegin = ffi.cast(ffi.typeof("PFNGLBEGINPROC"), glfw.getProcAddress("glBegin"))
M.glBeginConditionalRender = ffi.cast(ffi.typeof("PFNGLBEGINCONDITIONALRENDERPROC"), glfw.getProcAddress("glBeginConditionalRender"))
M.glBeginQuery = ffi.cast(ffi.typeof("PFNGLBEGINQUERYPROC"), glfw.getProcAddress("glBeginQuery"))
M.glBeginTransformFeedback = ffi.cast(ffi.typeof("PFNGLBEGINTRANSFORMFEEDBACKPROC"), glfw.getProcAddress("glBeginTransformFeedback"))
M.glBindAttribLocation = ffi.cast(ffi.typeof("PFNGLBINDATTRIBLOCATIONPROC"), glfw.getProcAddress("glBindAttribLocation"))
M.glBindBuffer = ffi.cast(ffi.typeof("PFNGLBINDBUFFERPROC"), glfw.getProcAddress("glBindBuffer"))
M.glBindBufferBase = ffi.cast(ffi.typeof("PFNGLBINDBUFFERBASEPROC"), glfw.getProcAddress("glBindBufferBase"))
M.glBindBufferRange = ffi.cast(ffi.typeof("PFNGLBINDBUFFERRANGEPROC"), glfw.getProcAddress("glBindBufferRange"))
M.glBindFragDataLocation = ffi.cast(ffi.typeof("PFNGLBINDFRAGDATALOCATIONPROC"), glfw.getProcAddress("glBindFragDataLocation"))
M.glBindFragDataLocationIndexed = ffi.cast(ffi.typeof("PFNGLBINDFRAGDATALOCATIONINDEXEDPROC"), glfw.getProcAddress("glBindFragDataLocationIndexed"))
M.glBindFramebuffer = ffi.cast(ffi.typeof("PFNGLBINDFRAMEBUFFERPROC"), glfw.getProcAddress("glBindFramebuffer"))
M.glBindRenderbuffer = ffi.cast(ffi.typeof("PFNGLBINDRENDERBUFFERPROC"), glfw.getProcAddress("glBindRenderbuffer"))
M.glBindSampler = ffi.cast(ffi.typeof("PFNGLBINDSAMPLERPROC"), glfw.getProcAddress("glBindSampler"))
M.glBindTexture = ffi.cast(ffi.typeof("PFNGLBINDTEXTUREPROC"), glfw.getProcAddress("glBindTexture"))
M.glBindVertexArray = ffi.cast(ffi.typeof("PFNGLBINDVERTEXARRAYPROC"), glfw.getProcAddress("glBindVertexArray"))
M.glBitmap = ffi.cast(ffi.typeof("PFNGLBITMAPPROC"), glfw.getProcAddress("glBitmap"))
M.glBlendColor = ffi.cast(ffi.typeof("PFNGLBLENDCOLORPROC"), glfw.getProcAddress("glBlendColor"))
M.glBlendEquation = ffi.cast(ffi.typeof("PFNGLBLENDEQUATIONPROC"), glfw.getProcAddress("glBlendEquation"))
M.glBlendEquationSeparate = ffi.cast(ffi.typeof("PFNGLBLENDEQUATIONSEPARATEPROC"), glfw.getProcAddress("glBlendEquationSeparate"))
M.glBlendFunc = ffi.cast(ffi.typeof("PFNGLBLENDFUNCPROC"), glfw.getProcAddress("glBlendFunc"))
M.glBlendFuncSeparate = ffi.cast(ffi.typeof("PFNGLBLENDFUNCSEPARATEPROC"), glfw.getProcAddress("glBlendFuncSeparate"))
M.glBlitFramebuffer = ffi.cast(ffi.typeof("PFNGLBLITFRAMEBUFFERPROC"), glfw.getProcAddress("glBlitFramebuffer"))
M.glBufferData = ffi.cast(ffi.typeof("PFNGLBUFFERDATAPROC"), glfw.getProcAddress("glBufferData"))
M.glBufferSubData = ffi.cast(ffi.typeof("PFNGLBUFFERSUBDATAPROC"), glfw.getProcAddress("glBufferSubData"))
M.glCallList = ffi.cast(ffi.typeof("PFNGLCALLLISTPROC"), glfw.getProcAddress("glCallList"))
M.glCallLists = ffi.cast(ffi.typeof("PFNGLCALLLISTSPROC"), glfw.getProcAddress("glCallLists"))
M.glCheckFramebufferStatus = ffi.cast(ffi.typeof("PFNGLCHECKFRAMEBUFFERSTATUSPROC"), glfw.getProcAddress("glCheckFramebufferStatus"))
M.glClampColor = ffi.cast(ffi.typeof("PFNGLCLAMPCOLORPROC"), glfw.getProcAddress("glClampColor"))
M.glClear = ffi.cast(ffi.typeof("PFNGLCLEARPROC"), glfw.getProcAddress("glClear"))
M.glClearAccum = ffi.cast(ffi.typeof("PFNGLCLEARACCUMPROC"), glfw.getProcAddress("glClearAccum"))
M.glClearBufferfi = ffi.cast(ffi.typeof("PFNGLCLEARBUFFERFIPROC"), glfw.getProcAddress("glClearBufferfi"))
M.glClearBufferfv = ffi.cast(ffi.typeof("PFNGLCLEARBUFFERFVPROC"), glfw.getProcAddress("glClearBufferfv"))
M.glClearBufferiv = ffi.cast(ffi.typeof("PFNGLCLEARBUFFERIVPROC"), glfw.getProcAddress("glClearBufferiv"))
M.glClearBufferuiv = ffi.cast(ffi.typeof("PFNGLCLEARBUFFERUIVPROC"), glfw.getProcAddress("glClearBufferuiv"))
M.glClearColor = ffi.cast(ffi.typeof("PFNGLCLEARCOLORPROC"), glfw.getProcAddress("glClearColor"))
M.glClearDepth = ffi.cast(ffi.typeof("PFNGLCLEARDEPTHPROC"), glfw.getProcAddress("glClearDepth"))
M.glClearIndex = ffi.cast(ffi.typeof("PFNGLCLEARINDEXPROC"), glfw.getProcAddress("glClearIndex"))
M.glClearStencil = ffi.cast(ffi.typeof("PFNGLCLEARSTENCILPROC"), glfw.getProcAddress("glClearStencil"))
M.glClientActiveTexture = ffi.cast(ffi.typeof("PFNGLCLIENTACTIVETEXTUREPROC"), glfw.getProcAddress("glClientActiveTexture"))
M.glClientWaitSync = ffi.cast(ffi.typeof("PFNGLCLIENTWAITSYNCPROC"), glfw.getProcAddress("glClientWaitSync"))
M.glClipPlane = ffi.cast(ffi.typeof("PFNGLCLIPPLANEPROC"), glfw.getProcAddress("glClipPlane"))
M.glColor3b = ffi.cast(ffi.typeof("PFNGLCOLOR3BPROC"), glfw.getProcAddress("glColor3b"))
M.glColor3bv = ffi.cast(ffi.typeof("PFNGLCOLOR3BVPROC"), glfw.getProcAddress("glColor3bv"))
M.glColor3d = ffi.cast(ffi.typeof("PFNGLCOLOR3DPROC"), glfw.getProcAddress("glColor3d"))
M.glColor3dv = ffi.cast(ffi.typeof("PFNGLCOLOR3DVPROC"), glfw.getProcAddress("glColor3dv"))
M.glColor3f = ffi.cast(ffi.typeof("PFNGLCOLOR3FPROC"), glfw.getProcAddress("glColor3f"))
M.glColor3fv = ffi.cast(ffi.typeof("PFNGLCOLOR3FVPROC"), glfw.getProcAddress("glColor3fv"))
M.glColor3i = ffi.cast(ffi.typeof("PFNGLCOLOR3IPROC"), glfw.getProcAddress("glColor3i"))
M.glColor3iv = ffi.cast(ffi.typeof("PFNGLCOLOR3IVPROC"), glfw.getProcAddress("glColor3iv"))
M.glColor3s = ffi.cast(ffi.typeof("PFNGLCOLOR3SPROC"), glfw.getProcAddress("glColor3s"))
M.glColor3sv = ffi.cast(ffi.typeof("PFNGLCOLOR3SVPROC"), glfw.getProcAddress("glColor3sv"))
M.glColor3ub = ffi.cast(ffi.typeof("PFNGLCOLOR3UBPROC"), glfw.getProcAddress("glColor3ub"))
M.glColor3ubv = ffi.cast(ffi.typeof("PFNGLCOLOR3UBVPROC"), glfw.getProcAddress("glColor3ubv"))
M.glColor3ui = ffi.cast(ffi.typeof("PFNGLCOLOR3UIPROC"), glfw.getProcAddress("glColor3ui"))
M.glColor3uiv = ffi.cast(ffi.typeof("PFNGLCOLOR3UIVPROC"), glfw.getProcAddress("glColor3uiv"))
M.glColor3us = ffi.cast(ffi.typeof("PFNGLCOLOR3USPROC"), glfw.getProcAddress("glColor3us"))
M.glColor3usv = ffi.cast(ffi.typeof("PFNGLCOLOR3USVPROC"), glfw.getProcAddress("glColor3usv"))
M.glColor4b = ffi.cast(ffi.typeof("PFNGLCOLOR4BPROC"), glfw.getProcAddress("glColor4b"))
M.glColor4bv = ffi.cast(ffi.typeof("PFNGLCOLOR4BVPROC"), glfw.getProcAddress("glColor4bv"))
M.glColor4d = ffi.cast(ffi.typeof("PFNGLCOLOR4DPROC"), glfw.getProcAddress("glColor4d"))
M.glColor4dv = ffi.cast(ffi.typeof("PFNGLCOLOR4DVPROC"), glfw.getProcAddress("glColor4dv"))
M.glColor4f = ffi.cast(ffi.typeof("PFNGLCOLOR4FPROC"), glfw.getProcAddress("glColor4f"))
M.glColor4fv = ffi.cast(ffi.typeof("PFNGLCOLOR4FVPROC"), glfw.getProcAddress("glColor4fv"))
M.glColor4i = ffi.cast(ffi.typeof("PFNGLCOLOR4IPROC"), glfw.getProcAddress("glColor4i"))
M.glColor4iv = ffi.cast(ffi.typeof("PFNGLCOLOR4IVPROC"), glfw.getProcAddress("glColor4iv"))
M.glColor4s = ffi.cast(ffi.typeof("PFNGLCOLOR4SPROC"), glfw.getProcAddress("glColor4s"))
M.glColor4sv = ffi.cast(ffi.typeof("PFNGLCOLOR4SVPROC"), glfw.getProcAddress("glColor4sv"))
M.glColor4ub = ffi.cast(ffi.typeof("PFNGLCOLOR4UBPROC"), glfw.getProcAddress("glColor4ub"))
M.glColor4ubv = ffi.cast(ffi.typeof("PFNGLCOLOR4UBVPROC"), glfw.getProcAddress("glColor4ubv"))
M.glColor4ui = ffi.cast(ffi.typeof("PFNGLCOLOR4UIPROC"), glfw.getProcAddress("glColor4ui"))
M.glColor4uiv = ffi.cast(ffi.typeof("PFNGLCOLOR4UIVPROC"), glfw.getProcAddress("glColor4uiv"))
M.glColor4us = ffi.cast(ffi.typeof("PFNGLCOLOR4USPROC"), glfw.getProcAddress("glColor4us"))
M.glColor4usv = ffi.cast(ffi.typeof("PFNGLCOLOR4USVPROC"), glfw.getProcAddress("glColor4usv"))
M.glColorMask = ffi.cast(ffi.typeof("PFNGLCOLORMASKPROC"), glfw.getProcAddress("glColorMask"))
M.glColorMaski = ffi.cast(ffi.typeof("PFNGLCOLORMASKIPROC"), glfw.getProcAddress("glColorMaski"))
M.glColorMaterial = ffi.cast(ffi.typeof("PFNGLCOLORMATERIALPROC"), glfw.getProcAddress("glColorMaterial"))
M.glColorP3ui = ffi.cast(ffi.typeof("PFNGLCOLORP3UIPROC"), glfw.getProcAddress("glColorP3ui"))
M.glColorP3uiv = ffi.cast(ffi.typeof("PFNGLCOLORP3UIVPROC"), glfw.getProcAddress("glColorP3uiv"))
M.glColorP4ui = ffi.cast(ffi.typeof("PFNGLCOLORP4UIPROC"), glfw.getProcAddress("glColorP4ui"))
M.glColorP4uiv = ffi.cast(ffi.typeof("PFNGLCOLORP4UIVPROC"), glfw.getProcAddress("glColorP4uiv"))
M.glColorPointer = ffi.cast(ffi.typeof("PFNGLCOLORPOINTERPROC"), glfw.getProcAddress("glColorPointer"))
M.glCompileShader = ffi.cast(ffi.typeof("PFNGLCOMPILESHADERPROC"), glfw.getProcAddress("glCompileShader"))
M.glCompressedTexImage1D = ffi.cast(ffi.typeof("PFNGLCOMPRESSEDTEXIMAGE1DPROC"), glfw.getProcAddress("glCompressedTexImage1D"))
M.glCompressedTexImage2D = ffi.cast(ffi.typeof("PFNGLCOMPRESSEDTEXIMAGE2DPROC"), glfw.getProcAddress("glCompressedTexImage2D"))
M.glCompressedTexImage3D = ffi.cast(ffi.typeof("PFNGLCOMPRESSEDTEXIMAGE3DPROC"), glfw.getProcAddress("glCompressedTexImage3D"))
M.glCompressedTexSubImage1D = ffi.cast(ffi.typeof("PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC"), glfw.getProcAddress("glCompressedTexSubImage1D"))
M.glCompressedTexSubImage2D = ffi.cast(ffi.typeof("PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC"), glfw.getProcAddress("glCompressedTexSubImage2D"))
M.glCompressedTexSubImage3D = ffi.cast(ffi.typeof("PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC"), glfw.getProcAddress("glCompressedTexSubImage3D"))
M.glCopyBufferSubData = ffi.cast(ffi.typeof("PFNGLCOPYBUFFERSUBDATAPROC"), glfw.getProcAddress("glCopyBufferSubData"))
M.glCopyPixels = ffi.cast(ffi.typeof("PFNGLCOPYPIXELSPROC"), glfw.getProcAddress("glCopyPixels"))
M.glCopyTexImage1D = ffi.cast(ffi.typeof("PFNGLCOPYTEXIMAGE1DPROC"), glfw.getProcAddress("glCopyTexImage1D"))
M.glCopyTexImage2D = ffi.cast(ffi.typeof("PFNGLCOPYTEXIMAGE2DPROC"), glfw.getProcAddress("glCopyTexImage2D"))
M.glCopyTexSubImage1D = ffi.cast(ffi.typeof("PFNGLCOPYTEXSUBIMAGE1DPROC"), glfw.getProcAddress("glCopyTexSubImage1D"))
M.glCopyTexSubImage2D = ffi.cast(ffi.typeof("PFNGLCOPYTEXSUBIMAGE2DPROC"), glfw.getProcAddress("glCopyTexSubImage2D"))
M.glCopyTexSubImage3D = ffi.cast(ffi.typeof("PFNGLCOPYTEXSUBIMAGE3DPROC"), glfw.getProcAddress("glCopyTexSubImage3D"))
M.glCreateProgram = ffi.cast(ffi.typeof("PFNGLCREATEPROGRAMPROC"), glfw.getProcAddress("glCreateProgram"))
M.glCreateShader = ffi.cast(ffi.typeof("PFNGLCREATESHADERPROC"), glfw.getProcAddress("glCreateShader"))
M.glCullFace = ffi.cast(ffi.typeof("PFNGLCULLFACEPROC"), glfw.getProcAddress("glCullFace"))
M.glDebugMessageCallback = ffi.cast(ffi.typeof("PFNGLDEBUGMESSAGECALLBACKPROC"), glfw.getProcAddress("glDebugMessageCallback"))
M.glDebugMessageControl = ffi.cast(ffi.typeof("PFNGLDEBUGMESSAGECONTROLPROC"), glfw.getProcAddress("glDebugMessageControl"))
M.glDebugMessageInsert = ffi.cast(ffi.typeof("PFNGLDEBUGMESSAGEINSERTPROC"), glfw.getProcAddress("glDebugMessageInsert"))
M.glDeleteBuffers = ffi.cast(ffi.typeof("PFNGLDELETEBUFFERSPROC"), glfw.getProcAddress("glDeleteBuffers"))
M.glDeleteFramebuffers = ffi.cast(ffi.typeof("PFNGLDELETEFRAMEBUFFERSPROC"), glfw.getProcAddress("glDeleteFramebuffers"))
M.glDeleteLists = ffi.cast(ffi.typeof("PFNGLDELETELISTSPROC"), glfw.getProcAddress("glDeleteLists"))
M.glDeleteProgram = ffi.cast(ffi.typeof("PFNGLDELETEPROGRAMPROC"), glfw.getProcAddress("glDeleteProgram"))
M.glDeleteQueries = ffi.cast(ffi.typeof("PFNGLDELETEQUERIESPROC"), glfw.getProcAddress("glDeleteQueries"))
M.glDeleteRenderbuffers = ffi.cast(ffi.typeof("PFNGLDELETERENDERBUFFERSPROC"), glfw.getProcAddress("glDeleteRenderbuffers"))
M.glDeleteSamplers = ffi.cast(ffi.typeof("PFNGLDELETESAMPLERSPROC"), glfw.getProcAddress("glDeleteSamplers"))
M.glDeleteShader = ffi.cast(ffi.typeof("PFNGLDELETESHADERPROC"), glfw.getProcAddress("glDeleteShader"))
M.glDeleteSync = ffi.cast(ffi.typeof("PFNGLDELETESYNCPROC"), glfw.getProcAddress("glDeleteSync"))
M.glDeleteTextures = ffi.cast(ffi.typeof("PFNGLDELETETEXTURESPROC"), glfw.getProcAddress("glDeleteTextures"))
M.glDeleteVertexArrays = ffi.cast(ffi.typeof("PFNGLDELETEVERTEXARRAYSPROC"), glfw.getProcAddress("glDeleteVertexArrays"))
M.glDepthFunc = ffi.cast(ffi.typeof("PFNGLDEPTHFUNCPROC"), glfw.getProcAddress("glDepthFunc"))
M.glDepthMask = ffi.cast(ffi.typeof("PFNGLDEPTHMASKPROC"), glfw.getProcAddress("glDepthMask"))
M.glDepthRange = ffi.cast(ffi.typeof("PFNGLDEPTHRANGEPROC"), glfw.getProcAddress("glDepthRange"))
M.glDetachShader = ffi.cast(ffi.typeof("PFNGLDETACHSHADERPROC"), glfw.getProcAddress("glDetachShader"))
M.glDisable = ffi.cast(ffi.typeof("PFNGLDISABLEPROC"), glfw.getProcAddress("glDisable"))
M.glDisableClientState = ffi.cast(ffi.typeof("PFNGLDISABLECLIENTSTATEPROC"), glfw.getProcAddress("glDisableClientState"))
M.glDisableVertexAttribArray = ffi.cast(ffi.typeof("PFNGLDISABLEVERTEXATTRIBARRAYPROC"), glfw.getProcAddress("glDisableVertexAttribArray"))
M.glDisablei = ffi.cast(ffi.typeof("PFNGLDISABLEIPROC"), glfw.getProcAddress("glDisablei"))
M.glDrawArrays = ffi.cast(ffi.typeof("PFNGLDRAWARRAYSPROC"), glfw.getProcAddress("glDrawArrays"))
M.glDrawArraysInstanced = ffi.cast(ffi.typeof("PFNGLDRAWARRAYSINSTANCEDPROC"), glfw.getProcAddress("glDrawArraysInstanced"))
M.glDrawBuffer = ffi.cast(ffi.typeof("PFNGLDRAWBUFFERPROC"), glfw.getProcAddress("glDrawBuffer"))
M.glDrawBuffers = ffi.cast(ffi.typeof("PFNGLDRAWBUFFERSPROC"), glfw.getProcAddress("glDrawBuffers"))
M.glDrawElements = ffi.cast(ffi.typeof("PFNGLDRAWELEMENTSPROC"), glfw.getProcAddress("glDrawElements"))
M.glDrawElementsBaseVertex = ffi.cast(ffi.typeof("PFNGLDRAWELEMENTSBASEVERTEXPROC"), glfw.getProcAddress("glDrawElementsBaseVertex"))
M.glDrawElementsInstanced = ffi.cast(ffi.typeof("PFNGLDRAWELEMENTSINSTANCEDPROC"), glfw.getProcAddress("glDrawElementsInstanced"))
M.glDrawElementsInstancedBaseVertex = ffi.cast(ffi.typeof("PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC"), glfw.getProcAddress("glDrawElementsInstancedBaseVertex"))
M.glDrawPixels = ffi.cast(ffi.typeof("PFNGLDRAWPIXELSPROC"), glfw.getProcAddress("glDrawPixels"))
M.glDrawRangeElements = ffi.cast(ffi.typeof("PFNGLDRAWRANGEELEMENTSPROC"), glfw.getProcAddress("glDrawRangeElements"))
M.glDrawRangeElementsBaseVertex = ffi.cast(ffi.typeof("PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC"), glfw.getProcAddress("glDrawRangeElementsBaseVertex"))
M.glEdgeFlag = ffi.cast(ffi.typeof("PFNGLEDGEFLAGPROC"), glfw.getProcAddress("glEdgeFlag"))
M.glEdgeFlagPointer = ffi.cast(ffi.typeof("PFNGLEDGEFLAGPOINTERPROC"), glfw.getProcAddress("glEdgeFlagPointer"))
M.glEdgeFlagv = ffi.cast(ffi.typeof("PFNGLEDGEFLAGVPROC"), glfw.getProcAddress("glEdgeFlagv"))
M.glEnable = ffi.cast(ffi.typeof("PFNGLENABLEPROC"), glfw.getProcAddress("glEnable"))
M.glEnableClientState = ffi.cast(ffi.typeof("PFNGLENABLECLIENTSTATEPROC"), glfw.getProcAddress("glEnableClientState"))
M.glEnableVertexAttribArray = ffi.cast(ffi.typeof("PFNGLENABLEVERTEXATTRIBARRAYPROC"), glfw.getProcAddress("glEnableVertexAttribArray"))
M.glEnablei = ffi.cast(ffi.typeof("PFNGLENABLEIPROC"), glfw.getProcAddress("glEnablei"))
M.glEnd = ffi.cast(ffi.typeof("PFNGLENDPROC"), glfw.getProcAddress("glEnd"))
M.glEndConditionalRender = ffi.cast(ffi.typeof("PFNGLENDCONDITIONALRENDERPROC"), glfw.getProcAddress("glEndConditionalRender"))
M.glEndList = ffi.cast(ffi.typeof("PFNGLENDLISTPROC"), glfw.getProcAddress("glEndList"))
M.glEndQuery = ffi.cast(ffi.typeof("PFNGLENDQUERYPROC"), glfw.getProcAddress("glEndQuery"))
M.glEndTransformFeedback = ffi.cast(ffi.typeof("PFNGLENDTRANSFORMFEEDBACKPROC"), glfw.getProcAddress("glEndTransformFeedback"))
M.glEvalCoord1d = ffi.cast(ffi.typeof("PFNGLEVALCOORD1DPROC"), glfw.getProcAddress("glEvalCoord1d"))
M.glEvalCoord1dv = ffi.cast(ffi.typeof("PFNGLEVALCOORD1DVPROC"), glfw.getProcAddress("glEvalCoord1dv"))
M.glEvalCoord1f = ffi.cast(ffi.typeof("PFNGLEVALCOORD1FPROC"), glfw.getProcAddress("glEvalCoord1f"))
M.glEvalCoord1fv = ffi.cast(ffi.typeof("PFNGLEVALCOORD1FVPROC"), glfw.getProcAddress("glEvalCoord1fv"))
M.glEvalCoord2d = ffi.cast(ffi.typeof("PFNGLEVALCOORD2DPROC"), glfw.getProcAddress("glEvalCoord2d"))
M.glEvalCoord2dv = ffi.cast(ffi.typeof("PFNGLEVALCOORD2DVPROC"), glfw.getProcAddress("glEvalCoord2dv"))
M.glEvalCoord2f = ffi.cast(ffi.typeof("PFNGLEVALCOORD2FPROC"), glfw.getProcAddress("glEvalCoord2f"))
M.glEvalCoord2fv = ffi.cast(ffi.typeof("PFNGLEVALCOORD2FVPROC"), glfw.getProcAddress("glEvalCoord2fv"))
M.glEvalMesh1 = ffi.cast(ffi.typeof("PFNGLEVALMESH1PROC"), glfw.getProcAddress("glEvalMesh1"))
M.glEvalMesh2 = ffi.cast(ffi.typeof("PFNGLEVALMESH2PROC"), glfw.getProcAddress("glEvalMesh2"))
M.glEvalPoint1 = ffi.cast(ffi.typeof("PFNGLEVALPOINT1PROC"), glfw.getProcAddress("glEvalPoint1"))
M.glEvalPoint2 = ffi.cast(ffi.typeof("PFNGLEVALPOINT2PROC"), glfw.getProcAddress("glEvalPoint2"))
M.glFeedbackBuffer = ffi.cast(ffi.typeof("PFNGLFEEDBACKBUFFERPROC"), glfw.getProcAddress("glFeedbackBuffer"))
M.glFenceSync = ffi.cast(ffi.typeof("PFNGLFENCESYNCPROC"), glfw.getProcAddress("glFenceSync"))
M.glFinish = ffi.cast(ffi.typeof("PFNGLFINISHPROC"), glfw.getProcAddress("glFinish"))
M.glFlush = ffi.cast(ffi.typeof("PFNGLFLUSHPROC"), glfw.getProcAddress("glFlush"))
M.glFlushMappedBufferRange = ffi.cast(ffi.typeof("PFNGLFLUSHMAPPEDBUFFERRANGEPROC"), glfw.getProcAddress("glFlushMappedBufferRange"))
M.glFogCoordPointer = ffi.cast(ffi.typeof("PFNGLFOGCOORDPOINTERPROC"), glfw.getProcAddress("glFogCoordPointer"))
M.glFogCoordd = ffi.cast(ffi.typeof("PFNGLFOGCOORDDPROC"), glfw.getProcAddress("glFogCoordd"))
M.glFogCoorddv = ffi.cast(ffi.typeof("PFNGLFOGCOORDDVPROC"), glfw.getProcAddress("glFogCoorddv"))
M.glFogCoordf = ffi.cast(ffi.typeof("PFNGLFOGCOORDFPROC"), glfw.getProcAddress("glFogCoordf"))
M.glFogCoordfv = ffi.cast(ffi.typeof("PFNGLFOGCOORDFVPROC"), glfw.getProcAddress("glFogCoordfv"))
M.glFogf = ffi.cast(ffi.typeof("PFNGLFOGFPROC"), glfw.getProcAddress("glFogf"))
M.glFogfv = ffi.cast(ffi.typeof("PFNGLFOGFVPROC"), glfw.getProcAddress("glFogfv"))
M.glFogi = ffi.cast(ffi.typeof("PFNGLFOGIPROC"), glfw.getProcAddress("glFogi"))
M.glFogiv = ffi.cast(ffi.typeof("PFNGLFOGIVPROC"), glfw.getProcAddress("glFogiv"))
M.glFramebufferRenderbuffer = ffi.cast(ffi.typeof("PFNGLFRAMEBUFFERRENDERBUFFERPROC"), glfw.getProcAddress("glFramebufferRenderbuffer"))
M.glFramebufferTexture = ffi.cast(ffi.typeof("PFNGLFRAMEBUFFERTEXTUREPROC"), glfw.getProcAddress("glFramebufferTexture"))
M.glFramebufferTexture1D = ffi.cast(ffi.typeof("PFNGLFRAMEBUFFERTEXTURE1DPROC"), glfw.getProcAddress("glFramebufferTexture1D"))
M.glFramebufferTexture2D = ffi.cast(ffi.typeof("PFNGLFRAMEBUFFERTEXTURE2DPROC"), glfw.getProcAddress("glFramebufferTexture2D"))
M.glFramebufferTexture3D = ffi.cast(ffi.typeof("PFNGLFRAMEBUFFERTEXTURE3DPROC"), glfw.getProcAddress("glFramebufferTexture3D"))
M.glFramebufferTextureLayer = ffi.cast(ffi.typeof("PFNGLFRAMEBUFFERTEXTURELAYERPROC"), glfw.getProcAddress("glFramebufferTextureLayer"))
M.glFrontFace = ffi.cast(ffi.typeof("PFNGLFRONTFACEPROC"), glfw.getProcAddress("glFrontFace"))
M.glFrustum = ffi.cast(ffi.typeof("PFNGLFRUSTUMPROC"), glfw.getProcAddress("glFrustum"))
M.glGenBuffers = ffi.cast(ffi.typeof("PFNGLGENBUFFERSPROC"), glfw.getProcAddress("glGenBuffers"))
M.glGenFramebuffers = ffi.cast(ffi.typeof("PFNGLGENFRAMEBUFFERSPROC"), glfw.getProcAddress("glGenFramebuffers"))
M.glGenLists = ffi.cast(ffi.typeof("PFNGLGENLISTSPROC"), glfw.getProcAddress("glGenLists"))
M.glGenQueries = ffi.cast(ffi.typeof("PFNGLGENQUERIESPROC"), glfw.getProcAddress("glGenQueries"))
M.glGenRenderbuffers = ffi.cast(ffi.typeof("PFNGLGENRENDERBUFFERSPROC"), glfw.getProcAddress("glGenRenderbuffers"))
M.glGenSamplers = ffi.cast(ffi.typeof("PFNGLGENSAMPLERSPROC"), glfw.getProcAddress("glGenSamplers"))
M.glGenTextures = ffi.cast(ffi.typeof("PFNGLGENTEXTURESPROC"), glfw.getProcAddress("glGenTextures"))
M.glGenVertexArrays = ffi.cast(ffi.typeof("PFNGLGENVERTEXARRAYSPROC"), glfw.getProcAddress("glGenVertexArrays"))
M.glGenerateMipmap = ffi.cast(ffi.typeof("PFNGLGENERATEMIPMAPPROC"), glfw.getProcAddress("glGenerateMipmap"))
M.glGetActiveAttrib = ffi.cast(ffi.typeof("PFNGLGETACTIVEATTRIBPROC"), glfw.getProcAddress("glGetActiveAttrib"))
M.glGetActiveUniform = ffi.cast(ffi.typeof("PFNGLGETACTIVEUNIFORMPROC"), glfw.getProcAddress("glGetActiveUniform"))
M.glGetActiveUniformBlockName = ffi.cast(ffi.typeof("PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC"), glfw.getProcAddress("glGetActiveUniformBlockName"))
M.glGetActiveUniformBlockiv = ffi.cast(ffi.typeof("PFNGLGETACTIVEUNIFORMBLOCKIVPROC"), glfw.getProcAddress("glGetActiveUniformBlockiv"))
M.glGetActiveUniformName = ffi.cast(ffi.typeof("PFNGLGETACTIVEUNIFORMNAMEPROC"), glfw.getProcAddress("glGetActiveUniformName"))
M.glGetActiveUniformsiv = ffi.cast(ffi.typeof("PFNGLGETACTIVEUNIFORMSIVPROC"), glfw.getProcAddress("glGetActiveUniformsiv"))
M.glGetAttachedShaders = ffi.cast(ffi.typeof("PFNGLGETATTACHEDSHADERSPROC"), glfw.getProcAddress("glGetAttachedShaders"))
M.glGetAttribLocation = ffi.cast(ffi.typeof("PFNGLGETATTRIBLOCATIONPROC"), glfw.getProcAddress("glGetAttribLocation"))
M.glGetBooleani_v = ffi.cast(ffi.typeof("PFNGLGETBOOLEANI_VPROC"), glfw.getProcAddress("glGetBooleani_v"))
M.glGetBooleanv = ffi.cast(ffi.typeof("PFNGLGETBOOLEANVPROC"), glfw.getProcAddress("glGetBooleanv"))
M.glGetBufferParameteri64v = ffi.cast(ffi.typeof("PFNGLGETBUFFERPARAMETERI64VPROC"), glfw.getProcAddress("glGetBufferParameteri64v"))
M.glGetBufferParameteriv = ffi.cast(ffi.typeof("PFNGLGETBUFFERPARAMETERIVPROC"), glfw.getProcAddress("glGetBufferParameteriv"))
M.glGetBufferPointerv = ffi.cast(ffi.typeof("PFNGLGETBUFFERPOINTERVPROC"), glfw.getProcAddress("glGetBufferPointerv"))
M.glGetBufferSubData = ffi.cast(ffi.typeof("PFNGLGETBUFFERSUBDATAPROC"), glfw.getProcAddress("glGetBufferSubData"))
M.glGetClipPlane = ffi.cast(ffi.typeof("PFNGLGETCLIPPLANEPROC"), glfw.getProcAddress("glGetClipPlane"))
M.glGetCompressedTexImage = ffi.cast(ffi.typeof("PFNGLGETCOMPRESSEDTEXIMAGEPROC"), glfw.getProcAddress("glGetCompressedTexImage"))
M.glGetDebugMessageLog = ffi.cast(ffi.typeof("PFNGLGETDEBUGMESSAGELOGPROC"), glfw.getProcAddress("glGetDebugMessageLog"))
M.glGetDoublev = ffi.cast(ffi.typeof("PFNGLGETDOUBLEVPROC"), glfw.getProcAddress("glGetDoublev"))
M.glGetError = ffi.cast(ffi.typeof("PFNGLGETERRORPROC"), glfw.getProcAddress("glGetError"))
M.glGetFloatv = ffi.cast(ffi.typeof("PFNGLGETFLOATVPROC"), glfw.getProcAddress("glGetFloatv"))
M.glGetFragDataIndex = ffi.cast(ffi.typeof("PFNGLGETFRAGDATAINDEXPROC"), glfw.getProcAddress("glGetFragDataIndex"))
M.glGetFragDataLocation = ffi.cast(ffi.typeof("PFNGLGETFRAGDATALOCATIONPROC"), glfw.getProcAddress("glGetFragDataLocation"))
M.glGetFramebufferAttachmentParameteriv = ffi.cast(ffi.typeof("PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC"), glfw.getProcAddress("glGetFramebufferAttachmentParameteriv"))
M.glGetGraphicsResetStatusARB = ffi.cast(ffi.typeof("PFNGLGETGRAPHICSRESETSTATUSARBPROC"), glfw.getProcAddress("glGetGraphicsResetStatusARB"))
M.glGetInteger64i_v = ffi.cast(ffi.typeof("PFNGLGETINTEGER64I_VPROC"), glfw.getProcAddress("glGetInteger64i_v"))
M.glGetInteger64v = ffi.cast(ffi.typeof("PFNGLGETINTEGER64VPROC"), glfw.getProcAddress("glGetInteger64v"))
M.glGetIntegeri_v = ffi.cast(ffi.typeof("PFNGLGETINTEGERI_VPROC"), glfw.getProcAddress("glGetIntegeri_v"))
M.glGetIntegerv = ffi.cast(ffi.typeof("PFNGLGETINTEGERVPROC"), glfw.getProcAddress("glGetIntegerv"))
M.glGetLightfv = ffi.cast(ffi.typeof("PFNGLGETLIGHTFVPROC"), glfw.getProcAddress("glGetLightfv"))
M.glGetLightiv = ffi.cast(ffi.typeof("PFNGLGETLIGHTIVPROC"), glfw.getProcAddress("glGetLightiv"))
M.glGetMapdv = ffi.cast(ffi.typeof("PFNGLGETMAPDVPROC"), glfw.getProcAddress("glGetMapdv"))
M.glGetMapfv = ffi.cast(ffi.typeof("PFNGLGETMAPFVPROC"), glfw.getProcAddress("glGetMapfv"))
M.glGetMapiv = ffi.cast(ffi.typeof("PFNGLGETMAPIVPROC"), glfw.getProcAddress("glGetMapiv"))
M.glGetMaterialfv = ffi.cast(ffi.typeof("PFNGLGETMATERIALFVPROC"), glfw.getProcAddress("glGetMaterialfv"))
M.glGetMaterialiv = ffi.cast(ffi.typeof("PFNGLGETMATERIALIVPROC"), glfw.getProcAddress("glGetMaterialiv"))
M.glGetMultisamplefv = ffi.cast(ffi.typeof("PFNGLGETMULTISAMPLEFVPROC"), glfw.getProcAddress("glGetMultisamplefv"))
M.glGetObjectLabel = ffi.cast(ffi.typeof("PFNGLGETOBJECTLABELPROC"), glfw.getProcAddress("glGetObjectLabel"))
M.glGetObjectPtrLabel = ffi.cast(ffi.typeof("PFNGLGETOBJECTPTRLABELPROC"), glfw.getProcAddress("glGetObjectPtrLabel"))
M.glGetPixelMapfv = ffi.cast(ffi.typeof("PFNGLGETPIXELMAPFVPROC"), glfw.getProcAddress("glGetPixelMapfv"))
M.glGetPixelMapuiv = ffi.cast(ffi.typeof("PFNGLGETPIXELMAPUIVPROC"), glfw.getProcAddress("glGetPixelMapuiv"))
M.glGetPixelMapusv = ffi.cast(ffi.typeof("PFNGLGETPIXELMAPUSVPROC"), glfw.getProcAddress("glGetPixelMapusv"))
M.glGetPointerv = ffi.cast(ffi.typeof("PFNGLGETPOINTERVPROC"), glfw.getProcAddress("glGetPointerv"))
M.glGetPolygonStipple = ffi.cast(ffi.typeof("PFNGLGETPOLYGONSTIPPLEPROC"), glfw.getProcAddress("glGetPolygonStipple"))
M.glGetProgramInfoLog = ffi.cast(ffi.typeof("PFNGLGETPROGRAMINFOLOGPROC"), glfw.getProcAddress("glGetProgramInfoLog"))
M.glGetProgramiv = ffi.cast(ffi.typeof("PFNGLGETPROGRAMIVPROC"), glfw.getProcAddress("glGetProgramiv"))
M.glGetQueryObjecti64v = ffi.cast(ffi.typeof("PFNGLGETQUERYOBJECTI64VPROC"), glfw.getProcAddress("glGetQueryObjecti64v"))
M.glGetQueryObjectiv = ffi.cast(ffi.typeof("PFNGLGETQUERYOBJECTIVPROC"), glfw.getProcAddress("glGetQueryObjectiv"))
M.glGetQueryObjectui64v = ffi.cast(ffi.typeof("PFNGLGETQUERYOBJECTUI64VPROC"), glfw.getProcAddress("glGetQueryObjectui64v"))
M.glGetQueryObjectuiv = ffi.cast(ffi.typeof("PFNGLGETQUERYOBJECTUIVPROC"), glfw.getProcAddress("glGetQueryObjectuiv"))
M.glGetQueryiv = ffi.cast(ffi.typeof("PFNGLGETQUERYIVPROC"), glfw.getProcAddress("glGetQueryiv"))
M.glGetRenderbufferParameteriv = ffi.cast(ffi.typeof("PFNGLGETRENDERBUFFERPARAMETERIVPROC"), glfw.getProcAddress("glGetRenderbufferParameteriv"))
M.glGetSamplerParameterIiv = ffi.cast(ffi.typeof("PFNGLGETSAMPLERPARAMETERIIVPROC"), glfw.getProcAddress("glGetSamplerParameterIiv"))
M.glGetSamplerParameterIuiv = ffi.cast(ffi.typeof("PFNGLGETSAMPLERPARAMETERIUIVPROC"), glfw.getProcAddress("glGetSamplerParameterIuiv"))
M.glGetSamplerParameterfv = ffi.cast(ffi.typeof("PFNGLGETSAMPLERPARAMETERFVPROC"), glfw.getProcAddress("glGetSamplerParameterfv"))
M.glGetSamplerParameteriv = ffi.cast(ffi.typeof("PFNGLGETSAMPLERPARAMETERIVPROC"), glfw.getProcAddress("glGetSamplerParameteriv"))
M.glGetShaderInfoLog = ffi.cast(ffi.typeof("PFNGLGETSHADERINFOLOGPROC"), glfw.getProcAddress("glGetShaderInfoLog"))
M.glGetShaderSource = ffi.cast(ffi.typeof("PFNGLGETSHADERSOURCEPROC"), glfw.getProcAddress("glGetShaderSource"))
M.glGetShaderiv = ffi.cast(ffi.typeof("PFNGLGETSHADERIVPROC"), glfw.getProcAddress("glGetShaderiv"))
M.glGetString = ffi.cast(ffi.typeof("PFNGLGETSTRINGPROC"), glfw.getProcAddress("glGetString"))
M.glGetStringi = ffi.cast(ffi.typeof("PFNGLGETSTRINGIPROC"), glfw.getProcAddress("glGetStringi"))
M.glGetSynciv = ffi.cast(ffi.typeof("PFNGLGETSYNCIVPROC"), glfw.getProcAddress("glGetSynciv"))
M.glGetTexEnvfv = ffi.cast(ffi.typeof("PFNGLGETTEXENVFVPROC"), glfw.getProcAddress("glGetTexEnvfv"))
M.glGetTexEnviv = ffi.cast(ffi.typeof("PFNGLGETTEXENVIVPROC"), glfw.getProcAddress("glGetTexEnviv"))
M.glGetTexGendv = ffi.cast(ffi.typeof("PFNGLGETTEXGENDVPROC"), glfw.getProcAddress("glGetTexGendv"))
M.glGetTexGenfv = ffi.cast(ffi.typeof("PFNGLGETTEXGENFVPROC"), glfw.getProcAddress("glGetTexGenfv"))
M.glGetTexGeniv = ffi.cast(ffi.typeof("PFNGLGETTEXGENIVPROC"), glfw.getProcAddress("glGetTexGeniv"))
M.glGetTexImage = ffi.cast(ffi.typeof("PFNGLGETTEXIMAGEPROC"), glfw.getProcAddress("glGetTexImage"))
M.glGetTexLevelParameterfv = ffi.cast(ffi.typeof("PFNGLGETTEXLEVELPARAMETERFVPROC"), glfw.getProcAddress("glGetTexLevelParameterfv"))
M.glGetTexLevelParameteriv = ffi.cast(ffi.typeof("PFNGLGETTEXLEVELPARAMETERIVPROC"), glfw.getProcAddress("glGetTexLevelParameteriv"))
M.glGetTexParameterIiv = ffi.cast(ffi.typeof("PFNGLGETTEXPARAMETERIIVPROC"), glfw.getProcAddress("glGetTexParameterIiv"))
M.glGetTexParameterIuiv = ffi.cast(ffi.typeof("PFNGLGETTEXPARAMETERIUIVPROC"), glfw.getProcAddress("glGetTexParameterIuiv"))
M.glGetTexParameterfv = ffi.cast(ffi.typeof("PFNGLGETTEXPARAMETERFVPROC"), glfw.getProcAddress("glGetTexParameterfv"))
M.glGetTexParameteriv = ffi.cast(ffi.typeof("PFNGLGETTEXPARAMETERIVPROC"), glfw.getProcAddress("glGetTexParameteriv"))
M.glGetTransformFeedbackVarying = ffi.cast(ffi.typeof("PFNGLGETTRANSFORMFEEDBACKVARYINGPROC"), glfw.getProcAddress("glGetTransformFeedbackVarying"))
M.glGetUniformBlockIndex = ffi.cast(ffi.typeof("PFNGLGETUNIFORMBLOCKINDEXPROC"), glfw.getProcAddress("glGetUniformBlockIndex"))
M.glGetUniformIndices = ffi.cast(ffi.typeof("PFNGLGETUNIFORMINDICESPROC"), glfw.getProcAddress("glGetUniformIndices"))
M.glGetUniformLocation = ffi.cast(ffi.typeof("PFNGLGETUNIFORMLOCATIONPROC"), glfw.getProcAddress("glGetUniformLocation"))
M.glGetUniformfv = ffi.cast(ffi.typeof("PFNGLGETUNIFORMFVPROC"), glfw.getProcAddress("glGetUniformfv"))
M.glGetUniformiv = ffi.cast(ffi.typeof("PFNGLGETUNIFORMIVPROC"), glfw.getProcAddress("glGetUniformiv"))
M.glGetUniformuiv = ffi.cast(ffi.typeof("PFNGLGETUNIFORMUIVPROC"), glfw.getProcAddress("glGetUniformuiv"))
M.glGetVertexAttribIiv = ffi.cast(ffi.typeof("PFNGLGETVERTEXATTRIBIIVPROC"), glfw.getProcAddress("glGetVertexAttribIiv"))
M.glGetVertexAttribIuiv = ffi.cast(ffi.typeof("PFNGLGETVERTEXATTRIBIUIVPROC"), glfw.getProcAddress("glGetVertexAttribIuiv"))
M.glGetVertexAttribPointerv = ffi.cast(ffi.typeof("PFNGLGETVERTEXATTRIBPOINTERVPROC"), glfw.getProcAddress("glGetVertexAttribPointerv"))
M.glGetVertexAttribdv = ffi.cast(ffi.typeof("PFNGLGETVERTEXATTRIBDVPROC"), glfw.getProcAddress("glGetVertexAttribdv"))
M.glGetVertexAttribfv = ffi.cast(ffi.typeof("PFNGLGETVERTEXATTRIBFVPROC"), glfw.getProcAddress("glGetVertexAttribfv"))
M.glGetVertexAttribiv = ffi.cast(ffi.typeof("PFNGLGETVERTEXATTRIBIVPROC"), glfw.getProcAddress("glGetVertexAttribiv"))
M.glGetnColorTableARB = ffi.cast(ffi.typeof("PFNGLGETNCOLORTABLEARBPROC"), glfw.getProcAddress("glGetnColorTableARB"))
M.glGetnCompressedTexImageARB = ffi.cast(ffi.typeof("PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC"), glfw.getProcAddress("glGetnCompressedTexImageARB"))
M.glGetnConvolutionFilterARB = ffi.cast(ffi.typeof("PFNGLGETNCONVOLUTIONFILTERARBPROC"), glfw.getProcAddress("glGetnConvolutionFilterARB"))
M.glGetnHistogramARB = ffi.cast(ffi.typeof("PFNGLGETNHISTOGRAMARBPROC"), glfw.getProcAddress("glGetnHistogramARB"))
M.glGetnMapdvARB = ffi.cast(ffi.typeof("PFNGLGETNMAPDVARBPROC"), glfw.getProcAddress("glGetnMapdvARB"))
M.glGetnMapfvARB = ffi.cast(ffi.typeof("PFNGLGETNMAPFVARBPROC"), glfw.getProcAddress("glGetnMapfvARB"))
M.glGetnMapivARB = ffi.cast(ffi.typeof("PFNGLGETNMAPIVARBPROC"), glfw.getProcAddress("glGetnMapivARB"))
M.glGetnMinmaxARB = ffi.cast(ffi.typeof("PFNGLGETNMINMAXARBPROC"), glfw.getProcAddress("glGetnMinmaxARB"))
M.glGetnPixelMapfvARB = ffi.cast(ffi.typeof("PFNGLGETNPIXELMAPFVARBPROC"), glfw.getProcAddress("glGetnPixelMapfvARB"))
M.glGetnPixelMapuivARB = ffi.cast(ffi.typeof("PFNGLGETNPIXELMAPUIVARBPROC"), glfw.getProcAddress("glGetnPixelMapuivARB"))
M.glGetnPixelMapusvARB = ffi.cast(ffi.typeof("PFNGLGETNPIXELMAPUSVARBPROC"), glfw.getProcAddress("glGetnPixelMapusvARB"))
M.glGetnPolygonStippleARB = ffi.cast(ffi.typeof("PFNGLGETNPOLYGONSTIPPLEARBPROC"), glfw.getProcAddress("glGetnPolygonStippleARB"))
M.glGetnSeparableFilterARB = ffi.cast(ffi.typeof("PFNGLGETNSEPARABLEFILTERARBPROC"), glfw.getProcAddress("glGetnSeparableFilterARB"))
M.glGetnTexImageARB = ffi.cast(ffi.typeof("PFNGLGETNTEXIMAGEARBPROC"), glfw.getProcAddress("glGetnTexImageARB"))
M.glGetnUniformdvARB = ffi.cast(ffi.typeof("PFNGLGETNUNIFORMDVARBPROC"), glfw.getProcAddress("glGetnUniformdvARB"))
M.glGetnUniformfvARB = ffi.cast(ffi.typeof("PFNGLGETNUNIFORMFVARBPROC"), glfw.getProcAddress("glGetnUniformfvARB"))
M.glGetnUniformivARB = ffi.cast(ffi.typeof("PFNGLGETNUNIFORMIVARBPROC"), glfw.getProcAddress("glGetnUniformivARB"))
M.glGetnUniformuivARB = ffi.cast(ffi.typeof("PFNGLGETNUNIFORMUIVARBPROC"), glfw.getProcAddress("glGetnUniformuivARB"))
M.glHint = ffi.cast(ffi.typeof("PFNGLHINTPROC"), glfw.getProcAddress("glHint"))
M.glIndexMask = ffi.cast(ffi.typeof("PFNGLINDEXMASKPROC"), glfw.getProcAddress("glIndexMask"))
M.glIndexPointer = ffi.cast(ffi.typeof("PFNGLINDEXPOINTERPROC"), glfw.getProcAddress("glIndexPointer"))
M.glIndexd = ffi.cast(ffi.typeof("PFNGLINDEXDPROC"), glfw.getProcAddress("glIndexd"))
M.glIndexdv = ffi.cast(ffi.typeof("PFNGLINDEXDVPROC"), glfw.getProcAddress("glIndexdv"))
M.glIndexf = ffi.cast(ffi.typeof("PFNGLINDEXFPROC"), glfw.getProcAddress("glIndexf"))
M.glIndexfv = ffi.cast(ffi.typeof("PFNGLINDEXFVPROC"), glfw.getProcAddress("glIndexfv"))
M.glIndexi = ffi.cast(ffi.typeof("PFNGLINDEXIPROC"), glfw.getProcAddress("glIndexi"))
M.glIndexiv = ffi.cast(ffi.typeof("PFNGLINDEXIVPROC"), glfw.getProcAddress("glIndexiv"))
M.glIndexs = ffi.cast(ffi.typeof("PFNGLINDEXSPROC"), glfw.getProcAddress("glIndexs"))
M.glIndexsv = ffi.cast(ffi.typeof("PFNGLINDEXSVPROC"), glfw.getProcAddress("glIndexsv"))
M.glIndexub = ffi.cast(ffi.typeof("PFNGLINDEXUBPROC"), glfw.getProcAddress("glIndexub"))
M.glIndexubv = ffi.cast(ffi.typeof("PFNGLINDEXUBVPROC"), glfw.getProcAddress("glIndexubv"))
M.glInitNames = ffi.cast(ffi.typeof("PFNGLINITNAMESPROC"), glfw.getProcAddress("glInitNames"))
M.glInterleavedArrays = ffi.cast(ffi.typeof("PFNGLINTERLEAVEDARRAYSPROC"), glfw.getProcAddress("glInterleavedArrays"))
M.glIsBuffer = ffi.cast(ffi.typeof("PFNGLISBUFFERPROC"), glfw.getProcAddress("glIsBuffer"))
M.glIsEnabled = ffi.cast(ffi.typeof("PFNGLISENABLEDPROC"), glfw.getProcAddress("glIsEnabled"))
M.glIsEnabledi = ffi.cast(ffi.typeof("PFNGLISENABLEDIPROC"), glfw.getProcAddress("glIsEnabledi"))
M.glIsFramebuffer = ffi.cast(ffi.typeof("PFNGLISFRAMEBUFFERPROC"), glfw.getProcAddress("glIsFramebuffer"))
M.glIsList = ffi.cast(ffi.typeof("PFNGLISLISTPROC"), glfw.getProcAddress("glIsList"))
M.glIsProgram = ffi.cast(ffi.typeof("PFNGLISPROGRAMPROC"), glfw.getProcAddress("glIsProgram"))
M.glIsQuery = ffi.cast(ffi.typeof("PFNGLISQUERYPROC"), glfw.getProcAddress("glIsQuery"))
M.glIsRenderbuffer = ffi.cast(ffi.typeof("PFNGLISRENDERBUFFERPROC"), glfw.getProcAddress("glIsRenderbuffer"))
M.glIsSampler = ffi.cast(ffi.typeof("PFNGLISSAMPLERPROC"), glfw.getProcAddress("glIsSampler"))
M.glIsShader = ffi.cast(ffi.typeof("PFNGLISSHADERPROC"), glfw.getProcAddress("glIsShader"))
M.glIsSync = ffi.cast(ffi.typeof("PFNGLISSYNCPROC"), glfw.getProcAddress("glIsSync"))
M.glIsTexture = ffi.cast(ffi.typeof("PFNGLISTEXTUREPROC"), glfw.getProcAddress("glIsTexture"))
M.glIsVertexArray = ffi.cast(ffi.typeof("PFNGLISVERTEXARRAYPROC"), glfw.getProcAddress("glIsVertexArray"))
M.glLightModelf = ffi.cast(ffi.typeof("PFNGLLIGHTMODELFPROC"), glfw.getProcAddress("glLightModelf"))
M.glLightModelfv = ffi.cast(ffi.typeof("PFNGLLIGHTMODELFVPROC"), glfw.getProcAddress("glLightModelfv"))
M.glLightModeli = ffi.cast(ffi.typeof("PFNGLLIGHTMODELIPROC"), glfw.getProcAddress("glLightModeli"))
M.glLightModeliv = ffi.cast(ffi.typeof("PFNGLLIGHTMODELIVPROC"), glfw.getProcAddress("glLightModeliv"))
M.glLightf = ffi.cast(ffi.typeof("PFNGLLIGHTFPROC"), glfw.getProcAddress("glLightf"))
M.glLightfv = ffi.cast(ffi.typeof("PFNGLLIGHTFVPROC"), glfw.getProcAddress("glLightfv"))
M.glLighti = ffi.cast(ffi.typeof("PFNGLLIGHTIPROC"), glfw.getProcAddress("glLighti"))
M.glLightiv = ffi.cast(ffi.typeof("PFNGLLIGHTIVPROC"), glfw.getProcAddress("glLightiv"))
M.glLineStipple = ffi.cast(ffi.typeof("PFNGLLINESTIPPLEPROC"), glfw.getProcAddress("glLineStipple"))
M.glLineWidth = ffi.cast(ffi.typeof("PFNGLLINEWIDTHPROC"), glfw.getProcAddress("glLineWidth"))
M.glLinkProgram = ffi.cast(ffi.typeof("PFNGLLINKPROGRAMPROC"), glfw.getProcAddress("glLinkProgram"))
M.glListBase = ffi.cast(ffi.typeof("PFNGLLISTBASEPROC"), glfw.getProcAddress("glListBase"))
M.glLoadIdentity = ffi.cast(ffi.typeof("PFNGLLOADIDENTITYPROC"), glfw.getProcAddress("glLoadIdentity"))
M.glLoadMatrixd = ffi.cast(ffi.typeof("PFNGLLOADMATRIXDPROC"), glfw.getProcAddress("glLoadMatrixd"))
M.glLoadMatrixf = ffi.cast(ffi.typeof("PFNGLLOADMATRIXFPROC"), glfw.getProcAddress("glLoadMatrixf"))
M.glLoadName = ffi.cast(ffi.typeof("PFNGLLOADNAMEPROC"), glfw.getProcAddress("glLoadName"))
M.glLoadTransposeMatrixd = ffi.cast(ffi.typeof("PFNGLLOADTRANSPOSEMATRIXDPROC"), glfw.getProcAddress("glLoadTransposeMatrixd"))
M.glLoadTransposeMatrixf = ffi.cast(ffi.typeof("PFNGLLOADTRANSPOSEMATRIXFPROC"), glfw.getProcAddress("glLoadTransposeMatrixf"))
M.glLogicOp = ffi.cast(ffi.typeof("PFNGLLOGICOPPROC"), glfw.getProcAddress("glLogicOp"))
M.glMap1d = ffi.cast(ffi.typeof("PFNGLMAP1DPROC"), glfw.getProcAddress("glMap1d"))
M.glMap1f = ffi.cast(ffi.typeof("PFNGLMAP1FPROC"), glfw.getProcAddress("glMap1f"))
M.glMap2d = ffi.cast(ffi.typeof("PFNGLMAP2DPROC"), glfw.getProcAddress("glMap2d"))
M.glMap2f = ffi.cast(ffi.typeof("PFNGLMAP2FPROC"), glfw.getProcAddress("glMap2f"))
M.glMapBuffer = ffi.cast(ffi.typeof("PFNGLMAPBUFFERPROC"), glfw.getProcAddress("glMapBuffer"))
M.glMapBufferRange = ffi.cast(ffi.typeof("PFNGLMAPBUFFERRANGEPROC"), glfw.getProcAddress("glMapBufferRange"))
M.glMapGrid1d = ffi.cast(ffi.typeof("PFNGLMAPGRID1DPROC"), glfw.getProcAddress("glMapGrid1d"))
M.glMapGrid1f = ffi.cast(ffi.typeof("PFNGLMAPGRID1FPROC"), glfw.getProcAddress("glMapGrid1f"))
M.glMapGrid2d = ffi.cast(ffi.typeof("PFNGLMAPGRID2DPROC"), glfw.getProcAddress("glMapGrid2d"))
M.glMapGrid2f = ffi.cast(ffi.typeof("PFNGLMAPGRID2FPROC"), glfw.getProcAddress("glMapGrid2f"))
M.glMaterialf = ffi.cast(ffi.typeof("PFNGLMATERIALFPROC"), glfw.getProcAddress("glMaterialf"))
M.glMaterialfv = ffi.cast(ffi.typeof("PFNGLMATERIALFVPROC"), glfw.getProcAddress("glMaterialfv"))
M.glMateriali = ffi.cast(ffi.typeof("PFNGLMATERIALIPROC"), glfw.getProcAddress("glMateriali"))
M.glMaterialiv = ffi.cast(ffi.typeof("PFNGLMATERIALIVPROC"), glfw.getProcAddress("glMaterialiv"))
M.glMatrixMode = ffi.cast(ffi.typeof("PFNGLMATRIXMODEPROC"), glfw.getProcAddress("glMatrixMode"))
M.glMultMatrixd = ffi.cast(ffi.typeof("PFNGLMULTMATRIXDPROC"), glfw.getProcAddress("glMultMatrixd"))
M.glMultMatrixf = ffi.cast(ffi.typeof("PFNGLMULTMATRIXFPROC"), glfw.getProcAddress("glMultMatrixf"))
M.glMultTransposeMatrixd = ffi.cast(ffi.typeof("PFNGLMULTTRANSPOSEMATRIXDPROC"), glfw.getProcAddress("glMultTransposeMatrixd"))
M.glMultTransposeMatrixf = ffi.cast(ffi.typeof("PFNGLMULTTRANSPOSEMATRIXFPROC"), glfw.getProcAddress("glMultTransposeMatrixf"))
M.glMultiDrawArrays = ffi.cast(ffi.typeof("PFNGLMULTIDRAWARRAYSPROC"), glfw.getProcAddress("glMultiDrawArrays"))
M.glMultiDrawElements = ffi.cast(ffi.typeof("PFNGLMULTIDRAWELEMENTSPROC"), glfw.getProcAddress("glMultiDrawElements"))
M.glMultiDrawElementsBaseVertex = ffi.cast(ffi.typeof("PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC"), glfw.getProcAddress("glMultiDrawElementsBaseVertex"))
M.glMultiTexCoord1d = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD1DPROC"), glfw.getProcAddress("glMultiTexCoord1d"))
M.glMultiTexCoord1dv = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD1DVPROC"), glfw.getProcAddress("glMultiTexCoord1dv"))
M.glMultiTexCoord1f = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD1FPROC"), glfw.getProcAddress("glMultiTexCoord1f"))
M.glMultiTexCoord1fv = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD1FVPROC"), glfw.getProcAddress("glMultiTexCoord1fv"))
M.glMultiTexCoord1i = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD1IPROC"), glfw.getProcAddress("glMultiTexCoord1i"))
M.glMultiTexCoord1iv = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD1IVPROC"), glfw.getProcAddress("glMultiTexCoord1iv"))
M.glMultiTexCoord1s = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD1SPROC"), glfw.getProcAddress("glMultiTexCoord1s"))
M.glMultiTexCoord1sv = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD1SVPROC"), glfw.getProcAddress("glMultiTexCoord1sv"))
M.glMultiTexCoord2d = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD2DPROC"), glfw.getProcAddress("glMultiTexCoord2d"))
M.glMultiTexCoord2dv = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD2DVPROC"), glfw.getProcAddress("glMultiTexCoord2dv"))
M.glMultiTexCoord2f = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD2FPROC"), glfw.getProcAddress("glMultiTexCoord2f"))
M.glMultiTexCoord2fv = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD2FVPROC"), glfw.getProcAddress("glMultiTexCoord2fv"))
M.glMultiTexCoord2i = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD2IPROC"), glfw.getProcAddress("glMultiTexCoord2i"))
M.glMultiTexCoord2iv = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD2IVPROC"), glfw.getProcAddress("glMultiTexCoord2iv"))
M.glMultiTexCoord2s = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD2SPROC"), glfw.getProcAddress("glMultiTexCoord2s"))
M.glMultiTexCoord2sv = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD2SVPROC"), glfw.getProcAddress("glMultiTexCoord2sv"))
M.glMultiTexCoord3d = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD3DPROC"), glfw.getProcAddress("glMultiTexCoord3d"))
M.glMultiTexCoord3dv = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD3DVPROC"), glfw.getProcAddress("glMultiTexCoord3dv"))
M.glMultiTexCoord3f = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD3FPROC"), glfw.getProcAddress("glMultiTexCoord3f"))
M.glMultiTexCoord3fv = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD3FVPROC"), glfw.getProcAddress("glMultiTexCoord3fv"))
M.glMultiTexCoord3i = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD3IPROC"), glfw.getProcAddress("glMultiTexCoord3i"))
M.glMultiTexCoord3iv = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD3IVPROC"), glfw.getProcAddress("glMultiTexCoord3iv"))
M.glMultiTexCoord3s = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD3SPROC"), glfw.getProcAddress("glMultiTexCoord3s"))
M.glMultiTexCoord3sv = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD3SVPROC"), glfw.getProcAddress("glMultiTexCoord3sv"))
M.glMultiTexCoord4d = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD4DPROC"), glfw.getProcAddress("glMultiTexCoord4d"))
M.glMultiTexCoord4dv = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD4DVPROC"), glfw.getProcAddress("glMultiTexCoord4dv"))
M.glMultiTexCoord4f = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD4FPROC"), glfw.getProcAddress("glMultiTexCoord4f"))
M.glMultiTexCoord4fv = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD4FVPROC"), glfw.getProcAddress("glMultiTexCoord4fv"))
M.glMultiTexCoord4i = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD4IPROC"), glfw.getProcAddress("glMultiTexCoord4i"))
M.glMultiTexCoord4iv = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD4IVPROC"), glfw.getProcAddress("glMultiTexCoord4iv"))
M.glMultiTexCoord4s = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD4SPROC"), glfw.getProcAddress("glMultiTexCoord4s"))
M.glMultiTexCoord4sv = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORD4SVPROC"), glfw.getProcAddress("glMultiTexCoord4sv"))
M.glMultiTexCoordP1ui = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORDP1UIPROC"), glfw.getProcAddress("glMultiTexCoordP1ui"))
M.glMultiTexCoordP1uiv = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORDP1UIVPROC"), glfw.getProcAddress("glMultiTexCoordP1uiv"))
M.glMultiTexCoordP2ui = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORDP2UIPROC"), glfw.getProcAddress("glMultiTexCoordP2ui"))
M.glMultiTexCoordP2uiv = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORDP2UIVPROC"), glfw.getProcAddress("glMultiTexCoordP2uiv"))
M.glMultiTexCoordP3ui = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORDP3UIPROC"), glfw.getProcAddress("glMultiTexCoordP3ui"))
M.glMultiTexCoordP3uiv = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORDP3UIVPROC"), glfw.getProcAddress("glMultiTexCoordP3uiv"))
M.glMultiTexCoordP4ui = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORDP4UIPROC"), glfw.getProcAddress("glMultiTexCoordP4ui"))
M.glMultiTexCoordP4uiv = ffi.cast(ffi.typeof("PFNGLMULTITEXCOORDP4UIVPROC"), glfw.getProcAddress("glMultiTexCoordP4uiv"))
M.glNewList = ffi.cast(ffi.typeof("PFNGLNEWLISTPROC"), glfw.getProcAddress("glNewList"))
M.glNormal3b = ffi.cast(ffi.typeof("PFNGLNORMAL3BPROC"), glfw.getProcAddress("glNormal3b"))
M.glNormal3bv = ffi.cast(ffi.typeof("PFNGLNORMAL3BVPROC"), glfw.getProcAddress("glNormal3bv"))
M.glNormal3d = ffi.cast(ffi.typeof("PFNGLNORMAL3DPROC"), glfw.getProcAddress("glNormal3d"))
M.glNormal3dv = ffi.cast(ffi.typeof("PFNGLNORMAL3DVPROC"), glfw.getProcAddress("glNormal3dv"))
M.glNormal3f = ffi.cast(ffi.typeof("PFNGLNORMAL3FPROC"), glfw.getProcAddress("glNormal3f"))
M.glNormal3fv = ffi.cast(ffi.typeof("PFNGLNORMAL3FVPROC"), glfw.getProcAddress("glNormal3fv"))
M.glNormal3i = ffi.cast(ffi.typeof("PFNGLNORMAL3IPROC"), glfw.getProcAddress("glNormal3i"))
M.glNormal3iv = ffi.cast(ffi.typeof("PFNGLNORMAL3IVPROC"), glfw.getProcAddress("glNormal3iv"))
M.glNormal3s = ffi.cast(ffi.typeof("PFNGLNORMAL3SPROC"), glfw.getProcAddress("glNormal3s"))
M.glNormal3sv = ffi.cast(ffi.typeof("PFNGLNORMAL3SVPROC"), glfw.getProcAddress("glNormal3sv"))
M.glNormalP3ui = ffi.cast(ffi.typeof("PFNGLNORMALP3UIPROC"), glfw.getProcAddress("glNormalP3ui"))
M.glNormalP3uiv = ffi.cast(ffi.typeof("PFNGLNORMALP3UIVPROC"), glfw.getProcAddress("glNormalP3uiv"))
M.glNormalPointer = ffi.cast(ffi.typeof("PFNGLNORMALPOINTERPROC"), glfw.getProcAddress("glNormalPointer"))
M.glObjectLabel = ffi.cast(ffi.typeof("PFNGLOBJECTLABELPROC"), glfw.getProcAddress("glObjectLabel"))
M.glObjectPtrLabel = ffi.cast(ffi.typeof("PFNGLOBJECTPTRLABELPROC"), glfw.getProcAddress("glObjectPtrLabel"))
M.glOrtho = ffi.cast(ffi.typeof("PFNGLORTHOPROC"), glfw.getProcAddress("glOrtho"))
M.glPassThrough = ffi.cast(ffi.typeof("PFNGLPASSTHROUGHPROC"), glfw.getProcAddress("glPassThrough"))
M.glPixelMapfv = ffi.cast(ffi.typeof("PFNGLPIXELMAPFVPROC"), glfw.getProcAddress("glPixelMapfv"))
M.glPixelMapuiv = ffi.cast(ffi.typeof("PFNGLPIXELMAPUIVPROC"), glfw.getProcAddress("glPixelMapuiv"))
M.glPixelMapusv = ffi.cast(ffi.typeof("PFNGLPIXELMAPUSVPROC"), glfw.getProcAddress("glPixelMapusv"))
M.glPixelStoref = ffi.cast(ffi.typeof("PFNGLPIXELSTOREFPROC"), glfw.getProcAddress("glPixelStoref"))
M.glPixelStorei = ffi.cast(ffi.typeof("PFNGLPIXELSTOREIPROC"), glfw.getProcAddress("glPixelStorei"))
M.glPixelTransferf = ffi.cast(ffi.typeof("PFNGLPIXELTRANSFERFPROC"), glfw.getProcAddress("glPixelTransferf"))
M.glPixelTransferi = ffi.cast(ffi.typeof("PFNGLPIXELTRANSFERIPROC"), glfw.getProcAddress("glPixelTransferi"))
M.glPixelZoom = ffi.cast(ffi.typeof("PFNGLPIXELZOOMPROC"), glfw.getProcAddress("glPixelZoom"))
M.glPointParameterf = ffi.cast(ffi.typeof("PFNGLPOINTPARAMETERFPROC"), glfw.getProcAddress("glPointParameterf"))
M.glPointParameterfv = ffi.cast(ffi.typeof("PFNGLPOINTPARAMETERFVPROC"), glfw.getProcAddress("glPointParameterfv"))
M.glPointParameteri = ffi.cast(ffi.typeof("PFNGLPOINTPARAMETERIPROC"), glfw.getProcAddress("glPointParameteri"))
M.glPointParameteriv = ffi.cast(ffi.typeof("PFNGLPOINTPARAMETERIVPROC"), glfw.getProcAddress("glPointParameteriv"))
M.glPointSize = ffi.cast(ffi.typeof("PFNGLPOINTSIZEPROC"), glfw.getProcAddress("glPointSize"))
M.glPolygonMode = ffi.cast(ffi.typeof("PFNGLPOLYGONMODEPROC"), glfw.getProcAddress("glPolygonMode"))
M.glPolygonOffset = ffi.cast(ffi.typeof("PFNGLPOLYGONOFFSETPROC"), glfw.getProcAddress("glPolygonOffset"))
M.glPolygonStipple = ffi.cast(ffi.typeof("PFNGLPOLYGONSTIPPLEPROC"), glfw.getProcAddress("glPolygonStipple"))
M.glPopAttrib = ffi.cast(ffi.typeof("PFNGLPOPATTRIBPROC"), glfw.getProcAddress("glPopAttrib"))
M.glPopClientAttrib = ffi.cast(ffi.typeof("PFNGLPOPCLIENTATTRIBPROC"), glfw.getProcAddress("glPopClientAttrib"))
M.glPopDebugGroup = ffi.cast(ffi.typeof("PFNGLPOPDEBUGGROUPPROC"), glfw.getProcAddress("glPopDebugGroup"))
M.glPopMatrix = ffi.cast(ffi.typeof("PFNGLPOPMATRIXPROC"), glfw.getProcAddress("glPopMatrix"))
M.glPopName = ffi.cast(ffi.typeof("PFNGLPOPNAMEPROC"), glfw.getProcAddress("glPopName"))
M.glPrimitiveRestartIndex = ffi.cast(ffi.typeof("PFNGLPRIMITIVERESTARTINDEXPROC"), glfw.getProcAddress("glPrimitiveRestartIndex"))
M.glPrioritizeTextures = ffi.cast(ffi.typeof("PFNGLPRIORITIZETEXTURESPROC"), glfw.getProcAddress("glPrioritizeTextures"))
M.glProvokingVertex = ffi.cast(ffi.typeof("PFNGLPROVOKINGVERTEXPROC"), glfw.getProcAddress("glProvokingVertex"))
M.glPushAttrib = ffi.cast(ffi.typeof("PFNGLPUSHATTRIBPROC"), glfw.getProcAddress("glPushAttrib"))
M.glPushClientAttrib = ffi.cast(ffi.typeof("PFNGLPUSHCLIENTATTRIBPROC"), glfw.getProcAddress("glPushClientAttrib"))
M.glPushDebugGroup = ffi.cast(ffi.typeof("PFNGLPUSHDEBUGGROUPPROC"), glfw.getProcAddress("glPushDebugGroup"))
M.glPushMatrix = ffi.cast(ffi.typeof("PFNGLPUSHMATRIXPROC"), glfw.getProcAddress("glPushMatrix"))
M.glPushName = ffi.cast(ffi.typeof("PFNGLPUSHNAMEPROC"), glfw.getProcAddress("glPushName"))
M.glQueryCounter = ffi.cast(ffi.typeof("PFNGLQUERYCOUNTERPROC"), glfw.getProcAddress("glQueryCounter"))
M.glRasterPos2d = ffi.cast(ffi.typeof("PFNGLRASTERPOS2DPROC"), glfw.getProcAddress("glRasterPos2d"))
M.glRasterPos2dv = ffi.cast(ffi.typeof("PFNGLRASTERPOS2DVPROC"), glfw.getProcAddress("glRasterPos2dv"))
M.glRasterPos2f = ffi.cast(ffi.typeof("PFNGLRASTERPOS2FPROC"), glfw.getProcAddress("glRasterPos2f"))
M.glRasterPos2fv = ffi.cast(ffi.typeof("PFNGLRASTERPOS2FVPROC"), glfw.getProcAddress("glRasterPos2fv"))
M.glRasterPos2i = ffi.cast(ffi.typeof("PFNGLRASTERPOS2IPROC"), glfw.getProcAddress("glRasterPos2i"))
M.glRasterPos2iv = ffi.cast(ffi.typeof("PFNGLRASTERPOS2IVPROC"), glfw.getProcAddress("glRasterPos2iv"))
M.glRasterPos2s = ffi.cast(ffi.typeof("PFNGLRASTERPOS2SPROC"), glfw.getProcAddress("glRasterPos2s"))
M.glRasterPos2sv = ffi.cast(ffi.typeof("PFNGLRASTERPOS2SVPROC"), glfw.getProcAddress("glRasterPos2sv"))
M.glRasterPos3d = ffi.cast(ffi.typeof("PFNGLRASTERPOS3DPROC"), glfw.getProcAddress("glRasterPos3d"))
M.glRasterPos3dv = ffi.cast(ffi.typeof("PFNGLRASTERPOS3DVPROC"), glfw.getProcAddress("glRasterPos3dv"))
M.glRasterPos3f = ffi.cast(ffi.typeof("PFNGLRASTERPOS3FPROC"), glfw.getProcAddress("glRasterPos3f"))
M.glRasterPos3fv = ffi.cast(ffi.typeof("PFNGLRASTERPOS3FVPROC"), glfw.getProcAddress("glRasterPos3fv"))
M.glRasterPos3i = ffi.cast(ffi.typeof("PFNGLRASTERPOS3IPROC"), glfw.getProcAddress("glRasterPos3i"))
M.glRasterPos3iv = ffi.cast(ffi.typeof("PFNGLRASTERPOS3IVPROC"), glfw.getProcAddress("glRasterPos3iv"))
M.glRasterPos3s = ffi.cast(ffi.typeof("PFNGLRASTERPOS3SPROC"), glfw.getProcAddress("glRasterPos3s"))
M.glRasterPos3sv = ffi.cast(ffi.typeof("PFNGLRASTERPOS3SVPROC"), glfw.getProcAddress("glRasterPos3sv"))
M.glRasterPos4d = ffi.cast(ffi.typeof("PFNGLRASTERPOS4DPROC"), glfw.getProcAddress("glRasterPos4d"))
M.glRasterPos4dv = ffi.cast(ffi.typeof("PFNGLRASTERPOS4DVPROC"), glfw.getProcAddress("glRasterPos4dv"))
M.glRasterPos4f = ffi.cast(ffi.typeof("PFNGLRASTERPOS4FPROC"), glfw.getProcAddress("glRasterPos4f"))
M.glRasterPos4fv = ffi.cast(ffi.typeof("PFNGLRASTERPOS4FVPROC"), glfw.getProcAddress("glRasterPos4fv"))
M.glRasterPos4i = ffi.cast(ffi.typeof("PFNGLRASTERPOS4IPROC"), glfw.getProcAddress("glRasterPos4i"))
M.glRasterPos4iv = ffi.cast(ffi.typeof("PFNGLRASTERPOS4IVPROC"), glfw.getProcAddress("glRasterPos4iv"))
M.glRasterPos4s = ffi.cast(ffi.typeof("PFNGLRASTERPOS4SPROC"), glfw.getProcAddress("glRasterPos4s"))
M.glRasterPos4sv = ffi.cast(ffi.typeof("PFNGLRASTERPOS4SVPROC"), glfw.getProcAddress("glRasterPos4sv"))
M.glReadBuffer = ffi.cast(ffi.typeof("PFNGLREADBUFFERPROC"), glfw.getProcAddress("glReadBuffer"))
M.glReadPixels = ffi.cast(ffi.typeof("PFNGLREADPIXELSPROC"), glfw.getProcAddress("glReadPixels"))
M.glReadnPixels = ffi.cast(ffi.typeof("PFNGLREADNPIXELSPROC"), glfw.getProcAddress("glReadnPixels"))
M.glReadnPixelsARB = ffi.cast(ffi.typeof("PFNGLREADNPIXELSARBPROC"), glfw.getProcAddress("glReadnPixelsARB"))
M.glRectd = ffi.cast(ffi.typeof("PFNGLRECTDPROC"), glfw.getProcAddress("glRectd"))
M.glRectdv = ffi.cast(ffi.typeof("PFNGLRECTDVPROC"), glfw.getProcAddress("glRectdv"))
M.glRectf = ffi.cast(ffi.typeof("PFNGLRECTFPROC"), glfw.getProcAddress("glRectf"))
M.glRectfv = ffi.cast(ffi.typeof("PFNGLRECTFVPROC"), glfw.getProcAddress("glRectfv"))
M.glRecti = ffi.cast(ffi.typeof("PFNGLRECTIPROC"), glfw.getProcAddress("glRecti"))
M.glRectiv = ffi.cast(ffi.typeof("PFNGLRECTIVPROC"), glfw.getProcAddress("glRectiv"))
M.glRects = ffi.cast(ffi.typeof("PFNGLRECTSPROC"), glfw.getProcAddress("glRects"))
M.glRectsv = ffi.cast(ffi.typeof("PFNGLRECTSVPROC"), glfw.getProcAddress("glRectsv"))
M.glRenderMode = ffi.cast(ffi.typeof("PFNGLRENDERMODEPROC"), glfw.getProcAddress("glRenderMode"))
M.glRenderbufferStorage = ffi.cast(ffi.typeof("PFNGLRENDERBUFFERSTORAGEPROC"), glfw.getProcAddress("glRenderbufferStorage"))
M.glRenderbufferStorageMultisample = ffi.cast(ffi.typeof("PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC"), glfw.getProcAddress("glRenderbufferStorageMultisample"))
M.glRotated = ffi.cast(ffi.typeof("PFNGLROTATEDPROC"), glfw.getProcAddress("glRotated"))
M.glRotatef = ffi.cast(ffi.typeof("PFNGLROTATEFPROC"), glfw.getProcAddress("glRotatef"))
M.glSampleCoverage = ffi.cast(ffi.typeof("PFNGLSAMPLECOVERAGEPROC"), glfw.getProcAddress("glSampleCoverage"))
M.glSampleCoverageARB = ffi.cast(ffi.typeof("PFNGLSAMPLECOVERAGEARBPROC"), glfw.getProcAddress("glSampleCoverageARB"))
M.glSampleMaski = ffi.cast(ffi.typeof("PFNGLSAMPLEMASKIPROC"), glfw.getProcAddress("glSampleMaski"))
M.glSamplerParameterIiv = ffi.cast(ffi.typeof("PFNGLSAMPLERPARAMETERIIVPROC"), glfw.getProcAddress("glSamplerParameterIiv"))
M.glSamplerParameterIuiv = ffi.cast(ffi.typeof("PFNGLSAMPLERPARAMETERIUIVPROC"), glfw.getProcAddress("glSamplerParameterIuiv"))
M.glSamplerParameterf = ffi.cast(ffi.typeof("PFNGLSAMPLERPARAMETERFPROC"), glfw.getProcAddress("glSamplerParameterf"))
M.glSamplerParameterfv = ffi.cast(ffi.typeof("PFNGLSAMPLERPARAMETERFVPROC"), glfw.getProcAddress("glSamplerParameterfv"))
M.glSamplerParameteri = ffi.cast(ffi.typeof("PFNGLSAMPLERPARAMETERIPROC"), glfw.getProcAddress("glSamplerParameteri"))
M.glSamplerParameteriv = ffi.cast(ffi.typeof("PFNGLSAMPLERPARAMETERIVPROC"), glfw.getProcAddress("glSamplerParameteriv"))
M.glScaled = ffi.cast(ffi.typeof("PFNGLSCALEDPROC"), glfw.getProcAddress("glScaled"))
M.glScalef = ffi.cast(ffi.typeof("PFNGLSCALEFPROC"), glfw.getProcAddress("glScalef"))
M.glScissor = ffi.cast(ffi.typeof("PFNGLSCISSORPROC"), glfw.getProcAddress("glScissor"))
M.glSecondaryColor3b = ffi.cast(ffi.typeof("PFNGLSECONDARYCOLOR3BPROC"), glfw.getProcAddress("glSecondaryColor3b"))
M.glSecondaryColor3bv = ffi.cast(ffi.typeof("PFNGLSECONDARYCOLOR3BVPROC"), glfw.getProcAddress("glSecondaryColor3bv"))
M.glSecondaryColor3d = ffi.cast(ffi.typeof("PFNGLSECONDARYCOLOR3DPROC"), glfw.getProcAddress("glSecondaryColor3d"))
M.glSecondaryColor3dv = ffi.cast(ffi.typeof("PFNGLSECONDARYCOLOR3DVPROC"), glfw.getProcAddress("glSecondaryColor3dv"))
M.glSecondaryColor3f = ffi.cast(ffi.typeof("PFNGLSECONDARYCOLOR3FPROC"), glfw.getProcAddress("glSecondaryColor3f"))
M.glSecondaryColor3fv = ffi.cast(ffi.typeof("PFNGLSECONDARYCOLOR3FVPROC"), glfw.getProcAddress("glSecondaryColor3fv"))
M.glSecondaryColor3i = ffi.cast(ffi.typeof("PFNGLSECONDARYCOLOR3IPROC"), glfw.getProcAddress("glSecondaryColor3i"))
M.glSecondaryColor3iv = ffi.cast(ffi.typeof("PFNGLSECONDARYCOLOR3IVPROC"), glfw.getProcAddress("glSecondaryColor3iv"))
M.glSecondaryColor3s = ffi.cast(ffi.typeof("PFNGLSECONDARYCOLOR3SPROC"), glfw.getProcAddress("glSecondaryColor3s"))
M.glSecondaryColor3sv = ffi.cast(ffi.typeof("PFNGLSECONDARYCOLOR3SVPROC"), glfw.getProcAddress("glSecondaryColor3sv"))
M.glSecondaryColor3ub = ffi.cast(ffi.typeof("PFNGLSECONDARYCOLOR3UBPROC"), glfw.getProcAddress("glSecondaryColor3ub"))
M.glSecondaryColor3ubv = ffi.cast(ffi.typeof("PFNGLSECONDARYCOLOR3UBVPROC"), glfw.getProcAddress("glSecondaryColor3ubv"))
M.glSecondaryColor3ui = ffi.cast(ffi.typeof("PFNGLSECONDARYCOLOR3UIPROC"), glfw.getProcAddress("glSecondaryColor3ui"))
M.glSecondaryColor3uiv = ffi.cast(ffi.typeof("PFNGLSECONDARYCOLOR3UIVPROC"), glfw.getProcAddress("glSecondaryColor3uiv"))
M.glSecondaryColor3us = ffi.cast(ffi.typeof("PFNGLSECONDARYCOLOR3USPROC"), glfw.getProcAddress("glSecondaryColor3us"))
M.glSecondaryColor3usv = ffi.cast(ffi.typeof("PFNGLSECONDARYCOLOR3USVPROC"), glfw.getProcAddress("glSecondaryColor3usv"))
M.glSecondaryColorP3ui = ffi.cast(ffi.typeof("PFNGLSECONDARYCOLORP3UIPROC"), glfw.getProcAddress("glSecondaryColorP3ui"))
M.glSecondaryColorP3uiv = ffi.cast(ffi.typeof("PFNGLSECONDARYCOLORP3UIVPROC"), glfw.getProcAddress("glSecondaryColorP3uiv"))
M.glSecondaryColorPointer = ffi.cast(ffi.typeof("PFNGLSECONDARYCOLORPOINTERPROC"), glfw.getProcAddress("glSecondaryColorPointer"))
M.glSelectBuffer = ffi.cast(ffi.typeof("PFNGLSELECTBUFFERPROC"), glfw.getProcAddress("glSelectBuffer"))
M.glShadeModel = ffi.cast(ffi.typeof("PFNGLSHADEMODELPROC"), glfw.getProcAddress("glShadeModel"))
M.glShaderSource = ffi.cast(ffi.typeof("PFNGLSHADERSOURCEPROC"), glfw.getProcAddress("glShaderSource"))
M.glStencilFunc = ffi.cast(ffi.typeof("PFNGLSTENCILFUNCPROC"), glfw.getProcAddress("glStencilFunc"))
M.glStencilFuncSeparate = ffi.cast(ffi.typeof("PFNGLSTENCILFUNCSEPARATEPROC"), glfw.getProcAddress("glStencilFuncSeparate"))
M.glStencilMask = ffi.cast(ffi.typeof("PFNGLSTENCILMASKPROC"), glfw.getProcAddress("glStencilMask"))
M.glStencilMaskSeparate = ffi.cast(ffi.typeof("PFNGLSTENCILMASKSEPARATEPROC"), glfw.getProcAddress("glStencilMaskSeparate"))
M.glStencilOp = ffi.cast(ffi.typeof("PFNGLSTENCILOPPROC"), glfw.getProcAddress("glStencilOp"))
M.glStencilOpSeparate = ffi.cast(ffi.typeof("PFNGLSTENCILOPSEPARATEPROC"), glfw.getProcAddress("glStencilOpSeparate"))
M.glTexBuffer = ffi.cast(ffi.typeof("PFNGLTEXBUFFERPROC"), glfw.getProcAddress("glTexBuffer"))
M.glTexCoord1d = ffi.cast(ffi.typeof("PFNGLTEXCOORD1DPROC"), glfw.getProcAddress("glTexCoord1d"))
M.glTexCoord1dv = ffi.cast(ffi.typeof("PFNGLTEXCOORD1DVPROC"), glfw.getProcAddress("glTexCoord1dv"))
M.glTexCoord1f = ffi.cast(ffi.typeof("PFNGLTEXCOORD1FPROC"), glfw.getProcAddress("glTexCoord1f"))
M.glTexCoord1fv = ffi.cast(ffi.typeof("PFNGLTEXCOORD1FVPROC"), glfw.getProcAddress("glTexCoord1fv"))
M.glTexCoord1i = ffi.cast(ffi.typeof("PFNGLTEXCOORD1IPROC"), glfw.getProcAddress("glTexCoord1i"))
M.glTexCoord1iv = ffi.cast(ffi.typeof("PFNGLTEXCOORD1IVPROC"), glfw.getProcAddress("glTexCoord1iv"))
M.glTexCoord1s = ffi.cast(ffi.typeof("PFNGLTEXCOORD1SPROC"), glfw.getProcAddress("glTexCoord1s"))
M.glTexCoord1sv = ffi.cast(ffi.typeof("PFNGLTEXCOORD1SVPROC"), glfw.getProcAddress("glTexCoord1sv"))
M.glTexCoord2d = ffi.cast(ffi.typeof("PFNGLTEXCOORD2DPROC"), glfw.getProcAddress("glTexCoord2d"))
M.glTexCoord2dv = ffi.cast(ffi.typeof("PFNGLTEXCOORD2DVPROC"), glfw.getProcAddress("glTexCoord2dv"))
M.glTexCoord2f = ffi.cast(ffi.typeof("PFNGLTEXCOORD2FPROC"), glfw.getProcAddress("glTexCoord2f"))
M.glTexCoord2fv = ffi.cast(ffi.typeof("PFNGLTEXCOORD2FVPROC"), glfw.getProcAddress("glTexCoord2fv"))
M.glTexCoord2i = ffi.cast(ffi.typeof("PFNGLTEXCOORD2IPROC"), glfw.getProcAddress("glTexCoord2i"))
M.glTexCoord2iv = ffi.cast(ffi.typeof("PFNGLTEXCOORD2IVPROC"), glfw.getProcAddress("glTexCoord2iv"))
M.glTexCoord2s = ffi.cast(ffi.typeof("PFNGLTEXCOORD2SPROC"), glfw.getProcAddress("glTexCoord2s"))
M.glTexCoord2sv = ffi.cast(ffi.typeof("PFNGLTEXCOORD2SVPROC"), glfw.getProcAddress("glTexCoord2sv"))
M.glTexCoord3d = ffi.cast(ffi.typeof("PFNGLTEXCOORD3DPROC"), glfw.getProcAddress("glTexCoord3d"))
M.glTexCoord3dv = ffi.cast(ffi.typeof("PFNGLTEXCOORD3DVPROC"), glfw.getProcAddress("glTexCoord3dv"))
M.glTexCoord3f = ffi.cast(ffi.typeof("PFNGLTEXCOORD3FPROC"), glfw.getProcAddress("glTexCoord3f"))
M.glTexCoord3fv = ffi.cast(ffi.typeof("PFNGLTEXCOORD3FVPROC"), glfw.getProcAddress("glTexCoord3fv"))
M.glTexCoord3i = ffi.cast(ffi.typeof("PFNGLTEXCOORD3IPROC"), glfw.getProcAddress("glTexCoord3i"))
M.glTexCoord3iv = ffi.cast(ffi.typeof("PFNGLTEXCOORD3IVPROC"), glfw.getProcAddress("glTexCoord3iv"))
M.glTexCoord3s = ffi.cast(ffi.typeof("PFNGLTEXCOORD3SPROC"), glfw.getProcAddress("glTexCoord3s"))
M.glTexCoord3sv = ffi.cast(ffi.typeof("PFNGLTEXCOORD3SVPROC"), glfw.getProcAddress("glTexCoord3sv"))
M.glTexCoord4d = ffi.cast(ffi.typeof("PFNGLTEXCOORD4DPROC"), glfw.getProcAddress("glTexCoord4d"))
M.glTexCoord4dv = ffi.cast(ffi.typeof("PFNGLTEXCOORD4DVPROC"), glfw.getProcAddress("glTexCoord4dv"))
M.glTexCoord4f = ffi.cast(ffi.typeof("PFNGLTEXCOORD4FPROC"), glfw.getProcAddress("glTexCoord4f"))
M.glTexCoord4fv = ffi.cast(ffi.typeof("PFNGLTEXCOORD4FVPROC"), glfw.getProcAddress("glTexCoord4fv"))
M.glTexCoord4i = ffi.cast(ffi.typeof("PFNGLTEXCOORD4IPROC"), glfw.getProcAddress("glTexCoord4i"))
M.glTexCoord4iv = ffi.cast(ffi.typeof("PFNGLTEXCOORD4IVPROC"), glfw.getProcAddress("glTexCoord4iv"))
M.glTexCoord4s = ffi.cast(ffi.typeof("PFNGLTEXCOORD4SPROC"), glfw.getProcAddress("glTexCoord4s"))
M.glTexCoord4sv = ffi.cast(ffi.typeof("PFNGLTEXCOORD4SVPROC"), glfw.getProcAddress("glTexCoord4sv"))
M.glTexCoordP1ui = ffi.cast(ffi.typeof("PFNGLTEXCOORDP1UIPROC"), glfw.getProcAddress("glTexCoordP1ui"))
M.glTexCoordP1uiv = ffi.cast(ffi.typeof("PFNGLTEXCOORDP1UIVPROC"), glfw.getProcAddress("glTexCoordP1uiv"))
M.glTexCoordP2ui = ffi.cast(ffi.typeof("PFNGLTEXCOORDP2UIPROC"), glfw.getProcAddress("glTexCoordP2ui"))
M.glTexCoordP2uiv = ffi.cast(ffi.typeof("PFNGLTEXCOORDP2UIVPROC"), glfw.getProcAddress("glTexCoordP2uiv"))
M.glTexCoordP3ui = ffi.cast(ffi.typeof("PFNGLTEXCOORDP3UIPROC"), glfw.getProcAddress("glTexCoordP3ui"))
M.glTexCoordP3uiv = ffi.cast(ffi.typeof("PFNGLTEXCOORDP3UIVPROC"), glfw.getProcAddress("glTexCoordP3uiv"))
M.glTexCoordP4ui = ffi.cast(ffi.typeof("PFNGLTEXCOORDP4UIPROC"), glfw.getProcAddress("glTexCoordP4ui"))
M.glTexCoordP4uiv = ffi.cast(ffi.typeof("PFNGLTEXCOORDP4UIVPROC"), glfw.getProcAddress("glTexCoordP4uiv"))
M.glTexCoordPointer = ffi.cast(ffi.typeof("PFNGLTEXCOORDPOINTERPROC"), glfw.getProcAddress("glTexCoordPointer"))
M.glTexEnvf = ffi.cast(ffi.typeof("PFNGLTEXENVFPROC"), glfw.getProcAddress("glTexEnvf"))
M.glTexEnvfv = ffi.cast(ffi.typeof("PFNGLTEXENVFVPROC"), glfw.getProcAddress("glTexEnvfv"))
M.glTexEnvi = ffi.cast(ffi.typeof("PFNGLTEXENVIPROC"), glfw.getProcAddress("glTexEnvi"))
M.glTexEnviv = ffi.cast(ffi.typeof("PFNGLTEXENVIVPROC"), glfw.getProcAddress("glTexEnviv"))
M.glTexGend = ffi.cast(ffi.typeof("PFNGLTEXGENDPROC"), glfw.getProcAddress("glTexGend"))
M.glTexGendv = ffi.cast(ffi.typeof("PFNGLTEXGENDVPROC"), glfw.getProcAddress("glTexGendv"))
M.glTexGenf = ffi.cast(ffi.typeof("PFNGLTEXGENFPROC"), glfw.getProcAddress("glTexGenf"))
M.glTexGenfv = ffi.cast(ffi.typeof("PFNGLTEXGENFVPROC"), glfw.getProcAddress("glTexGenfv"))
M.glTexGeni = ffi.cast(ffi.typeof("PFNGLTEXGENIPROC"), glfw.getProcAddress("glTexGeni"))
M.glTexGeniv = ffi.cast(ffi.typeof("PFNGLTEXGENIVPROC"), glfw.getProcAddress("glTexGeniv"))
M.glTexImage1D = ffi.cast(ffi.typeof("PFNGLTEXIMAGE1DPROC"), glfw.getProcAddress("glTexImage1D"))
M.glTexImage2D = ffi.cast(ffi.typeof("PFNGLTEXIMAGE2DPROC"), glfw.getProcAddress("glTexImage2D"))
M.glTexImage2DMultisample = ffi.cast(ffi.typeof("PFNGLTEXIMAGE2DMULTISAMPLEPROC"), glfw.getProcAddress("glTexImage2DMultisample"))
M.glTexImage3D = ffi.cast(ffi.typeof("PFNGLTEXIMAGE3DPROC"), glfw.getProcAddress("glTexImage3D"))
M.glTexImage3DMultisample = ffi.cast(ffi.typeof("PFNGLTEXIMAGE3DMULTISAMPLEPROC"), glfw.getProcAddress("glTexImage3DMultisample"))
M.glTexParameterIiv = ffi.cast(ffi.typeof("PFNGLTEXPARAMETERIIVPROC"), glfw.getProcAddress("glTexParameterIiv"))
M.glTexParameterIuiv = ffi.cast(ffi.typeof("PFNGLTEXPARAMETERIUIVPROC"), glfw.getProcAddress("glTexParameterIuiv"))
M.glTexParameterf = ffi.cast(ffi.typeof("PFNGLTEXPARAMETERFPROC"), glfw.getProcAddress("glTexParameterf"))
M.glTexParameterfv = ffi.cast(ffi.typeof("PFNGLTEXPARAMETERFVPROC"), glfw.getProcAddress("glTexParameterfv"))
M.glTexParameteri = ffi.cast(ffi.typeof("PFNGLTEXPARAMETERIPROC"), glfw.getProcAddress("glTexParameteri"))
M.glTexParameteriv = ffi.cast(ffi.typeof("PFNGLTEXPARAMETERIVPROC"), glfw.getProcAddress("glTexParameteriv"))
M.glTexSubImage1D = ffi.cast(ffi.typeof("PFNGLTEXSUBIMAGE1DPROC"), glfw.getProcAddress("glTexSubImage1D"))
M.glTexSubImage2D = ffi.cast(ffi.typeof("PFNGLTEXSUBIMAGE2DPROC"), glfw.getProcAddress("glTexSubImage2D"))
M.glTexSubImage3D = ffi.cast(ffi.typeof("PFNGLTEXSUBIMAGE3DPROC"), glfw.getProcAddress("glTexSubImage3D"))
M.glTransformFeedbackVaryings = ffi.cast(ffi.typeof("PFNGLTRANSFORMFEEDBACKVARYINGSPROC"), glfw.getProcAddress("glTransformFeedbackVaryings"))
M.glTranslated = ffi.cast(ffi.typeof("PFNGLTRANSLATEDPROC"), glfw.getProcAddress("glTranslated"))
M.glTranslatef = ffi.cast(ffi.typeof("PFNGLTRANSLATEFPROC"), glfw.getProcAddress("glTranslatef"))
M.glUniform1f = ffi.cast(ffi.typeof("PFNGLUNIFORM1FPROC"), glfw.getProcAddress("glUniform1f"))
M.glUniform1fv = ffi.cast(ffi.typeof("PFNGLUNIFORM1FVPROC"), glfw.getProcAddress("glUniform1fv"))
M.glUniform1i = ffi.cast(ffi.typeof("PFNGLUNIFORM1IPROC"), glfw.getProcAddress("glUniform1i"))
M.glUniform1iv = ffi.cast(ffi.typeof("PFNGLUNIFORM1IVPROC"), glfw.getProcAddress("glUniform1iv"))
M.glUniform1ui = ffi.cast(ffi.typeof("PFNGLUNIFORM1UIPROC"), glfw.getProcAddress("glUniform1ui"))
M.glUniform1uiv = ffi.cast(ffi.typeof("PFNGLUNIFORM1UIVPROC"), glfw.getProcAddress("glUniform1uiv"))
M.glUniform2f = ffi.cast(ffi.typeof("PFNGLUNIFORM2FPROC"), glfw.getProcAddress("glUniform2f"))
M.glUniform2fv = ffi.cast(ffi.typeof("PFNGLUNIFORM2FVPROC"), glfw.getProcAddress("glUniform2fv"))
M.glUniform2i = ffi.cast(ffi.typeof("PFNGLUNIFORM2IPROC"), glfw.getProcAddress("glUniform2i"))
M.glUniform2iv = ffi.cast(ffi.typeof("PFNGLUNIFORM2IVPROC"), glfw.getProcAddress("glUniform2iv"))
M.glUniform2ui = ffi.cast(ffi.typeof("PFNGLUNIFORM2UIPROC"), glfw.getProcAddress("glUniform2ui"))
M.glUniform2uiv = ffi.cast(ffi.typeof("PFNGLUNIFORM2UIVPROC"), glfw.getProcAddress("glUniform2uiv"))
M.glUniform3f = ffi.cast(ffi.typeof("PFNGLUNIFORM3FPROC"), glfw.getProcAddress("glUniform3f"))
M.glUniform3fv = ffi.cast(ffi.typeof("PFNGLUNIFORM3FVPROC"), glfw.getProcAddress("glUniform3fv"))
M.glUniform3i = ffi.cast(ffi.typeof("PFNGLUNIFORM3IPROC"), glfw.getProcAddress("glUniform3i"))
M.glUniform3iv = ffi.cast(ffi.typeof("PFNGLUNIFORM3IVPROC"), glfw.getProcAddress("glUniform3iv"))
M.glUniform3ui = ffi.cast(ffi.typeof("PFNGLUNIFORM3UIPROC"), glfw.getProcAddress("glUniform3ui"))
M.glUniform3uiv = ffi.cast(ffi.typeof("PFNGLUNIFORM3UIVPROC"), glfw.getProcAddress("glUniform3uiv"))
M.glUniform4f = ffi.cast(ffi.typeof("PFNGLUNIFORM4FPROC"), glfw.getProcAddress("glUniform4f"))
M.glUniform4fv = ffi.cast(ffi.typeof("PFNGLUNIFORM4FVPROC"), glfw.getProcAddress("glUniform4fv"))
M.glUniform4i = ffi.cast(ffi.typeof("PFNGLUNIFORM4IPROC"), glfw.getProcAddress("glUniform4i"))
M.glUniform4iv = ffi.cast(ffi.typeof("PFNGLUNIFORM4IVPROC"), glfw.getProcAddress("glUniform4iv"))
M.glUniform4ui = ffi.cast(ffi.typeof("PFNGLUNIFORM4UIPROC"), glfw.getProcAddress("glUniform4ui"))
M.glUniform4uiv = ffi.cast(ffi.typeof("PFNGLUNIFORM4UIVPROC"), glfw.getProcAddress("glUniform4uiv"))
M.glUniformBlockBinding = ffi.cast(ffi.typeof("PFNGLUNIFORMBLOCKBINDINGPROC"), glfw.getProcAddress("glUniformBlockBinding"))
M.glUniformMatrix2fv = ffi.cast(ffi.typeof("PFNGLUNIFORMMATRIX2FVPROC"), glfw.getProcAddress("glUniformMatrix2fv"))
M.glUniformMatrix2x3fv = ffi.cast(ffi.typeof("PFNGLUNIFORMMATRIX2X3FVPROC"), glfw.getProcAddress("glUniformMatrix2x3fv"))
M.glUniformMatrix2x4fv = ffi.cast(ffi.typeof("PFNGLUNIFORMMATRIX2X4FVPROC"), glfw.getProcAddress("glUniformMatrix2x4fv"))
M.glUniformMatrix3fv = ffi.cast(ffi.typeof("PFNGLUNIFORMMATRIX3FVPROC"), glfw.getProcAddress("glUniformMatrix3fv"))
M.glUniformMatrix3x2fv = ffi.cast(ffi.typeof("PFNGLUNIFORMMATRIX3X2FVPROC"), glfw.getProcAddress("glUniformMatrix3x2fv"))
M.glUniformMatrix3x4fv = ffi.cast(ffi.typeof("PFNGLUNIFORMMATRIX3X4FVPROC"), glfw.getProcAddress("glUniformMatrix3x4fv"))
M.glUniformMatrix4fv = ffi.cast(ffi.typeof("PFNGLUNIFORMMATRIX4FVPROC"), glfw.getProcAddress("glUniformMatrix4fv"))
M.glUniformMatrix4x2fv = ffi.cast(ffi.typeof("PFNGLUNIFORMMATRIX4X2FVPROC"), glfw.getProcAddress("glUniformMatrix4x2fv"))
M.glUniformMatrix4x3fv = ffi.cast(ffi.typeof("PFNGLUNIFORMMATRIX4X3FVPROC"), glfw.getProcAddress("glUniformMatrix4x3fv"))
M.glUnmapBuffer = ffi.cast(ffi.typeof("PFNGLUNMAPBUFFERPROC"), glfw.getProcAddress("glUnmapBuffer"))
M.glUseProgram = ffi.cast(ffi.typeof("PFNGLUSEPROGRAMPROC"), glfw.getProcAddress("glUseProgram"))
M.glValidateProgram = ffi.cast(ffi.typeof("PFNGLVALIDATEPROGRAMPROC"), glfw.getProcAddress("glValidateProgram"))
M.glVertex2d = ffi.cast(ffi.typeof("PFNGLVERTEX2DPROC"), glfw.getProcAddress("glVertex2d"))
M.glVertex2dv = ffi.cast(ffi.typeof("PFNGLVERTEX2DVPROC"), glfw.getProcAddress("glVertex2dv"))
M.glVertex2f = ffi.cast(ffi.typeof("PFNGLVERTEX2FPROC"), glfw.getProcAddress("glVertex2f"))
M.glVertex2fv = ffi.cast(ffi.typeof("PFNGLVERTEX2FVPROC"), glfw.getProcAddress("glVertex2fv"))
M.glVertex2i = ffi.cast(ffi.typeof("PFNGLVERTEX2IPROC"), glfw.getProcAddress("glVertex2i"))
M.glVertex2iv = ffi.cast(ffi.typeof("PFNGLVERTEX2IVPROC"), glfw.getProcAddress("glVertex2iv"))
M.glVertex2s = ffi.cast(ffi.typeof("PFNGLVERTEX2SPROC"), glfw.getProcAddress("glVertex2s"))
M.glVertex2sv = ffi.cast(ffi.typeof("PFNGLVERTEX2SVPROC"), glfw.getProcAddress("glVertex2sv"))
M.glVertex3d = ffi.cast(ffi.typeof("PFNGLVERTEX3DPROC"), glfw.getProcAddress("glVertex3d"))
M.glVertex3dv = ffi.cast(ffi.typeof("PFNGLVERTEX3DVPROC"), glfw.getProcAddress("glVertex3dv"))
M.glVertex3f = ffi.cast(ffi.typeof("PFNGLVERTEX3FPROC"), glfw.getProcAddress("glVertex3f"))
M.glVertex3fv = ffi.cast(ffi.typeof("PFNGLVERTEX3FVPROC"), glfw.getProcAddress("glVertex3fv"))
M.glVertex3i = ffi.cast(ffi.typeof("PFNGLVERTEX3IPROC"), glfw.getProcAddress("glVertex3i"))
M.glVertex3iv = ffi.cast(ffi.typeof("PFNGLVERTEX3IVPROC"), glfw.getProcAddress("glVertex3iv"))
M.glVertex3s = ffi.cast(ffi.typeof("PFNGLVERTEX3SPROC"), glfw.getProcAddress("glVertex3s"))
M.glVertex3sv = ffi.cast(ffi.typeof("PFNGLVERTEX3SVPROC"), glfw.getProcAddress("glVertex3sv"))
M.glVertex4d = ffi.cast(ffi.typeof("PFNGLVERTEX4DPROC"), glfw.getProcAddress("glVertex4d"))
M.glVertex4dv = ffi.cast(ffi.typeof("PFNGLVERTEX4DVPROC"), glfw.getProcAddress("glVertex4dv"))
M.glVertex4f = ffi.cast(ffi.typeof("PFNGLVERTEX4FPROC"), glfw.getProcAddress("glVertex4f"))
M.glVertex4fv = ffi.cast(ffi.typeof("PFNGLVERTEX4FVPROC"), glfw.getProcAddress("glVertex4fv"))
M.glVertex4i = ffi.cast(ffi.typeof("PFNGLVERTEX4IPROC"), glfw.getProcAddress("glVertex4i"))
M.glVertex4iv = ffi.cast(ffi.typeof("PFNGLVERTEX4IVPROC"), glfw.getProcAddress("glVertex4iv"))
M.glVertex4s = ffi.cast(ffi.typeof("PFNGLVERTEX4SPROC"), glfw.getProcAddress("glVertex4s"))
M.glVertex4sv = ffi.cast(ffi.typeof("PFNGLVERTEX4SVPROC"), glfw.getProcAddress("glVertex4sv"))
M.glVertexAttrib1d = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB1DPROC"), glfw.getProcAddress("glVertexAttrib1d"))
M.glVertexAttrib1dv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB1DVPROC"), glfw.getProcAddress("glVertexAttrib1dv"))
M.glVertexAttrib1f = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB1FPROC"), glfw.getProcAddress("glVertexAttrib1f"))
M.glVertexAttrib1fv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB1FVPROC"), glfw.getProcAddress("glVertexAttrib1fv"))
M.glVertexAttrib1s = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB1SPROC"), glfw.getProcAddress("glVertexAttrib1s"))
M.glVertexAttrib1sv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB1SVPROC"), glfw.getProcAddress("glVertexAttrib1sv"))
M.glVertexAttrib2d = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB2DPROC"), glfw.getProcAddress("glVertexAttrib2d"))
M.glVertexAttrib2dv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB2DVPROC"), glfw.getProcAddress("glVertexAttrib2dv"))
M.glVertexAttrib2f = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB2FPROC"), glfw.getProcAddress("glVertexAttrib2f"))
M.glVertexAttrib2fv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB2FVPROC"), glfw.getProcAddress("glVertexAttrib2fv"))
M.glVertexAttrib2s = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB2SPROC"), glfw.getProcAddress("glVertexAttrib2s"))
M.glVertexAttrib2sv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB2SVPROC"), glfw.getProcAddress("glVertexAttrib2sv"))
M.glVertexAttrib3d = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB3DPROC"), glfw.getProcAddress("glVertexAttrib3d"))
M.glVertexAttrib3dv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB3DVPROC"), glfw.getProcAddress("glVertexAttrib3dv"))
M.glVertexAttrib3f = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB3FPROC"), glfw.getProcAddress("glVertexAttrib3f"))
M.glVertexAttrib3fv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB3FVPROC"), glfw.getProcAddress("glVertexAttrib3fv"))
M.glVertexAttrib3s = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB3SPROC"), glfw.getProcAddress("glVertexAttrib3s"))
M.glVertexAttrib3sv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB3SVPROC"), glfw.getProcAddress("glVertexAttrib3sv"))
M.glVertexAttrib4Nbv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB4NBVPROC"), glfw.getProcAddress("glVertexAttrib4Nbv"))
M.glVertexAttrib4Niv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB4NIVPROC"), glfw.getProcAddress("glVertexAttrib4Niv"))
M.glVertexAttrib4Nsv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB4NSVPROC"), glfw.getProcAddress("glVertexAttrib4Nsv"))
M.glVertexAttrib4Nub = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB4NUBPROC"), glfw.getProcAddress("glVertexAttrib4Nub"))
M.glVertexAttrib4Nubv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB4NUBVPROC"), glfw.getProcAddress("glVertexAttrib4Nubv"))
M.glVertexAttrib4Nuiv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB4NUIVPROC"), glfw.getProcAddress("glVertexAttrib4Nuiv"))
M.glVertexAttrib4Nusv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB4NUSVPROC"), glfw.getProcAddress("glVertexAttrib4Nusv"))
M.glVertexAttrib4bv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB4BVPROC"), glfw.getProcAddress("glVertexAttrib4bv"))
M.glVertexAttrib4d = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB4DPROC"), glfw.getProcAddress("glVertexAttrib4d"))
M.glVertexAttrib4dv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB4DVPROC"), glfw.getProcAddress("glVertexAttrib4dv"))
M.glVertexAttrib4f = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB4FPROC"), glfw.getProcAddress("glVertexAttrib4f"))
M.glVertexAttrib4fv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB4FVPROC"), glfw.getProcAddress("glVertexAttrib4fv"))
M.glVertexAttrib4iv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB4IVPROC"), glfw.getProcAddress("glVertexAttrib4iv"))
M.glVertexAttrib4s = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB4SPROC"), glfw.getProcAddress("glVertexAttrib4s"))
M.glVertexAttrib4sv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB4SVPROC"), glfw.getProcAddress("glVertexAttrib4sv"))
M.glVertexAttrib4ubv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB4UBVPROC"), glfw.getProcAddress("glVertexAttrib4ubv"))
M.glVertexAttrib4uiv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB4UIVPROC"), glfw.getProcAddress("glVertexAttrib4uiv"))
M.glVertexAttrib4usv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIB4USVPROC"), glfw.getProcAddress("glVertexAttrib4usv"))
M.glVertexAttribDivisor = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBDIVISORPROC"), glfw.getProcAddress("glVertexAttribDivisor"))
M.glVertexAttribI1i = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBI1IPROC"), glfw.getProcAddress("glVertexAttribI1i"))
M.glVertexAttribI1iv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBI1IVPROC"), glfw.getProcAddress("glVertexAttribI1iv"))
M.glVertexAttribI1ui = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBI1UIPROC"), glfw.getProcAddress("glVertexAttribI1ui"))
M.glVertexAttribI1uiv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBI1UIVPROC"), glfw.getProcAddress("glVertexAttribI1uiv"))
M.glVertexAttribI2i = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBI2IPROC"), glfw.getProcAddress("glVertexAttribI2i"))
M.glVertexAttribI2iv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBI2IVPROC"), glfw.getProcAddress("glVertexAttribI2iv"))
M.glVertexAttribI2ui = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBI2UIPROC"), glfw.getProcAddress("glVertexAttribI2ui"))
M.glVertexAttribI2uiv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBI2UIVPROC"), glfw.getProcAddress("glVertexAttribI2uiv"))
M.glVertexAttribI3i = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBI3IPROC"), glfw.getProcAddress("glVertexAttribI3i"))
M.glVertexAttribI3iv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBI3IVPROC"), glfw.getProcAddress("glVertexAttribI3iv"))
M.glVertexAttribI3ui = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBI3UIPROC"), glfw.getProcAddress("glVertexAttribI3ui"))
M.glVertexAttribI3uiv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBI3UIVPROC"), glfw.getProcAddress("glVertexAttribI3uiv"))
M.glVertexAttribI4bv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBI4BVPROC"), glfw.getProcAddress("glVertexAttribI4bv"))
M.glVertexAttribI4i = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBI4IPROC"), glfw.getProcAddress("glVertexAttribI4i"))
M.glVertexAttribI4iv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBI4IVPROC"), glfw.getProcAddress("glVertexAttribI4iv"))
M.glVertexAttribI4sv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBI4SVPROC"), glfw.getProcAddress("glVertexAttribI4sv"))
M.glVertexAttribI4ubv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBI4UBVPROC"), glfw.getProcAddress("glVertexAttribI4ubv"))
M.glVertexAttribI4ui = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBI4UIPROC"), glfw.getProcAddress("glVertexAttribI4ui"))
M.glVertexAttribI4uiv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBI4UIVPROC"), glfw.getProcAddress("glVertexAttribI4uiv"))
M.glVertexAttribI4usv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBI4USVPROC"), glfw.getProcAddress("glVertexAttribI4usv"))
M.glVertexAttribIPointer = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBIPOINTERPROC"), glfw.getProcAddress("glVertexAttribIPointer"))
M.glVertexAttribP1ui = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBP1UIPROC"), glfw.getProcAddress("glVertexAttribP1ui"))
M.glVertexAttribP1uiv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBP1UIVPROC"), glfw.getProcAddress("glVertexAttribP1uiv"))
M.glVertexAttribP2ui = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBP2UIPROC"), glfw.getProcAddress("glVertexAttribP2ui"))
M.glVertexAttribP2uiv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBP2UIVPROC"), glfw.getProcAddress("glVertexAttribP2uiv"))
M.glVertexAttribP3ui = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBP3UIPROC"), glfw.getProcAddress("glVertexAttribP3ui"))
M.glVertexAttribP3uiv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBP3UIVPROC"), glfw.getProcAddress("glVertexAttribP3uiv"))
M.glVertexAttribP4ui = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBP4UIPROC"), glfw.getProcAddress("glVertexAttribP4ui"))
M.glVertexAttribP4uiv = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBP4UIVPROC"), glfw.getProcAddress("glVertexAttribP4uiv"))
M.glVertexAttribPointer = ffi.cast(ffi.typeof("PFNGLVERTEXATTRIBPOINTERPROC"), glfw.getProcAddress("glVertexAttribPointer"))
M.glVertexP2ui = ffi.cast(ffi.typeof("PFNGLVERTEXP2UIPROC"), glfw.getProcAddress("glVertexP2ui"))
M.glVertexP2uiv = ffi.cast(ffi.typeof("PFNGLVERTEXP2UIVPROC"), glfw.getProcAddress("glVertexP2uiv"))
M.glVertexP3ui = ffi.cast(ffi.typeof("PFNGLVERTEXP3UIPROC"), glfw.getProcAddress("glVertexP3ui"))
M.glVertexP3uiv = ffi.cast(ffi.typeof("PFNGLVERTEXP3UIVPROC"), glfw.getProcAddress("glVertexP3uiv"))
M.glVertexP4ui = ffi.cast(ffi.typeof("PFNGLVERTEXP4UIPROC"), glfw.getProcAddress("glVertexP4ui"))
M.glVertexP4uiv = ffi.cast(ffi.typeof("PFNGLVERTEXP4UIVPROC"), glfw.getProcAddress("glVertexP4uiv"))
M.glVertexPointer = ffi.cast(ffi.typeof("PFNGLVERTEXPOINTERPROC"), glfw.getProcAddress("glVertexPointer"))
M.glViewport = ffi.cast(ffi.typeof("PFNGLVIEWPORTPROC"), glfw.getProcAddress("glViewport"))
M.glWaitSync = ffi.cast(ffi.typeof("PFNGLWAITSYNCPROC"), glfw.getProcAddress("glWaitSync"))
M.glWindowPos2d = ffi.cast(ffi.typeof("PFNGLWINDOWPOS2DPROC"), glfw.getProcAddress("glWindowPos2d"))
M.glWindowPos2dv = ffi.cast(ffi.typeof("PFNGLWINDOWPOS2DVPROC"), glfw.getProcAddress("glWindowPos2dv"))
M.glWindowPos2f = ffi.cast(ffi.typeof("PFNGLWINDOWPOS2FPROC"), glfw.getProcAddress("glWindowPos2f"))
M.glWindowPos2fv = ffi.cast(ffi.typeof("PFNGLWINDOWPOS2FVPROC"), glfw.getProcAddress("glWindowPos2fv"))
M.glWindowPos2i = ffi.cast(ffi.typeof("PFNGLWINDOWPOS2IPROC"), glfw.getProcAddress("glWindowPos2i"))
M.glWindowPos2iv = ffi.cast(ffi.typeof("PFNGLWINDOWPOS2IVPROC"), glfw.getProcAddress("glWindowPos2iv"))
M.glWindowPos2s = ffi.cast(ffi.typeof("PFNGLWINDOWPOS2SPROC"), glfw.getProcAddress("glWindowPos2s"))
M.glWindowPos2sv = ffi.cast(ffi.typeof("PFNGLWINDOWPOS2SVPROC"), glfw.getProcAddress("glWindowPos2sv"))
M.glWindowPos3d = ffi.cast(ffi.typeof("PFNGLWINDOWPOS3DPROC"), glfw.getProcAddress("glWindowPos3d"))
M.glWindowPos3dv = ffi.cast(ffi.typeof("PFNGLWINDOWPOS3DVPROC"), glfw.getProcAddress("glWindowPos3dv"))
M.glWindowPos3f = ffi.cast(ffi.typeof("PFNGLWINDOWPOS3FPROC"), glfw.getProcAddress("glWindowPos3f"))
M.glWindowPos3fv = ffi.cast(ffi.typeof("PFNGLWINDOWPOS3FVPROC"), glfw.getProcAddress("glWindowPos3fv"))
M.glWindowPos3i = ffi.cast(ffi.typeof("PFNGLWINDOWPOS3IPROC"), glfw.getProcAddress("glWindowPos3i"))
M.glWindowPos3iv = ffi.cast(ffi.typeof("PFNGLWINDOWPOS3IVPROC"), glfw.getProcAddress("glWindowPos3iv"))
M.glWindowPos3s = ffi.cast(ffi.typeof("PFNGLWINDOWPOS3SPROC"), glfw.getProcAddress("glWindowPos3s"))
M.glWindowPos3sv = ffi.cast(ffi.typeof("PFNGLWINDOWPOS3SVPROC"), glfw.getProcAddress("glWindowPos3sv"))


end

return M
